{"messages": [{"role": "system", "content": "\n                      Please write a 500 word summary on the following Transcript based on the Reading Material.\n                      Pick relevant information from the Reading Material and add it to the summary of the Transcript.\n                      The Summary should be only of the Transcript with a few information from the Reading Material.\n                      If you are not sure of the summary, say 'I don't know'.\n    "}, {"role": "user", "content": "Transcript: Hi, I\u2019m Carrie Anne and this is Crash Course Computer Science! Last episode, we combined an ALU, control unit, some memory, and a clock together to make a basic, but functional Central Processing Unit \u2013 or CPU \u2013 the beating, ticking heart of a computer. We\u2019ve done all the hard work of building many of these components from the electronic circuits up, and now it\u2019s time to give our CPU some actual instructions to process! The thing that makes a CPU powerful is the fact that it is programmable \u2013 if you write a different sequence of instructions, then the CPU will perform a different task. So the CPU is a piece of hardware which is controlled by easy-to-modify software! INTRO Let\u2019s quickly revisit the simple program that we stepped through last episode. The computer memory looked like this. Each address contained 8 bits of data. For our hypothetical CPU, the first four bits specified the operation code, or opcode, and the second set of four bits specified an address or registers. In memory address zero we have 0010 1110. Again, those first four bits are our opcode which corresponds to a \u201cLOAD_A\u201d instruction. This instruction reads data from a location of memory specified in those last four bits of the instruction and saves it into Register A. In this case, 1110, or 14 in decimal. So let\u2019s not think of this of memory address 0 as \u201c0010 1110\u201d, but rather as the instruction \u201cLOAD_A 14\u201d. That\u2019s much easier to read and understand! And for me to say! And we can do the same thing for the rest of the data in memory. In this case, our program is just four instructions long, and we\u2019ve put some numbers into memory too, 3 and 14. So now let\u2019s step through this program: First is LOAD_A 14, which takes the value in address 14, which is the number 3, and stores it into Register A. Then we have a \u201cLOAD_B 15\u201d instruction, which takes the value in memory location 15, which is the number 14, and saves it into Register B. Okay. Easy enough. But now we have an \u201cADD\u201d instruction. This tells the processor to use the ALU to add two registers together, in this case, B and A are specified. The ordering is important, because the resulting sum is saved into the second register that\u2019s specified. So in this case, the resulting sum is saved into Register A. And finally, our last instruction is \u201cSTORE_A 13\u201d, which instructs the CPU to write whatever value is in Register A into memory location 13. Yesss! Our program adds two numbers together. That\u2019s about as exciting as it gets when we only have four instructions to play with. So let\u2019s add some more! Now we\u2019ve got a subtract function, which like ADD, specifies two registers to operate on. We\u2019ve also got a fancy new instruction called JUMP. As the name implies, this causes the program to \u201cjump\u201d to a new location. This is useful if we want to change the order of instructions, or choose to skip some instructions. For example, a JUMP 0, would cause the program to go back to the beginning. At a low level, this is done by writing the value specified in the last four bits into the instruction address register, overwriting the current value. We\u2019ve also added a special version of JUMP called JUMP_NEGATIVE. This only jumps the program if the ALU\u2019s negative flag is set to true. As we talked about in Episode 5, the negative flag is only set when the result of an arithmetic operation is negative. If the result of the arithmetic was zero or positive, the negative flag would not be set. So the JUMP NEGATIVE won\u2019t jump anywhere, and the CPU will just continue on to the next instruction. And finally, computers need to be told when to stop processing, so we need a HALT instruction. Our previous program really should have looked like this to be correct, otherwise the CPU would have just continued on after the STORE instruction, processing all those 0\u2019s. But there is no instruction with an opcode of 0, and so the computer would have crashed! It\u2019s important to point out here that we\u2019re storing both instructions and data in the same memory. There is no difference fundamentally -- it\u2019s all just binary numbers. So the HALT instruction is really important because it allows us to separate the two. Okay, so let\u2019s make our program a bit more interesting, by adding a JUMP. We\u2019ll also modify our two starting values in memory to 1 and 1. Lets step through this program just as our CPU would. First, LOAD_A 14 loads the value 1 into Register A. Next, LOAD_B 15 loads the value 1 into Register B. As before, we ADD registers B and A together, with the sum going into Register A. 1+1 = 2, so now Register A has the value 2 in it (stored in binary of course) Then the STORE instruction saves that into memory location 13. Now we hit a \u201cJUMP 2\u201d instruction. This causes the processor to overwrite the value in the instruction address register, which is currently 4, with the new value, 2. Now, on the processor\u2019s next fetch cycle, we don\u2019t fetch HALT, instead we fetch the instruction at memory location 2, which is ADD B A. We\u2019ve jumped! Register A contains the value 2, and register B contains the value 1. So 1+2 = 3, so now Register A has the value 3. We store that into memory. And we\u2019ve hit the JUMP again, back to ADD B A. 1+3 = 4. So now register A has the value 4. See what's happening here? Every loop, we\u2019re adding one. Its counting up! Cooooool. But notice there\u2019s no way to ever escape. We\u2019re never.. ever.. going to get to that halt instruction, because we\u2019re always going to hit that JUMP. This is called an infinite loop \u2013 a program that runs forever\u2026 ever\u2026 ever\u2026 ever\u2026 ever To break the loop, we need a conditional jump. A jump that only happens if a certain condition is met. Our JUMP_NEGATIVE is one example of a conditional jump, but computers have other types too - like JUMP IF EQUAL and JUMP IF GREATER. So let\u2019s make our code a little fancier and step through it. Just like before, the program starts by loading values from memory into registers A and B. In this example, the number 11 gets loaded into Register A, and 5 gets loaded into Register B. Now we subtract register B from register A. That\u2019s 11 minus 5, which is 6, and so 6 gets saved into Register A. Now we hit our JUMP NEGATIVE. The last ALU result was 6. That\u2019s a positive number, so the the negative flag is false. That means the processor does not jump. So we continue on to the next instruction... ...which is a JUMP 2. No conditional on this one, so we jump to instruction 2 no matter what. Ok, so we\u2019re back at our SUBTRACT Register B from Register A. 6 minus 5 equals 1. So 1 gets saved into register A. Next instruction. We\u2019re back again at our JUMP NEGATIVE. 1 is also a positive number, so the CPU continues on to the JUMP 2, looping back around again to the SUBTRACT instruction. This time is different though. 1 minus 5 is negative 4. And so the ALU sets its negative flag to true for the first time. Now, when we advance to the next instruction, JUMP_NEGATIVE 5, the CPU executes the jump to memory location 5. We\u2019re out of the infinite loop! Now we have a ADD B to A. Negative 4 plus 5, is positive 1, and we save that into Register A. Next we have a STORE instruction that saves Register A into memory address 13. Lastly, we hit our HALT instruction and the computer rests. So even though this program is only 7 instructions long, the CPU ended up executing 13 instructions, and that's because it looped twice internally. This code calculated the remainder if we divide 5 into 11, which is one. With a few extra lines of code, we could also keep track of how many loops we did, the count of which would be how many times 5 went into 11\u2026 we did two loops, so that means 5 goes into 11 two times... with a remainder of 1. And of course this code could work for any two numbers, which we can just change in memory to whatever we want: 7 and 81, 18 and 54, it doesn\u2019t matter -- that\u2019s the power of software! Software also allowed us to do something our hardware could not. Remember, our ALU didn\u2019t have the functionality to divide two numbers, instead it\u2019s the program we made that gave us that functionality. And then other programs can use our divide program to do even fancier things. And you know what that means. New levels of abstraction! So, our hypothetical CPU is very basic \u2013 all of its instructions are 8 bits long, with the opcode occupying only the first four bits. So even if we used every combination of 4 bits, our CPU would only be able to support a maximum of 16 different instructions. On top of that, several of our instructions used the last 4 bits to specify a memory location. But again, 4 bits can only encode 16 different values, meaning we can address a maximum of 16 memory locations - that\u2019s not a lot to work with. For example, we couldn\u2019t even JUMP to location 17, because we literally can\u2019t fit the number 17 into 4 bits. For this reason, real, modern CPUs use two strategies. The most straightforward approach is just to have bigger instructions, with more bits, like 32 or 64 bits. This is called the instruction length. Unsurprisingly. The second approach is to use variable length instructions. For example, imagine a CPU that uses 8 bit opcodes. When the CPU sees an instruction that needs no extra values, like the HALT instruction, it can just execute it immediately. However, if it sees something like a JUMP instruction, it knows it must also fetch the address to jump to, which is saved immediately behind the JUMP instruction in memory. This is called, logically enough, an Immediate Value. In such processor designs, instructions can be any number of bytes long, which makes the fetch cycle of the CPU a tad more complicated. Now, our example CPU and instruction set is hypothetical, designed to illustrate key working principles. So I want to leave you with a real CPU example. In 1971, Intel released the 4004 processor. It was the first CPU put all into a single chip and paved the path to the intel processors we know and love today. It supported 46 instructions, shown here. Which was enough to build an entire working computer. And it used many of the instructions we\u2019ve talked about like JUMP ADD SUBTRACT and LOAD. It also uses 8-bit immediate values, like we just talked about, for things like JUMPs, in order to address more memory. And processors have come a long way since 1971. A modern computer processor, like an Intel Core i7, has thousands of different instructions and instruction variants, ranging from one to fifteen bytes long. For example, there\u2019s over a dozens different opcodes just for variants of ADD! And this huge growth in instruction set size is due in large part to extra bells and whistles that have been added to processor designs overtime, which we\u2019ll talk about next episode. See you next week!\n\n\n                           Reading Material: In computer programming, machine code is computer code consisting of machine language instructions, which are used to control a computer's central processing unit (CPU). Although decimal computers were once common, the contemporary marketplace is dominated by binary computers; for those computers, machine code is \"the binary representation of a computer program which is actually read and interpreted by the computer. A program in machine code consists of a sequence of machine instructions (possibly interspersed with data).\"Each instruction causes the CPU to perform a very specific task, such as a load, a store, a jump, or an arithmetic logic unit (ALU) operation on one or more units of data in the CPU's registers or memory.\nEarly CPUs had specific machine code that might break backward compatibility with each new CPU released. The notion of an instruction set architecture (ISA) defines and specifies the behavior and encoding in memory of the instruction set of the system, without specifying its exact implementation. This acts as an abstraction layer, enabling compatibility within the same family of CPUs, so that machine code written or generated according to the ISA for the family will run on all CPUs in the family, including future CPUs.\nIn general, each architecture family (e.g. x86, ARM) has its own ISA, and hence its own specific machine code language. There are exceptions, such as the VAX architecture, which included optional support of the PDP-11 instruction set and IA-64, which included optional support of the IA-32 instruction set. Another example is the PowerPC 615, a processor designed to natively process both PowerPC and x86 instructions. \nMachine code is a strictly numerical language, and is the lowest-level interface to the CPU intended for a programmer. Assembly language provides a direct mapping between the numerical machine code and a human-readable version where numerical opcodes and operands are replaced by readable strings (e.g. 0x90 is the NOP instruction on x86). While it is possible to write programs directly in machine code, managing individual bits and calculating numerical addresses and constants manually is tedious and error-prone. For this reason, programs are very rarely written directly in machine code in modern contexts, but may be done for low-level debugging, program patching (especially when assembler source is not available) and assembly language disassembly.\nThe majority of practical programs today are written in higher-level languages. Those programs are either translated into machine code by a compiler, or are interpreted by an interpreter, usually after being translated into an intermediate code, such as a bytecode, that is then interpreted.Machine code is by definition the lowest level of programming detail visible to the programmer, but internally many processors use microcode or optimize and transform machine code instructions into sequences of micro-ops. Microcode and micro-ops are not generally considered to be machine code; except on some machines, the user cannot write microcode or micro-ops, and the operation of microcode and the transformation of machine-code instructions into micro-ops happens transparently to the programmer except for performance related side effects.\n\n\n== Instruction set ==\n\nEvery processor or processor family has its own instruction set. Instructions are patterns of bits, digits, or characters that correspond to machine commands. Thus, the instruction set is specific to a class of processors using (mostly) the same architecture. Successor or derivative processor designs often include instructions of a predecessor and may add new additional instructions. Occasionally, a successor design will discontinue or alter the meaning of some instruction code (typically because it is needed for new purposes), affecting code compatibility to some extent; even compatible processors may show slightly different behavior for some instructions, but this is rarely a problem. Systems may also differ in other details, such as memory arrangement, operating systems, or peripheral devices. Because a program normally relies on such factors, different systems will typically not run the same machine code, even when the same type of processor is used.\nA processor's instruction set may have fixed-length or variable-length instructions. How the patterns are organized varies with the particular architecture and type of instruction. Most instructions have one or more opcode fields that specify the basic instruction type (such as arithmetic, logical, jump, etc.), the operation (such as add or compare), and other fields that may give the type of the operand(s), the addressing mode(s), the addressing offset(s) or index, or the operand value itself (such constant operands contained in an instruction are called immediate).Not all machines or individual instructions have explicit operands. On a machine with a single accumulator, the accumulator is implicitly both the left operand and result of most arithmetic instructions. Some other architectures, such as the x86 architecture, have accumulator versions of common instructions, with the accumulator regarded as one of the general registers by longer instructions. A stack machine has most or all of its operands on an implicit stack. Special purpose instructions also often lack explicit operands; for example, CPUID in the x86 architecture writes values into four implicit destination registers. This distinction between explicit and implicit operands is important in code generators, especially in the register allocation and live range tracking parts. A good code optimizer can track implicit as well as explicit operands which may allow more frequent constant propagation, constant folding of registers (a register assigned the result of a constant expression freed up by replacing it by that constant) and other code enhancements.\n\n\n== Programs ==\nA computer program is a list of instructions that can be executed by a central processing unit (CPU). A program's execution is done in order for the CPU that is executing it to solve a problem and thus accomplish a result. While simple processors are able to execute instructions one after another, superscalar processors are able under certain circumstances (when the pipeline is full) of executing two or more instructions simultaneously. As an example, the original Intel Pentium from 1993 can execute at most two instructions per clock cycle when its pipeline is full.\nProgram flow may be influenced by special 'jump' instructions that transfer execution to an address (and hence instruction) other than the next numerically sequential address. Whether these conditional jumps occur is dependent upon a condition such as a value being greater than, less than, or equal to another value.\n\n\n== Assembly languages ==\n\nA much more human friendly rendition of machine language, called assembly language, uses mnemonic codes to refer to machine code instructions, rather than using the instructions' numeric values directly, and uses symbolic names to refer to storage locations and sometimes registers. For example, on the Zilog Z80 processor, the machine code 00000101, which causes the CPU to decrement the B general-purpose register, would be represented in assembly language as DEC B.\n\n\n== Example ==\nThe MIPS architecture provides a specific example for a machine code whose instructions are always 32 bits long.:\u200a299\u200a The general type of instruction is given by the op (operation) field, the highest 6 bits. J-type (jump) and I-type (immediate) instructions are fully specified by op. R-type (register) instructions include an additional field funct to determine the exact operation. The fields used in these types are:\n\n   6      5     5     5     5      6 bits\n[  op  |  rs |  rt |  rd |shamt| funct]  R-type\n[  op  |  rs |  rt | address/immediate]  I-type\n[  op  |        target address        ]  J-type\n\nrs, rt, and rd indicate register operands; shamt gives a shift amount; and the address or immediate fields contain an operand directly.:\u200a299\u2013301\u200aFor example, adding the registers 1 and 2 and placing the result in register 6 is encoded::\u200a554\u200a\n[  op  |  rs |  rt |  rd |shamt| funct]\n    0     1     2     6     0     32     decimal\n 000000 00001 00010 00110 00000 100000   binary\n\nLoad a value into register 8, taken from the memory cell 68 cells after the location listed in register 3::\u200a552\u200a\n[  op  |  rs |  rt | address/immediate]\n   35     3     8           68           decimal\n 100011 00011 01000 00000 00001 000100   binary\n\nJumping to the address 1024::\u200a552\u200a\n[  op  |        target address        ]\n    2                 1024               decimal\n 000010 00000 00000 00000 10000 000000   binary\n\n\n== Overlapping instructions ==\nOn processor architectures with variable-length instruction sets (such as Intel's x86 processor family) it is, within the limits of the control-flow resynchronizing phenomenon known as the Kruskal count, sometimes possible through opcode-level programming to deliberately arrange the resulting code so that two code paths share a common fragment of opcode sequences. These are called overlapping instructions, overlapping opcodes, overlapping code, overlapped code, instruction scission, or jump into the middle of an instruction, and represent a form of superposition.In the 1970s and 1980s, overlapping instructions were sometimes used to preserve memory space. One example were in the implementation of error tables in Microsoft's Altair BASIC, where interleaved instructions mutually shared their instruction bytes. The technique is rarely used today, but might still be necessary to resort to in areas where extreme optimization for size is necessary on byte-level such as in the implementation of boot loaders which have to fit into boot sectors.It is also sometimes used as a code obfuscation technique as a measure against disassembly and tampering.The principle is also utilized in shared code sequences of fat binaries which must run on multiple instruction-set-incompatible processor platforms.This property is also used to find unintended instructions called gadgets in existing code repositories and is utilized in return-oriented programming as alternative to code injection for exploits such as return-to-libc attacks.\n\n\n== Relationship to microcode ==\nIn some computers, the machine code of the  architecture is implemented by an even more fundamental underlying layer called microcode, providing a common machine language interface across a line or family of different models of computer with widely different underlying dataflows. This is done to facilitate porting of machine language programs between different models. An example of this use is the IBM System/360 family of computers and their successors. With dataflow path widths of 8 bits to 64 bits and beyond, they nevertheless present a common architecture at the machine language level across the entire line.\nUsing microcode to implement an emulator enables the computer to present the architecture of an entirely different computer. The System/360 line used this to allow porting programs from earlier IBM machines to the new family of computers, e.g. an IBM 1401/1440/1460 emulator on the IBM S/360 model 40.\n\n\n== Relationship to bytecode ==\nMachine code is generally different from bytecode (also known as p-code), which is either executed by an interpreter or itself compiled into machine code for faster (direct) execution. An exception is when a processor is designed to use a particular bytecode directly as its machine code, such as is the case with Java processors.\nMachine code and assembly code are sometimes called native code when referring to platform-dependent parts of language features or libraries.\n\n\n== Storing in memory ==\nFrom the point of view of the CPU, machine code is stored in RAM, but is typically also kept in a set of caches for performance reasons. There may be different caches for instructions and data, depending on the architecture.\nThe CPU knows what machine code to execute, based on its internal program counter. The program counter points to a memory address and is changed based on special instructions which may cause programmatic branches. The program counter is typically set to a hard coded value when the CPU is first powered on, and will hence execute whatever machine code happens to be at this address.\nSimilarly, the program counter can be set to execute whatever machine code is at some arbitrary address, even if this is not valid machine code. This will typically trigger an architecture specific protection fault.\nThe CPU is oftentimes told, by page permissions in a paging based system, if the current page actually holds machine code by an execute bit \u2014 pages have multiple such permission bits (readable, writable, etc.) for various housekeeping functionality. E.g. on Unix-like systems memory pages can be toggled to be executable with the mprotect() system call, and on Windows, VirtualProtect() can be used to achieve a similar result. If an attempt is made to execute machine code on a non-executable page, an architecture specific fault will typically occur. Treating data as machine code, or finding new ways to use existing machine code, by various techniques, is the basis of some security vulnerabilities.\nSimilarly, in a segment based system, segment descriptors can indicate whether a segment can contain executable code and in what rings that code can run.\nFrom the point of view of a process, the code space is the part of its address space where the code in execution is stored. In multitasking systems this comprises the program's code segment and usually shared libraries. In multi-threading environment, different threads of one process share code space along with data space, which reduces the overhead of context switching considerably as compared to process switching.\n\n\n== Readability by humans ==\nPamela Samuelson wrote that machine code is so unreadable that the United States Copyright Office cannot identify whether a particular encoded program is an original work of authorship; however, the US Copyright Office does allow for copyright registration of computer programs and a program's machine code can sometimes be decompiled in order to make its functioning more easily understandable to humans. However, the output of a decompiler or disassembler will be missing the comments and symbolic references, so while the output may be easier to read than the object code, it will still be more difficult than the original source code. This problem does not exist for object-code formats like SQUOZE, where the source code is included in the file.\nCognitive science professor Douglas Hofstadter has compared machine code to genetic code, saying that \"Looking at a program written in machine language is vaguely comparable to looking at a DNA molecule atom by atom.\"\n\n\n\n\n\n                           Answer: \n\n"}, {"role": "assistant", "content": "\ufeffCPUs combine an ALU, control unit, memory, and clock to perform tasks based on instructions. What makes CPU\u2019s powerful is that they are programmable, such that if you write a different set of instructions, it will perform a completely different task. This way, the CPU becomes a hardware that can be used by easy to modify software. \n\nInstructions are stored in memory, allowing for easy program modification and control by software. From the point of view of the CPU, machine code is stored in RAM, but is typically also kept in a set of caches for performance reasons. There may be different caches for instructions and data, depending on the architecture. \n\nInstructions are sequences of opcodes and addresses/registers that control CPU operations. Each opcode responds to a particular instruction within the computer\u2019s defined instruction table and performs the given task utilizing the address or registers in the second half of the instruction sequence. Most instructions have one or more opcode fields that specify the basic instruction type (such as arithmetic, logical, jump, etc.), the operation (such as add or compare), and other fields that may give the type of the operand(s), the addressing mode(s), the addressing offset(s) or index, or the operand value itself (such constant operands contained in an instruction are called immediate). Every processor or processor family has its own instruction set. Instructions are patterns of bits, digits, or characters that correspond to machine commands. Thus, the instruction set is specific to a class of processors using (mostly) the same architecture. \n\nSome examples of some basic instructions within the instruction table include LOAD, STORE, ADD, and SUBTRACT, enabling simple arithmetic operations. We also have other operations such as JUMP and JUMP_NEGATIVE instructions that allow for program flow control and conditional execution. JUMP allows for the processor to update the instruction address register to a new address, possibly skipping some instructions while JUMP_NEGATIVE does the same thing in the event that an ALU instruction outputs a negative result. There is also the HALT instruction which signifies the end of a program and prevents infinite loops.\n\nIt should be noted that we can store instructions and data in the same memory, as there is no difference fundamentally as they are all binary numbers. It is for this reason that the HALT instruction is important as to differentiate the instructions from the data. You should also keep in mind that the placement of JUMP or JUMP_NEGATIVE operations should be carefully considered, as it is possible to create a sequence of instructions such that we have an infinite loop. To break such a loop, we need another condition jump to exit the looped sequence in order to proceed with the program.\n\nIn these examples, we are working with a simple CPU that uses 8-bit instructions. This leads to complications as we are limited to 16 lines of instruction and data. Modern CPUs use larger instruction lengths (32-64 bits) and variable-length instructions, increasing instruction capacity and flexibility. How the patterns are organized varies with the particular architecture and type of instruction. \n"}]}
{"messages": [{"role": "system", "content": "\n                      Please write a 500 word summary on the following Transcript based on the Reading Material.\n                      Pick relevant information from the Reading Material and add it to the summary of the Transcript.\n                      The Summary should be only of the Transcript with a few information from the Reading Material.\n                      If you are not sure of the summary, say 'I don't know'.\n    "}, {"role": "user", "content": "Transcript: You use Linux every day, whether you know it or not. Over 850,000 Android phones running Linux are activated every single day. Compare that to just 30,000 Windows phones, according to the latest reports. That means 100 Android devices have come online just since you started watching this video. Nearly 700,000 TVs are sold every day, most of which are running Linux. 8 out of 10 financial trades are powered by Linux. 9 out of 10 of the world's supercomputers run Linux. Google, Twitter, Facebook, and Amazon are all powered by Linux. So, how is Linux developed to achieve all of this? Unlike other operating systems, like Windows or IOS, Linux is built collaboratively across companies, geographies, and markets, resulting in the largest collaborative development project in the history of computing. Just since 2005, about 8,000 developers from almost 800 companies have contributed to the Linux kernel. These contributions have resulted in 15 million lines of code, 1.5 million lines written in just the last couple of years. Consider that Homer's ethic Iliad poem is a mere 15,000 lines of text. The novel War and Peace just 560,000 words. But it's not just about the sheer number of lines of code. It's also about how quickly Linux is developed and released. For example, a major new kernel comes out every 2-3 months. Compare this to years for computing operating systems. This is made possible by a unique collaborative development process. When submitting code to the Linux kernel, developers break changes into individual unit called patches. A patch describes the lines that need to be changed, added or removed from the source code. Each patch can add a new feature, new support for a device, fix a problem, improve performance, or rework things to be more easily understood. Developers post their patches to the relevant mailing lists, where other developers can reply with feedback. When the patch is close to being release-ready, it is accepted by a senior Linux kernel developer or maintainer, who manages one or more of the 100 different sections of the kernel. While this isn't a guarantee that it will go to the mainline, it is certainly a good sign. Here it gets an even more extensive evaluation. When the maintainer finishes their review, he or she will sign off on the patch, and send it on to Linux creator and Linux Foundation Fellow Linux Torvalds, who has the ultimate authority on what is accepted into the next release, and what is not. Nearly 10,000 patches go into almost every new release. About 6 patches are applied to the kernel each hour. Linux's rate of development is simply unmatched. Today, Linux is dominating on mobile devices, in the enterprise, and web infrastructure, data centers, super computing and more. What's next? Because together, we're ready.\n\n\n                           Reading Material: Linux ( LIN-uuks) is a family of open-source Unix-like operating systems based on the Linux kernel, an operating system kernel first released on September 17, 1991, by Linus Torvalds. Linux is typically packaged as a Linux distribution (distro), which includes the kernel and supporting system software and libraries, many of which are provided by the GNU Project. Many Linux distributions use the word \"Linux\" in their name, but the Free Software Foundation uses and recommends the name \"GNU/Linux\" to emphasize the use and importance of GNU software in many distributions, causing some controversy.Popular Linux distributions include Debian, Fedora Linux, Arch Linux, and Ubuntu. Commercial distributions include Red Hat Enterprise Linux and SUSE Linux Enterprise. Desktop Linux distributions include a windowing system such as X11 or Wayland and a desktop environment such as GNOME or KDE Plasma. Distributions intended for servers may not have a graphical user interface at all, or include a solution stack such as LAMP. Because Linux is freely redistributable, anyone may create a distribution for any purpose.Linux was originally developed for personal computers based on the Intel x86 architecture, but has since been ported to more platforms than any other operating system. Because of the dominance of Linux-based Android on smartphones, Linux, including Android, has the largest installed base of all general-purpose operating systems as of May 2022. Although Linux is, as of November 2022, used by only around 2.6 percent of desktop computers, the Chromebook, which runs the Linux kernel-based ChromeOS, dominates the US K\u201312 education market and represents nearly 20 percent of sub-$300 notebook sales in the US. Linux is the leading operating system on servers (over 96.4% of the top one million web servers' operating systems are Linux), leads other big iron systems such as mainframe computers, and is used on all of the world's 500 fastest supercomputers (as of November 2017, having gradually displaced all competitors).Linux also runs on embedded systems, i.e., devices whose operating system is typically built into the firmware and is highly tailored to the system. This includes routers, automation controls, smart home devices, video game consoles, televisions (Samsung and LG Smart TVs), automobiles (Tesla, Audi, Mercedes-Benz, Hyundai, and Toyota), and spacecraft (Falcon 9 rocket, Dragon crew capsule, and the Perseverance rover).\nLinux is one of the most prominent examples of free and open-source software collaboration. The source code may be used, modified, and distributed commercially or non-commercially by anyone under the terms of its respective licenses, such as the GNU General Public License (GPL). The Linux kernel, for example, is licensed under the GPLv2, with an exception for system calls that allows code that calls the kernel via system calls not to be licensed under the GPL.\n\n\n== History ==\n\n\n=== Precursors ===\nThe Unix operating system was conceived and implemented in 1969, at AT&T's Bell Labs, in the United States by Ken Thompson, Dennis Ritchie, Douglas McIlroy, and Joe Ossanna. First released in 1971, Unix was written entirely in assembly language, as was common practice at the time. In 1973, in a key pioneering approach, it was rewritten in the C programming language by Dennis Ritchie (with the exception of some hardware and I/O routines). The availability of a high-level language implementation of Unix made its porting to different computer platforms easier.Due to an earlier antitrust case forbidding it from entering the computer business, AT&T licensed the operating system's source code as a trade secret to anyone who asked. As a result, Unix grew quickly and became widely adopted by academic institutions and businesses. In 1984, AT&T divested itself of its regional operating companies, and was released from its obligation not to enter the computer business; freed of that obligation, Bell Labs began selling Unix as a proprietary product, where users were not legally allowed to modify it.Onyx Systems began selling early microcomputer-based Unix workstations in 1980. Later, Sun Microsystems, founded as a spin-off of a student project at Stanford University, also began selling Unix-based desktop workstations in 1982. While Sun workstations did not use commodity PC hardware, for which Linux was later originally developed, it represented the first successful commercial attempt at distributing a primarily single-user microcomputer that ran a Unix operating system.With Unix increasingly \"locked in\" as a proprietary product, the GNU Project, started in 1983 by Richard Stallman, had the goal of creating a \"complete Unix-compatible software system\" composed entirely of free software. Work began in 1984. Later, in 1985, Stallman started the Free Software Foundation and wrote the GNU General Public License (GNU GPL) in 1989. By the early 1990s, many of the programs required in an operating system (such as libraries, compilers, text editors, a command-line shell, and a windowing system) were completed, although low-level elements such as device drivers, daemons, and the kernel, called GNU Hurd, were stalled and incomplete.MINIX was created by Andrew S. Tanenbaum, a computer science professor, and released in 1987 as a minimal Unix-like operating system targeted at students and others who wanted to learn operating system principles. Although the complete source code of MINIX was freely available, the licensing terms prevented it from being free software until the licensing changed in April 2000.Although not released until 1992, due to legal complications, development of 386BSD, from which NetBSD, OpenBSD and FreeBSD descended, predated that of Linux. Linus Torvalds has stated on separate occasions that if the GNU kernel or 386BSD had been available at the time (1991), he probably would not have created Linux.\n\n\n=== Creation ===\nWhile attending the University of Helsinki in the fall of 1990, Torvalds enrolled in a Unix course. The course used a MicroVAX minicomputer running Ultrix, and one of the required texts was Operating Systems: Design and Implementation by Andrew S. Tanenbaum. This textbook included a copy of Tanenbaum's MINIX operating system. It was with this course that Torvalds first became exposed to Unix. In 1991, he became curious about operating systems. Frustrated by the licensing of MINIX, which at the time limited it to educational use only, he began to work on his own operating system kernel, which eventually became the Linux kernel.\nOn July 3, 1991, in an effort to implement Unix system calls, Linus Torvalds attempted unsuccessfully to obtain a digital copy of the POSIX standards documentation with a request to the comp.os.minix newsgroup. After not finding the POSIX documentation, Torvalds initially resorted to determining system calls from SunOS documentation owned by the university for use in operating its Sun Microsystems server. He also learned some system calls from Tanenbaum's MINIX text.\nTorvalds began the development of the Linux kernel on MINIX and applications written for MINIX were also used on Linux. Later, Linux matured and further Linux kernel development took place on Linux systems. GNU applications also replaced all MINIX components, because it was advantageous to use the freely available code from the GNU Project with the fledgling operating system; code licensed under the GNU GPL can be reused in other computer programs as long as they also are released under the same or a compatible license. Torvalds initiated a switch from his original license, which prohibited commercial redistribution, to the GNU GPL. Developers worked to integrate GNU components with the Linux kernel, creating a fully functional and free operating system.\n\n\n=== Naming ===\nLinus Torvalds had wanted to call his invention \"Freax\", a portmanteau of \"free\", \"freak\", and \"x\" (as an allusion to Unix). During the start of his work on the system, some of the project's makefiles included the name \"Freax\" for about half a year. Initially, Torvalds considered the name \"Linux\" but dismissed it as too egotistical.To facilitate development, the files were uploaded to the FTP server (ftp.funet.fi) of FUNET in September 1991. Ari Lemmke, Torvalds' coworker at the Helsinki University of Technology (HUT) who was one of the volunteer administrators for the FTP server at the time, did not think that \"Freax\" was a good name, so he named the project \"Linux\" on the server without consulting Torvalds. Later, however, Torvalds consented to \"Linux\".\nAccording to a newsgroup post by Torvalds, the word \"Linux\" should be pronounced (  LIN-uuks) with a short 'i' as in 'print' and 'u' as in 'put'. To further demonstrate how the word \"Linux\" should be pronounced, he included an audio guide with the kernel source code. However, in this recording, he pronounces Linux as /\u02c8lin\u028aks/ (LEEN-uuks) with a short but close front unrounded vowel, instead of a near-close near-front unrounded vowel as in his newsgroup post.\n\n\n=== Commercial and popular uptake ===\n\nAdoption of Linux in production environments, rather than being used only by hobbyists, started to take off first in the mid-1990s in the supercomputing community, where organizations such as NASA started to replace their increasingly expensive machines with clusters of inexpensive commodity computers running Linux. Commercial use began when Dell and IBM, followed by Hewlett-Packard, started offering Linux support to escape Microsoft's monopoly in the desktop operating system market.Today, Linux systems are used throughout computing, from embedded systems to virtually all supercomputers, and have secured a place in server installations such as the popular LAMP application stack. Use of Linux distributions in home and enterprise desktops has been growing. Linux distributions have also become popular in the netbook market, with many devices shipping with customized Linux distributions installed, and Google releasing their own ChromeOS designed for netbooks.\nLinux's greatest success in the consumer market is perhaps the mobile device market, with Android being the dominant operating system on smartphones and very popular on tablets and, more recently, on wearables. Linux gaming is also on the rise with Valve showing its support for Linux and rolling out SteamOS, its own gaming-oriented Linux distribution, which was later implemented in their Steam Deck platform. Linux distributions have also gained popularity with various local and national governments, such as the federal government of Brazil.\n\n\n=== Current development ===\nLinus Torvalds is the lead maintainer for the Linux kernel and guides its development, while Greg Kroah-Hartman is the lead maintainer for the stable branch. Zo\u00eb Kooyman is the executive director of the Free Software Foundation, which in turn supports the GNU components. Finally, individuals and corporations develop third-party non-GNU components. These third-party components comprise a vast body of work and may include both kernel modules and user applications and libraries.\nLinux vendors and communities combine and distribute the kernel, GNU components, and non-GNU components, with additional package management software in the form of Linux distributions.\n\n\n== Design ==\n\nMany open source developers agree that the Linux kernel was not designed but rather evolved through natural selection. Torvalds considers that although the design of Unix served as a scaffolding, \"Linux grew with a lot of mutations \u2013 and because the mutations were less than random, they were faster and more directed than alpha-particles in DNA.\" Eric S. Raymond considers Linux's revolutionary aspects to be social, not technical: before Linux, complex software was designed carefully by small groups, but \"Linux evolved in a completely different way. From nearly the beginning, it was rather casually hacked on by huge numbers of volunteers coordinating only through the Internet. Quality was maintained not by rigid standards or autocracy but by the naively simple strategy of releasing every week and getting feedback from hundreds of users within days, creating a sort of rapid Darwinian selection on the mutations introduced by developers.\" Bryan Cantrill, an engineer of a competing OS, agrees that \"Linux wasn't designed, it evolved\", but considers this to be a limitation, proposing that some features, especially those related to security, cannot be evolved into, \"this is not a biological system at the end of the day, it's a software system.\"A Linux-based system is a modular Unix-like operating system, deriving much of its basic design from principles established in Unix during the 1970s and 1980s. Such a system uses a monolithic kernel, the Linux kernel, which handles process control, networking, access to the peripherals, and file systems. Device drivers are either integrated directly with the kernel, or added as modules that are loaded while the system is running.The GNU userland is a key part of most systems based on the Linux kernel, with Android being the notable exception. The GNU C library, an implementation of the C standard library, works as a wrapper for the system calls of the Linux kernel necessary to the kernel-userspace interface, the toolchain is a broad collection of programming tools vital to Linux development (including the compilers used to build the Linux kernel itself), and the coreutils implement many basic Unix tools. The GNU Project also develops Bash, a popular CLI shell. The graphical user interface (or GUI) used by most Linux systems is built on top of an implementation of the X Window System. More recently, the Linux community has sought to advance to Wayland as the new display server protocol, in place of X11. Many other open-source software projects contribute to Linux systems.\n\nInstalled components of a Linux system include the following:\nA bootloader, for example GNU GRUB, LILO, SYSLINUX or systemd-boot. This is a program that loads the Linux kernel into the computer's main memory, by being executed by the computer when it is turned on and after the firmware initialization is performed.\nAn init program, such as the traditional sysvinit and the newer systemd, OpenRC and Upstart. This is the first process launched by the Linux kernel, and is at the root of the process tree. It starts processes such as system services and login prompts (whether graphical or in terminal mode).\nSoftware libraries, which contain code that can be used by running processes. On Linux systems using ELF-format executable files, the dynamic linker that manages the use of dynamic libraries is known as ld-linux.so. If the system is set up for the user to compile software themselves, header files will also be included to describe the programming interface of installed libraries. Besides the most commonly used software library on Linux systems, the GNU C Library (glibc), there are numerous other libraries, such as SDL and Mesa.\nThe C standard library is the library necessary to run programs written in C on a computer system, with the GNU C Library being the standard. It provides an implementation of the POSIX API, as well as extensions to that API. For embedded systems, alternatives such as musl, EGLIBC (a glibc fork once used by Debian) and uClibc (which was designed for uClinux) have been developed, although the last two are no longer maintained. Android uses its own C library, Bionic. However, musl can additionally be used as a replacement for glibc on desktop and laptop systems, as seen on certain Linux distributions like Void Linux.\nBasic Unix commands, with GNU coreutils being the standard implementation. Alternatives exist for embedded systems, such as the copyleft BusyBox, and the BSD-licensed Toybox.\nWidget toolkits are the libraries used to build graphical user interfaces (GUIs) for software applications. Numerous widget toolkits are available, including GTK and Clutter developed by the GNOME Project, Qt developed by the Qt Project and led by The Qt Company, and Enlightenment Foundation Libraries (EFL) developed primarily by the Enlightenment team.\nA package management system, such as dpkg and RPM. Alternatively packages can be compiled from binary or source tarballs.\nUser interface programs such as command shells or windowing environments.\n\n\n=== User interface ===\nThe user interface, also known as the shell, is either a command-line interface (CLI), a graphical user interface (GUI), or controls attached to the associated hardware, which is common for embedded systems. For desktop systems, the default user interface is usually graphical, although the CLI is commonly available through terminal emulator windows or on a separate virtual console.\nCLI shells are text-based user interfaces, which use text for both input and output. The dominant shell used in Linux is the Bourne-Again Shell (bash), originally developed for the GNU Project. Most low-level Linux components, including various parts of the userland, use the CLI exclusively. The CLI is particularly suited for automation of repetitive or delayed tasks and provides very simple inter-process communication.\nOn desktop systems, the most popular user interfaces are the GUI shells, packaged together with extensive desktop environments, such as KDE Plasma, GNOME, MATE, Cinnamon, LXDE, Pantheon and Xfce, though a variety of additional user interfaces exist. Most popular user interfaces are based on the X Window System, often simply called \"X\". It provides network transparency and permits a graphical application running on one system to be displayed on another where a user may interact with the application; however, certain extensions of the X Window System are not capable of working over the network. Several X display servers exist, with the reference implementation, X.Org Server, being the most popular.\nServer distributions might provide a command-line interface for developers and administrators, but provide a custom interface towards end-users, designed for the use-case of the system. This custom interface is accessed through a client that resides on another system, not necessarily Linux based.\nSeveral types of window managers exist for X11, including tiling, dynamic, stacking and compositing. Window managers provide means to control the placement and appearance of individual application windows, and interact with the X Window System. Simpler X window managers such as dwm, ratpoison, or i3wm provide a minimalist functionality, while more elaborate window managers such as FVWM, Enlightenment or Window Maker provide more features such as a built-in taskbar and themes, but are still lightweight when compared to desktop environments. Desktop environments include window managers as part of their standard installations, such as Mutter (GNOME), KWin (KDE) or Xfwm (xfce), although users may choose to use a different window manager if preferred.\nWayland is a display server protocol intended as a replacement for the X11 protocol; as of 2022, it has received relatively wide adoption. Unlike X11, Wayland does not need an external window manager and compositing manager. Therefore, a Wayland compositor takes the role of the display server, window manager and compositing manager. Weston is the reference implementation of Wayland, while GNOME's Mutter and KDE's KWin are being ported to Wayland as standalone display servers. Enlightenment has already been successfully ported since version 19.\n\n\n=== Video input infrastructure ===\n\nLinux currently has two modern kernel-userspace APIs for handling video input devices: V4L2 API for video streams and radio, and DVB API for digital TV reception.Due to the complexity and diversity of different devices, and due to the large number of formats and standards handled by those APIs, this infrastructure needs to evolve to better fit other devices. Also, a good userspace device library is the key of the success for having userspace applications to be able to work with all formats supported by those devices.\n\n\n== Development ==\n\nThe primary difference between Linux and many other popular contemporary operating systems is that the Linux kernel and other components are free and open-source software. Linux is not the only such operating system, although it is by far the most widely used. Some free and open-source software licenses are based on the principle of copyleft, a kind of reciprocity: any work derived from a copyleft piece of software must also be copyleft itself. The most common free software license, the GNU General Public License (GPL), is a form of copyleft, and is used for the Linux kernel and many of the components from the GNU Project.Linux-based distributions are intended by developers for interoperability with other operating systems and established computing standards. Linux systems adhere to POSIX, SUS, LSB, ISO, and ANSI standards where possible, although to date only one Linux distribution has been POSIX.1 certified, Linux-FT.Free software projects, although developed through collaboration, are often produced independently of each other. The fact that the software licenses explicitly permit redistribution, however, provides a basis for larger-scale projects that collect the software produced by stand-alone projects and make it available all at once in the form of a Linux distribution.\nMany Linux distributions manage a remote collection of system software and application software packages available for download and installation through a network connection. This allows users to adapt the operating system to their specific needs. Distributions are maintained by individuals, loose-knit teams, volunteer organizations, and commercial entities. A distribution is responsible for the default configuration of the installed Linux kernel, general system security, and more generally integration of the different software packages into a coherent whole. Distributions typically use a package manager such as apt, yum, zypper, pacman or portage to install, remove, and update all of a system's software from one central location.\n\n\n=== Community ===\n\nA distribution is largely driven by its developer and user communities. Some vendors develop and fund their distributions on a volunteer basis, Debian being a well-known example. Others maintain a community version of their commercial distributions, as Red Hat does with Fedora, and SUSE does with openSUSE.In many cities and regions, local associations known as Linux User Groups (LUGs) seek to promote their preferred distribution and by extension free software. They hold meetings and provide free demonstrations, training, technical support, and operating system installation to new users. Many Internet communities also provide support to Linux users and developers. Most distributions and free software / open-source projects have IRC chatrooms or newsgroups. Online forums are another means for support, with notable examples being LinuxQuestions.org and the various distribution specific support and community forums, such as ones for Ubuntu, Fedora, and Gentoo. Linux distributions host mailing lists; commonly there will be a specific topic such as usage or development for a given list.\nThere are several technology websites with a Linux focus. Print magazines on Linux often bundle cover disks that carry software or even complete Linux distributions.Although Linux distributions are generally available without charge, several large corporations sell, support, and contribute to the development of the components of the system and of free software. An analysis of the Linux kernel in 2017 showed that well over 85% of the code developed by programmers who are being paid for their work, leaving about 8.2% to unpaid developers and 4.1% unclassified. Some of the major corporations that provide contributions include Intel, Samsung, Google, AMD, Oracle and Facebook. A number of corporations, notably Red Hat, Canonical and SUSE, have built a significant business around Linux distributions.\nThe free software licenses, on which the various software packages of a distribution built on the Linux kernel are based, explicitly accommodate and encourage commercialization; the relationship between a Linux distribution as a whole and individual vendors may be seen as symbiotic. One common business model of commercial suppliers is charging for support, especially for business users. A number of companies also offer a specialized business version of their distribution, which adds proprietary support packages and tools to administer higher numbers of installations or to simplify administrative tasks.\nAnother business model is to give away the software to sell hardware. This used to be the norm in the computer industry, with operating systems such as CP/M, Apple DOS and versions of the classic Mac OS prior to 7.6 freely copyable (but not modifiable). As computer hardware standardized throughout the 1980s, it became more difficult for hardware manufacturers to profit from this tactic, as the OS would run on any manufacturer's computer that shared the same architecture.\n\n\n=== Programming on Linux ===\nMost programming languages support Linux either directly or through third-party community based ports. The original development tools used for building both Linux applications and operating system programs are found within the GNU toolchain, which includes the GNU Compiler Collection (GCC) and the GNU Build System. Amongst others, GCC provides compilers for Ada, C, C++, Go and Fortran. Many programming languages have a cross-platform reference implementation that supports Linux, for example PHP, Perl, Ruby, Python, Java, Go, Rust and Haskell. First released in 2003, the LLVM project provides an alternative cross-platform open-source compiler for many languages. Proprietary compilers for Linux include the Intel C++ Compiler, Sun Studio, and IBM XL C/C++ Compiler. BASIC is available in procedural form from QB64, PureBasic, Yabasic, GLBasic, Basic4GL, XBasic, wxBasic, SdlBasic, and Basic-256, as well as object oriented through Gambas, FreeBASIC, B4X, Basic for Qt, Phoenix Object Basic, NS Basic, ProvideX, Chipmunk Basic, RapidQ and Xojo. Pascal is implemented through GNU Pascal, Free Pascal, and Virtual Pascal, as well as graphically via Lazarus, PascalABC.NET, or Delphi using FireMonkey (previously through Borland Kylix).\nA common feature of Unix-like systems, Linux includes traditional specific-purpose programming languages targeted at scripting, text processing and system configuration and management in general. Linux distributions support shell scripts, awk, sed and make. Many programs also have an embedded programming language to support configuring or programming themselves. For example, regular expressions are supported in programs like grep and locate, the traditional Unix message transfer agent Sendmail contains its own Turing complete scripting system, and the advanced text editor GNU Emacs is built around a general purpose Lisp interpreter.\nMost distributions also include support for PHP, Perl, Ruby, Python and other dynamic languages. While not as common, Linux also supports C# and other CLI languages (via Mono), Vala, and Scheme. Guile Scheme acts as an extension language targeting the GNU system utilities, seeking to make the conventionally small, static, compiled C programs of Unix design rapidly and dynamically extensible via an elegant, functional high-level scripting system; many GNU programs can be compiled with optional Guile bindings to this end. A number of Java virtual machines and development kits run on Linux, including the original Sun Microsystems JVM (HotSpot), and IBM's J2SE RE, as well as many open-source projects like Kaffe and Jikes RVM; Kotlin, Scala, Groovy and other JVM languages are also available.\nGNOME and KDE are popular desktop environments and provide a framework for developing applications. These projects are based on the GTK and Qt widget toolkits, respectively, which can also be used independently of the larger framework. Both support a wide variety of languages. There are a number of Integrated development environments available including Anjuta, Code::Blocks, CodeLite, Eclipse, Geany, ActiveState Komodo, KDevelop, Lazarus, MonoDevelop, NetBeans, and Qt Creator, while the long-established editors Vim, nano and Emacs remain popular.\n\n\n== Hardware support ==\n\nThe Linux kernel is a widely ported operating system kernel, available for devices ranging from mobile phones to supercomputers; it runs on a highly diverse range of computer architectures, including ARM-based Android smartphones and the IBM Z mainframes. Specialized distributions and kernel forks exist for less mainstream architectures; for example, the ELKS kernel fork can run on Intel 8086 or Intel 80286 16-bit microprocessors, while the \u00b5Clinux kernel fork may run on systems without a memory management unit. The kernel also runs on architectures that were only ever intended to use a proprietary manufacturer-created operating system, such as Macintosh computers (with PowerPC, Intel, and Apple silicon processors), PDAs, video game consoles, portable music players, and mobile phones.\nLinux has a reputation of supporting old hardware very well by maintaining standardized drivers for a long time. There are several industry associations and hardware conferences devoted to maintaining and improving support for diverse hardware under Linux, such as FreedomHEC. Over time, support for different hardware has improved in Linux, resulting in any off-the-shelf purchase having a \"good chance\" of being compatible.In 2014, a new initiative was launched to automatically collect a database of all tested hardware configurations.\n\n\n== Uses ==\n\n\n== Market share and uptake ==\n\nMany quantitative studies of free/open-source software focus on topics including market share and reliability, with numerous studies specifically examining Linux. The Linux market is growing, and the Linux operating system market size is expected to see a growth of 19.2% by 2027, reaching $15.64 billion, compared to $3.89 billion in 2019. Analysts project a Compound Annual Growth Rate (CAGR) of 13.7% between 2024 and 2032, culminating in a market size of USD 34.90 billion by the latter year. Analysts and proponents attribute the relative success of Linux to its security, reliability, low cost, and freedom from vendor lock-in.\nDesktops and laptops\nAccording to web server statistics (that is, based on the numbers recorded from visits to websites by client devices), as of May 2022, the estimated market share of Linux on desktop computers is around 2.5%. In comparison, Microsoft Windows has a market share of around 75.5%, while macOS covers around 14.9%.Web serversW3Cook publishes stats that use the top 1,000,000 Alexa domains, which as of May 2015 estimate that 96.55% of web servers run Linux, 1.73% run Windows, and 1.72% run FreeBSD.W3Techs publishes stats that use the top 10,000,000 Alexa domains and the top 1,000,000 Tranco domains, updated monthly and as of November 2020 estimate that Linux is used by 39% of the web servers, versus 21.9% being used by Microsoft Windows. 40.1% used other types of Unix.IDC's Q1 2007 report indicated that Linux held 12.7% of the overall server market at that time; this estimate was based on the number of Linux servers sold by various companies, and did not include server hardware purchased separately that had Linux installed on it later.Mobile devices\nAndroid, which is based on the Linux kernel, has become the dominant operating system for smartphones. In April 2023, 68.61% of mobile devices accessing websites using StatCounter were from Android. Android is also a popular operating system for tablets, being responsible for more than 60% of tablet sales as of 2013. According to web server statistics, as of October 2021 Android has a market share of about 71%, with iOS holding 28%, and the remaining 1% attributed to various niche platforms.Film production\nFor years, Linux has been the platform of choice in the film industry. The first major film produced on Linux servers was 1997's Titanic. Since then major studios including DreamWorks Animation, Pixar, Weta Digital, and Industrial Light & Magic have migrated to Linux. According to the Linux Movies Group, more than 95% of the servers and desktops at large animation and visual effects companies use Linux.Use in government\nLinux distributions have also gained popularity with various local and national governments. News of the Russian military creating its own Linux distribution has also surfaced, and has come to fruition as the G.H.ost Project. The Indian state of Kerala has gone to the extent of mandating that all state high schools run Linux on their computers. China uses Linux exclusively as the operating system for its Loongson processor family to achieve technology independence. In Spain, some regions have developed their own Linux distributions, which are widely used in education and official institutions, like gnuLinEx in Extremadura and Guadalinex in Andalusia. France and Germany have also taken steps toward the adoption of Linux. North Korea's Red Star OS, developed as of 2002, is based on a version of Fedora Linux.\n\n\n== Copyright, trademark, and naming ==\n\nThe Linux kernel is licensed under the GNU General Public License (GPL), version 2. The GPL requires that anyone who distributes software based on source code under this license must make the originating source code (and any modifications) available to the recipient under the same terms. Other key components of a typical Linux distribution are also mainly licensed under the GPL, but they may use other licenses; many libraries use the GNU Lesser General Public License (LGPL), a more permissive variant of the GPL, and the X.Org implementation of the X Window System uses the MIT License.\nTorvalds states that the Linux kernel will not move from version 2 of the GPL to version 3. He specifically dislikes some provisions in the new license which prohibit the use of the software in digital rights management. It would also be impractical to obtain permission from all the copyright holders, who number in the thousands.A 2001 study of Red Hat Linux 7.1 found that this distribution contained 30 million source lines of code. Using the Constructive Cost Model, the study estimated that this distribution required about eight thousand person-years of development time. According to the study, if all this software had been developed by conventional proprietary means, it would have cost about US$1.75 billion to develop in 2022 in the United States. Most of the source code (71%) was written in the C programming language, but many other languages were used, including C++, Lisp, assembly language, Perl, Python, Fortran, and various shell scripting languages. Slightly over half of all lines of code were licensed under the GPL. The Linux kernel itself was 2.4 million lines of code, or 8% of the total.In a later study, the same analysis was performed for Debian version 4.0 (etch, which was released in 2007). This distribution contained close to 283 million source lines of code, and the study estimated that it would have required about seventy three thousand man-years and cost US$9.8 billion (in 2022 dollars) to develop by conventional means. \n\nIn the United States, the name Linux is a trademark registered to Linus Torvalds. Initially, nobody registered it. However, on August 15, 1994, William R. Della Croce Jr. filed for the trademark Linux, and then demanded royalties from Linux distributors. In 1996, Torvalds and some affected organizations sued him to have the trademark assigned to Torvalds, and, in 1997, the case was settled. The licensing of the trademark has since been handled by the Linux Mark Institute (LMI). Torvalds has stated that he trademarked the name only to prevent someone else from using it. LMI originally charged a nominal sublicensing fee for use of the Linux name as part of trademarks, but later changed this in favor of offering a free, perpetual worldwide sublicense.The Free Software Foundation (FSF) prefers GNU/Linux as the name when referring to the operating system as a whole, because it considers Linux distributions to be variants of the GNU operating system initiated in 1983 by Richard Stallman, president of the FSF. They explicitly take no issue over the name Android for the Android OS, which is also an operating system based on the Linux kernel, as GNU is not a part of it.\nA minority of public figures and software projects other than Stallman and the FSF, notably Debian (which had been sponsored by the FSF up to 1996), also use GNU/Linux when referring to the operating system as a whole. Most media and common usage, however, refers to this family of operating systems simply as Linux, as do many large Linux distributions (for example, SUSE Linux and Red Hat Enterprise Linux). By contrast, Linux distributions containing only free software use \"GNU/Linux\" or simply \"GNU\", such as Trisquel GNU/Linux, Parabola GNU/Linux-libre, BLAG Linux and GNU, and gNewSense.\nAs of May 2011, about 8% to 13% of the lines of code of the Linux distribution Ubuntu (version \"Natty\") is made of GNU components (the range depending on whether GNOME is considered part of GNU); meanwhile, 6% is taken by the Linux kernel, increased to 9% when including its direct dependencies.\n\n\n\n\n\n                           Answer: \n\n"}, {"role": "assistant", "content": "\ufeffToday, Linux is prevalent, with over 850,000 Android phones and 700,000 TVs activated daily. Because of the dominance of Linux-based Android on smartphones, Linux, including Android, has the largest installed base of all general-purpose operating systems as of May 2022. Linux is the leading operating system on servers (over 96.4% of the top one million web servers' operating systems are Linux), leads other big iron systems such as mainframe computers, and is used on all of the world's 500 fastest supercomputers (as of November 2017, having gradually displaced all competitors). Linux powers 80% of financial trades and 90% of the world's supercomputers. Applications such as Google, Twitter, Facebook, and Amazon rely on Linux for their operations.\n\nLinux development is collaborative, involving thousands of developers from hundreds of companies. Since 2005, 8,000 developers have contributed 15 million lines of code to the Linux kernel. The development of Linux is rapid, with major kernel releases every 2-3 months. This is made possible by a unique collaborative development process. When submitting code to the Linux kernel, developers break changes into individual units called patches. A patch describes the lines that need to be changed, added or removed from the source code. \n\nDevelopers post their patches to the relevant mailing lists, where other developers can reply with feedback. When the patch is close to being release-ready, it is accepted by a senior Linux kernel developer or maintainer, who manages one or more of the 100 different sections of the kernel. This unique collaborative development process ensures code quality and security.\n\nLinus Torvalds is the lead maintainer for the Linux kernel and guides its development, while Greg Kroah-Hartman is the lead maintainer for the stable branch. Zo\u00eb Kooyman is the executive director of the Free Software Foundation, which in turn supports the GNU components. Finally, individuals and corporations develop third-party non-GNU components. These third-party components comprise a vast body of work and may include both kernel modules and user applications and libraries.\n"}]}
{"messages": [{"role": "system", "content": "\n                      Please write a 500 word summary on the following Transcript based on the Reading Material.\n                      Pick relevant information from the Reading Material and add it to the summary of the Transcript.\n                      The Summary should be only of the Transcript with a few information from the Reading Material.\n                      If you are not sure of the summary, say 'I don't know'.\n    "}, {"role": "user", "content": "Transcript: Hi, I\u2019m Carrie Anne, this is Crash Course Computer Science, and today, we\u2019re talking about processors. Just a warning though - this is probably the most complicated episode in the series. So once you get this, you\u2019re golden. We\u2019ve already made a Arithmetic and Logic Unit, which takes in binary numbers and performs calculations, and we\u2019ve made two types of computer memory: Registers -- small, linear chunks of memory, useful for storing a single value -- and then we scaled up, and made some RAM, a larger bank of memory that can store a lot of numbers located at different addresses. Now it\u2019s time to put it all together and build ourselves the heart of any computer, but without any of the emotional baggage that comes with human hearts. For computers, this is the Central Processing Unit, most commonly called the CPU. INTRO A CPU\u2019s job is to execute programs. Programs, like Microsoft Office, Safari, or your beloved copy of Half Life: 2, are made up of a series of individual operations, called instructions, because they \u201cinstruct\u201d the computer what to do. If these are mathematical instructions, like add or subtract, the CPU will configure its ALU to do the mathematical operation. Or it might be a memory instruction, in which case the CPU will talk with memory to read and write values. There are a lot of parts in a CPU, so we\u2019re going to lay it out piece by piece, building up as we go. We\u2019ll focus on functional blocks, rather than showing every single wire. When we do connect two components with a line, this is an abstraction for all of the necessary wires. This high level view is called the microarchitecture. OK, first, we\u2019re going to need some memory. Lets drop in the RAM module we created last episode. To keep things simple, we\u2019ll assume it only has 16 memory locations, each containing 8 bits. Let\u2019s also give our processor four, 8-bit memory registers, labeled A, B, C and D which will be used to temporarily store and manipulate values. We already know that data can be stored in memory as binary values and programs can be stored in memory too. We can assign an ID to each instruction supported by our CPU. In our hypothetical example, we use the first four bits to store the \u201coperation code\u201d, or opcode for short. The final four bits specify where the data for that operation should come from - this could be registers or an address in memory. We also need two more registers to complete our CPU. First, we need a register to keep track of where we are in a program. For this, we use an instruction address register, which as the name suggests, stores the memory address of the current instruction. And then we need the other register to store the current instruction, which we\u2019ll call the instruction register. When we first boot up our computer, all of our registers start at 0. As an example, we\u2019ve initialized our RAM with a simple computer program that we\u2019ll to through today. The first phase of a CPU\u2019s operation is called the fetch phase. This is where we retrieve our first instruction. First, we wire our Instruction Address Register to our RAM module. The register\u2019s value is 0, so the RAM returns whatever value is stored in address 0. In this case, 0010 1110. Then this value is copied into our instruction register. Now that we\u2019ve fetched an instruction from memory, we need to figure out what that instruction is so we can execute it. That is run it. Not kill it. This is called the decode phase. In this case the opcode, which is the first four bits, is: 0010. This opcode corresponds to the \u201cLOAD A\u201d instruction, which loads a value from RAM into Register A. The RAM address is the last four bits of our instruction which are 1110, or 14 in decimal. Next, instructions are decoded and interpreted by a Control Unit. Like everything else we\u2019ve built, it too is made out of logic gates. For example, to recognize a LOAD A instruction, we need a circuit that checks if the opcode matches 0010 which we can do with a handful of logic gates. Now that we know what instruction we\u2019re dealing with, we can go ahead and perform that instruction which is the beginning of the execute phase! Using the output of our LOAD_A checking circuit, we can turn on the RAM\u2019s read enable line and send in address 14. The RAM retrieves the value at that address, which is 00000011, or 3 in decimal. Now, because this is a LOAD_A instruction, we want that value to only be saved into Register A and not any of the other registers. So if we connect the RAM\u2019s data wires to our four data registers, we can use our LOAD_A check circuit to enable the write enable only for Register A. And there you have it -- we\u2019ve successfully loaded the value at RAM address 14 into Register A. We\u2019ve completed the instruction, so we can turn all of our wires off, and we\u2019\u2019re ready to fetch the next instruction in memory. To do this, we increment the Instruction Address Register by 1 which completes the execute phase. LOAD_A is just one of several possible instructions that our CPU can execute. Different instructions are decoded by different logic circuits, which configure the CPU\u2019s components to perform that action. Looking at all those individual decode circuits is too much detail, so since we looked at one example, we\u2019re going to go head and package them all up as a single Control Unit to keep things simple. That\u2019s right a new level of abstraction. The Control Unit is comparable to the conductor of an orchestra, directing all of the different parts of the CPU. Having completed one full fetch/decode/execute cycle, we\u2019re ready to start all over again, beginning with the fetch phase. The Instruction Address Register now has the value 1 in it, so the RAM gives us the value stored at address 1, which is 0001 1111. On to the decode phase! 0001 is the \u201cLOAD B\u201d instruction, which moves a value from RAM into Register B. The memory location this time is 1111, which is 15 in decimal. Now to the execute phase! The Control Unit configures the RAM to read address 15 and configures Register B to receive the data. Bingo, we just saved the value 00001110, or the number 14 in decimal, into Register B. Last thing to do is increment our instruction address register by 1, and we\u2019re done with another cycle. Our next instruction is a bit different. Let\u2019s fetch it. 1000 01 00. That opcode 1000 is an ADD instruction. Instead of an 4-bit RAM address, this instruction uses two sets of 2 bits. Remember that 2 bits can encode 4 values, so 2 bits is enough to select any one of our 4 registers. The first set of 2 bits is 01, which in this case corresponds to Register B, and 00, which is Register A. So \u201c1000 01 00\u201d is the instruction for adding the value in Register B into the value in register A. So to execute this instruction, we need to integrate the ALU we made in Episode 5 into our CPU. The Control Unit is responsible for selecting the right registers to pass in as inputs, and configuring the ALU to perform the right operation. For this ADD instruction, the Control Unit enables Register B and feeds its value into the first input of the ALU. It also enables Register A and feeds it into the second ALU input. As we already discussed, the ALU itself can perform several different operations, so the Control Unit must configure it to perform an ADD operation by passing in the ADD opcode. Finally, the output should be saved into Register A. But it can\u2019t be written directly because the new value would ripple back into the ALU and then keep adding to itself. So the Control Unit uses an internal register to temporarily save the output, turn off the ALU, and then write the value into the proper destination register. In this case, our inputs were 3 and 14, and so the sum is 17, or 00010001 in binary, which is now sitting in Register A. As before, the last thing to do is increment our instruction address by 1, and another cycle is complete. Okay, so let\u2019s fetch one last instruction: 01001101. When we decode it we see that 0100 is a STORE_A instruction, with a RAM address of 13. As usual, we pass the address to the RAM module, but instead of read-enabling the memory, we write-enable it. At the same time, we read-enable Register A. This allows us to use the data line to pass in the value stored in register A. Congrats, we just ran our first computer program! It loaded two values from memory, added them together, and then saved that sum back into memory. Of course, by me talking you through the individual steps, I was manually transitioning the CPU through its fetch, decode and execute phases. But there isn\u2019t a mini Carrie Anne inside of every computer. So the responsibility of keeping the CPU ticking along falls to a component called the clock. As it\u2019s name suggests, the clock triggers an electrical signal at a precise and regular interval. Its signal is used by the Control Unit to advance the internal operation of the CPU, keeping everything in lock-step - like the dude on a Roman galley drumming rhythmically at the front, keeping all the rowers synchronized... or a metronome. Of course you can\u2019t go too fast, because even electricity takes some time to travel down wires and for the signal to settle. The speed at which a CPU can carry out each step of the fetch-decode-execute cycle is called its Clock Speed. This speed is measured in Hertz - a unit of frequency. One Hertz means one cycle per second. Given that it took me about 6 minutes to talk you through 4 instructions -- LOAD, LOAD, ADD and STORE -- that means I have an effective clock speed of roughly .03 Hertz. Admittedly, I\u2019m not a great computer but even someone handy with math might only be able to do one calculation in their head every second or 1 Hertz. The very first, single-chip CPU was the Intel 4004, a 4-bit CPU released in 1971. It\u2019s microarchitecture is actually pretty similar to our example CPU. Despite being the first processor of its kind, it had a mind-blowing clock speed of 740 Kilohertz -- that\u2019s 740 thousand cycles per second. You might think that\u2019s fast, but it\u2019s nothing compared to the processors that we use today. One megahertz is one million clock cycles per second, and the computer or even phone that you are watching this video on right now is no doubt a few gigahertz -- that's BILLIONs of CPU cycles every\u2026 single... second. Also, you may have heard of people overclocking their computers. This is when you modify the clock to speed up the tempo of the CPU -- like when the drummer speeds up when the Roman Galley needs to ram another ship. Chip makers often design CPUs with enough tolerance to handle a little bit of overclocking, but too much can either overheat the CPU, or produce gobbledygook as the signals fall behind the clock. And although you don\u2019t hear very much about underclocking, it\u2019s actually super useful. Sometimes it\u2019s not necessary to run the processor at full speed... maybe the user has stepped away, or just not running a particularly demanding program. By slowing the CPU down, you can save a lot of power, which is important for computers that run on batteries, like laptops and smartphones. To meet these needs, many modern processors can increase or decrease their clock speed based on demand, which is called dynamic frequency scaling. So, with the addition of a clock, our CPU is complete. We can now put a box around it, and make it its own component. Yup. A new level of abstraction! RAM, as I showed you last episode, lies outside the CPU as its own component, and they communicate with each other using address, data and enable wires. Although the CPU we designed today is a simplified example, many of the basic mechanics we discussed are still found in modern processors. Next episode, we\u2019re going to beef up our CPU, extending it with more instructions as we take our first baby steps into software. I\u2019ll see you next week.\n\n\n                           Reading Material: A central processing unit (CPU)\u2014also called a central processor or main processor\u2014is the most important processor in a given computer. Its electronic circuitry executes instructions of a computer program, such as arithmetic, logic, controlling, and input/output (I/O) operations. This role contrasts with that of external components, such as main memory and I/O circuitry, and specialized coprocessors such as graphics processing units (GPUs).\nThe form, design, and implementation of CPUs have changed over time, but their fundamental operation remains almost unchanged. Principal components of a CPU include the arithmetic\u2013logic unit (ALU) that performs arithmetic and logic operations, processor registers that supply operands to the ALU and store the results of ALU operations, and a control unit that orchestrates the fetching (from memory), decoding and execution (of instructions) by directing the coordinated operations of the ALU, registers, and other components. Modern CPUs devote a lot of semiconductor area to caches and instruction-level parallelism to increase performance and to CPU modes to support operating systems and virtualization.\nMost modern CPUs are implemented on integrated circuit (IC) microprocessors, with one or more CPUs on a single IC chip. Microprocessor chips with multiple CPUs are multi-core processors. The individual physical CPUs, processor cores, can also be multithreaded to support CPU-level multithreading.An IC that contains a CPU may also contain memory, peripheral interfaces, and other components of a computer; such integrated devices are variously called microcontrollers or systems on a chip (SoC).\n\n\n== History ==\n\nEarly computers such as the ENIAC had to be physically rewired to perform different tasks, which caused these machines to be called \"fixed-program computers\". The \"central processing unit\" term has been in use since as early as 1955. Since the term \"CPU\" is generally defined as a device for software (computer program) execution, the earliest devices that could rightly be called CPUs came with the advent of the stored-program computer.\nThe idea of a stored-program computer had been already present in the design of J. Presper Eckert and John William Mauchly's ENIAC, but was initially omitted so that ENIAC could be finished sooner. On June 30, 1945, before ENIAC was made, mathematician John von Neumann distributed a paper entitled First Draft of a Report on the EDVAC. It was the outline of a stored-program computer that would eventually be completed in August 1949. EDVAC was designed to perform a certain number of instructions (or operations) of various types. Significantly, the programs written for EDVAC were to be stored in high-speed computer memory rather than specified by the physical wiring of the computer. This overcame a severe limitation of ENIAC, which was the considerable time and effort required to reconfigure the computer to perform a new task. With von Neumann's design, the program that EDVAC ran could be changed simply by changing the contents of the memory. EDVAC was not the first stored-program computer; the Manchester Baby, which was a small-scale experimental stored-program computer, ran its first program on 21 June 1948 and the Manchester Mark 1 ran its first program during the night of 16\u201317 June 1949.Early CPUs were custom designs used as part of a larger and sometimes distinctive computer. However, this method of designing custom CPUs for a particular application has largely given way to the development of multi-purpose processors produced in large quantities. This standardization began in the era of discrete transistor mainframes and minicomputers, and has rapidly accelerated with the popularization of the integrated circuit (IC). The IC has allowed increasingly complex CPUs to be designed and manufactured to tolerances on the order of nanometers. Both the miniaturization and standardization of CPUs have increased the presence of digital devices in modern life far beyond the limited application of dedicated computing machines. Modern microprocessors appear in electronic devices ranging from automobiles to cellphones, and sometimes even in toys.While von Neumann is most often credited with the design of the stored-program computer because of his design of EDVAC, and the design became known as the von Neumann architecture, others before him, such as Konrad Zuse, had suggested and implemented similar ideas. The so-called Harvard architecture of the Harvard Mark I, which was completed before EDVAC, also used a stored-program design using punched paper tape rather than electronic memory. The key difference between the von Neumann and Harvard architectures is that the latter separates the storage and treatment of CPU instructions and data, while the former uses the same memory space for both. Most modern CPUs are primarily von Neumann in design, but CPUs with the Harvard architecture are seen as well, especially in embedded applications; for instance, the Atmel AVR microcontrollers are Harvard-architecture processors.Relays and vacuum tubes (thermionic tubes) were commonly used as switching elements; a useful computer requires thousands or tens of thousands of switching devices. The overall speed of a system is dependent on the speed of the switches. Vacuum-tube computers such as EDVAC tended to average eight hours between failures, whereas relay computers\u2014such as the slower but earlier Harvard Mark I\u2014failed very rarely. In the end, tube-based CPUs became dominant because the significant speed advantages afforded generally outweighed the reliability problems. Most of these early synchronous CPUs ran at low clock rates compared to modern microelectronic designs. Clock signal frequencies ranging from 100 kHz to 4 MHz were very common at this time, limited largely by the speed of the switching devices they were built with.\n\n\n=== Transistor CPUs ===\n\nThe design complexity of CPUs increased as various technologies facilitated the building of smaller and more reliable electronic devices. The first such improvement came with the advent of the transistor. Transistorized CPUs during the 1950s and 1960s no longer had to be built out of bulky, unreliable, and fragile switching elements, like vacuum tubes and relays. With this improvement, more complex and reliable CPUs were built onto one or several printed circuit boards containing discrete (individual) components.\nIn 1964, IBM introduced its IBM System/360 computer architecture that was used in a series of computers capable of running the same programs with different speeds and performances. This was significant at a time when most electronic computers were incompatible with one another, even those made by the same manufacturer. To facilitate this improvement, IBM used the concept of a microprogram (often called \"microcode\"), which still sees widespread use in modern CPUs. The System/360 architecture was so popular that it dominated the mainframe computer market for decades and left a legacy that is continued by similar modern computers like the IBM zSeries. In 1965, Digital Equipment Corporation (DEC) introduced another influential computer aimed at the scientific and research markets\u2014the PDP-8.\nTransistor-based computers had several distinct advantages over their predecessors. Aside from facilitating increased reliability and lower power consumption, transistors also allowed CPUs to operate at much higher speeds because of the short switching time of a transistor in comparison to a tube or relay. The increased reliability and dramatically increased speed of the switching elements, which were almost exclusively transistors by this time; CPU clock rates in the tens of megahertz were easily obtained during this period. Additionally, while discrete transistor and IC CPUs were in heavy usage, new high-performance designs like single instruction, multiple data (SIMD) vector processors began to appear. These early experimental designs later gave rise to the era of specialized supercomputers like those made by Cray Inc and Fujitsu Ltd.\n\n\n=== Small-scale integration CPUs ===\nDuring this period, a method of manufacturing many interconnected transistors in a compact space was developed. The integrated circuit (IC) allowed a large number of transistors to be manufactured on a single semiconductor-based die, or \"chip\". At first, only very basic non-specialized digital circuits such as NOR gates were miniaturized into ICs. CPUs based on these \"building block\" ICs are generally referred to as \"small-scale integration\" (SSI) devices. SSI ICs, such as the ones used in the Apollo Guidance Computer, usually contained up to a few dozen transistors. To build an entire CPU out of SSI ICs required thousands of individual chips, but still consumed much less space and power than earlier discrete transistor designs.IBM's System/370, follow-on to the System/360, used SSI ICs rather than Solid Logic Technology discrete-transistor modules. DEC's PDP-8/I and KI10 PDP-10 also switched from the individual transistors used by the PDP-8 and PDP-10 to SSI ICs, and their extremely popular PDP-11 line was originally built with SSI ICs, but was eventually implemented with LSI components once these became practical.\n\n\n=== Large-scale integration CPUs ===\nLee Boysel published influential articles, including a 1967 \"manifesto\", which described how to build the equivalent of a 32-bit mainframe computer from a relatively small number of large-scale integration circuits (LSI). The only way to build LSI chips, which are chips with a hundred or more gates, was to build them using a metal\u2013oxide\u2013semiconductor (MOS) semiconductor manufacturing process (either PMOS logic, NMOS logic, or CMOS logic). However, some companies continued to build processors out of bipolar transistor\u2013transistor logic (TTL) chips because bipolar junction transistors were faster than MOS chips up until the 1970s (a few companies such as Datapoint continued to build processors out of TTL chips until the early 1980s). In the 1960s, MOS ICs were slower and initially considered useful only in applications that required low power. Following the development of silicon-gate MOS technology by Federico Faggin at Fairchild Semiconductor in 1968, MOS ICs largely replaced bipolar TTL as the standard chip technology in the early 1970s.As the microelectronic technology advanced, an increasing number of transistors were placed on ICs, decreasing the number of individual ICs needed for a complete CPU. MSI and LSI ICs increased transistor counts to hundreds, and then thousands. By 1968, the number of ICs required to build a complete CPU had been reduced to 24 ICs of eight different types, with each IC containing roughly 1000 MOSFETs. In stark contrast with its SSI and MSI predecessors, the first LSI implementation of the PDP-11 contained a CPU composed of only four LSI integrated circuits.\n\n\n=== Microprocessors ===\n\nSince microprocessors were first introduced they have almost completely overtaken all other central processing unit implementation methods. The first commercially available microprocessor, made in 1971, was the Intel 4004, and the first widely used microprocessor, made in 1974, was the Intel 8080. Mainframe and minicomputer manufacturers of the time launched proprietary IC development programs to upgrade their older computer architectures, and eventually produced instruction set compatible microprocessors that were backward-compatible with their older hardware and software. Combined with the advent and eventual success of the ubiquitous personal computer, the term CPU is now applied almost exclusively to microprocessors. Several CPUs (denoted cores) can be combined in a single processing chip.\nPrevious generations of CPUs were implemented as discrete components and numerous small integrated circuits (ICs) on one or more circuit boards. Microprocessors, on the other hand, are CPUs manufactured on a very small number of ICs; usually just one. The overall smaller CPU size, as a result of being implemented on a single die, means faster switching time because of physical factors like decreased gate parasitic capacitance. This has allowed synchronous microprocessors to have clock rates ranging from tens of megahertz to several gigahertz. Additionally, the ability to construct exceedingly small transistors on an IC has increased the complexity and number of transistors in a single CPU many fold. This widely observed trend is described by Moore's law, which had proven to be a fairly accurate predictor of the growth of CPU (and other IC) complexity until 2016.While the complexity, size, construction and general form of CPUs have changed enormously since 1950, the basic design and function has not changed much at all. Almost all common CPUs today can be very accurately described as von Neumann stored-program machines. As Moore's law no longer holds, concerns have arisen about the limits of integrated circuit transistor technology. Extreme miniaturization of electronic gates is causing the effects of phenomena like electromigration and subthreshold leakage to become much more significant. These newer concerns are among the many factors causing researchers to investigate new methods of computing such as the quantum computer, as well as to expand the use of parallelism and other methods that extend the usefulness of the classical von Neumann model.\n\n\n== Operation ==\nThe fundamental operation of most CPUs, regardless of the physical form they take, is to execute a sequence of stored instructions that is called a program. The instructions to be executed are kept in some kind of computer memory. Nearly all CPUs follow the fetch, decode and execute steps in their operation, which are collectively known as the instruction cycle.\nAfter the execution of an instruction, the entire process repeats, with the next instruction cycle normally fetching the next-in-sequence instruction because of the incremented value in the program counter. If a jump instruction was executed, the program counter will be modified to contain the address of the instruction that was jumped to and program execution continues normally. In more complex CPUs, multiple instructions can be fetched, decoded and executed simultaneously. This section describes what is generally referred to as the \"classic RISC pipeline\", which is quite common among the simple CPUs used in many electronic devices (often called microcontrollers). It largely ignores the important role of CPU cache, and therefore the access stage of the pipeline.\nSome instructions manipulate the program counter rather than producing result data directly; such instructions are generally called \"jumps\" and facilitate program behavior like loops, conditional program execution (through the use of a conditional jump), and existence of functions. In some processors, some other instructions change the state of bits in a \"flags\" register. These flags can be used to influence how a program behaves, since they often indicate the outcome of various operations. For example, in such processors a \"compare\" instruction evaluates two values and sets or clears bits in the flags register to indicate which one is greater or whether they are equal; one of these flags could then be used by a later jump instruction to determine program flow.\n\n\n=== Fetch ===\nFetch involves retrieving an instruction (which is represented by a number or sequence of numbers) from program memory. The instruction's location (address) in program memory is determined by the program counter (PC; called the \"instruction pointer\" in Intel x86 microprocessors), which stores a number that identifies the address of the next instruction to be fetched. After an instruction is fetched, the PC is incremented by the length of the instruction so that it will contain the address of the next instruction in the sequence. Often, the instruction to be fetched must be retrieved from relatively slow memory, causing the CPU to stall while waiting for the instruction to be returned. This issue is largely addressed in modern processors by caches and pipeline architectures (see below).\n\n\n=== Decode ===\n\nThe instruction that the CPU fetches from memory determines what the CPU will do. In the decode step, performed by binary decoder circuitry known as the instruction decoder, the instruction is converted into signals that control other parts of the CPU.\nThe way in which the instruction is interpreted is defined by the CPU's instruction set architecture (ISA). Often, one group of bits (that is, a \"field\") within the instruction, called the opcode, indicates which operation is to be performed, while the remaining fields usually provide supplemental information required for the operation, such as the operands. Those operands may be specified as a constant value (called an immediate value), or as the location of a value that may be a processor register or a memory address, as determined by some addressing mode.\nIn some CPU designs the instruction decoder is implemented as a hardwired, unchangeable binary decoder circuit. In others, a microprogram is used to translate instructions into sets of CPU configuration signals that are applied sequentially over multiple clock pulses. In some cases the memory that stores the microprogram is rewritable, making it possible to change the way in which the CPU decodes instructions.\n\n\n=== Execute ===\nAfter the fetch and decode steps, the execute step is performed. Depending on the CPU architecture, this may consist of a single action or a sequence of actions. During each action, control signals electrically enable or disable various parts of the CPU so they can perform all or part of the desired operation. The action is then completed, typically in response to a clock pulse. Very often the results are written to an internal CPU register for quick access by subsequent instructions. In other cases results may be written to slower, but less expensive and higher capacity main memory.\nFor example, if an instruction that performs addition is to be executed, registers containing operands (numbers to be summed) are activated, as are the parts of the arithmetic logic unit (ALU) that perform addition. When the clock pulse occurs, the operands flow from the source registers into the ALU, and the sum appears at its output. On subsequent clock pulses, other components are enabled (and disabled) to move the output (the sum of the operation) to storage (e.g., a register or memory). If the resulting sum is too large (i.e., it is larger than the ALU's output word size), an arithmetic overflow flag will be set, influencing the next operation.\n\n\n== Structure and implementation ==\n\nHardwired into a CPU's circuitry is a set of basic operations it can perform, called an instruction set. Such operations may involve, for example, adding or subtracting two numbers, comparing two numbers, or jumping to a different part of a program. Each instruction is represented by a unique combination of bits, known as the machine language opcode. While processing an instruction, the CPU decodes the opcode (via a binary decoder) into control signals, which orchestrate the behavior of the CPU. A complete machine language instruction consists of an opcode and, in many cases, additional bits that specify arguments for the operation (for example, the numbers to be summed in the case of an addition operation). Going up the complexity scale, a machine language program is a collection of machine language instructions that the CPU executes.\nThe actual mathematical operation for each instruction is performed by a combinational logic circuit within the CPU's processor known as the arithmetic\u2013logic unit or ALU. In general, a CPU executes an instruction by fetching it from memory, using its ALU to perform an operation, and then storing the result to memory. Besides the instructions for integer mathematics and logic operations, various other machine instructions exist, such as those for loading data from memory and storing it back, branching operations, and mathematical operations on floating-point numbers performed by the CPU's floating-point unit (FPU).\n\n\n=== Control unit ===\n\nThe control unit (CU) is a component of the CPU that directs the operation of the processor. It tells the computer's memory, arithmetic and logic unit and input and output devices how to respond to the instructions that have been sent to the processor.\nIt directs the operation of the other units by providing timing and control signals. Most computer resources are managed by the CU. It directs the flow of data between the CPU and the other devices. John von Neumann included the control unit as part of the von Neumann architecture. In modern computer designs, the control unit is typically an internal part of the CPU with its overall role and operation unchanged since its introduction.\n\n\n=== Arithmetic logic unit ===\n\nThe arithmetic logic unit (ALU) is a digital circuit within the processor that performs integer arithmetic and bitwise logic operations. The inputs to the ALU are the data words to be operated on (called operands), status information from previous operations, and a code from the control unit indicating which operation to perform. Depending on the instruction being executed, the operands may come from internal CPU registers, external memory, or constants generated by the ALU itself.\nWhen all input signals have settled and propagated through the ALU circuitry, the result of the performed operation appears at the ALU's outputs. The result consists of both a data word, which may be stored in a register or memory, and status information that is typically stored in a special, internal CPU register reserved for this purpose.\nModern CPUs typically contain more than one ALU to improve performance.\n\n\n=== Address generation unit ===\n\nThe address generation unit (AGU), sometimes also called the address computation unit (ACU), is an execution unit inside the CPU that calculates addresses used by the CPU to access main memory. By having address calculations handled by separate circuitry that operates in parallel with the rest of the CPU, the number of CPU cycles required for executing various machine instructions can be reduced, bringing performance improvements.\nWhile performing various operations, CPUs need to calculate memory addresses required for fetching data from the memory; for example, in-memory positions of array elements must be calculated before the CPU can fetch the data from actual memory locations. Those address-generation calculations involve different integer arithmetic operations, such as addition, subtraction, modulo operations, or bit shifts. Often, calculating a memory address involves more than one general-purpose machine instruction, which do not necessarily decode and execute quickly. By incorporating an AGU into a CPU design, together with introducing specialized instructions that use the AGU, various address-generation calculations can be offloaded from the rest of the CPU, and can often be executed quickly in a single CPU cycle.\nCapabilities of an AGU depend on a particular CPU and its architecture. Thus, some AGUs implement and expose more address-calculation operations, while some also include more advanced specialized instructions that can operate on multiple operands at a time. Some CPU architectures include multiple AGUs so more than one address-calculation operation can be executed simultaneously, which brings further performance improvements due to the superscalar nature of advanced CPU designs. For example, Intel incorporates multiple AGUs into its Sandy Bridge and Haswell microarchitectures, which increase bandwidth of the CPU memory subsystem by allowing multiple memory-access instructions to be executed in parallel.\n\n\n=== Memory management unit (MMU) ===\n\nMany microprocessors (in smartphones and desktop, laptop, server computers) have a memory management unit, translating logical addresses into physical RAM addresses, providing memory protection and paging abilities, useful for virtual memory. Simpler processors, especially microcontrollers, usually don't include an MMU.\n\n\n=== Cache ===\nA CPU cache is a hardware cache used by the central processing unit (CPU) of a computer to reduce the average cost (time or energy) to access data from the main memory. A cache is a smaller, faster memory, closer to a processor core, which stores copies of the data from frequently used main memory locations. Most CPUs have different independent caches, including instruction and data caches, where the data cache is usually organized as a hierarchy of more cache levels (L1, L2, L3, L4, etc.).\nAll modern (fast) CPUs (with few specialized exceptions) have multiple levels of CPU caches. The first CPUs that used a cache had only one level of cache; unlike later level 1 caches, it was not split into L1d (for data) and L1i (for instructions). Almost all current CPUs with caches have a split L1 cache. They also have L2 caches and, for larger processors, L3 caches as well. The L2 cache is usually not split and acts as a common repository for the already split L1 cache. Every core of a multi-core processor has a dedicated L2 cache and is usually not shared between the cores. The L3 cache, and higher-level caches, are shared between the cores and are not split. An L4 cache is currently uncommon, and is generally on dynamic random-access memory (DRAM), rather than on static random-access memory (SRAM), on a separate die or chip. That was also the case historically with L1, while bigger chips have allowed integration of it and generally all cache levels, with the possible exception of the last level. Each extra level of cache tends to be bigger and is optimized differently.\nOther types of caches exist (that are not counted towards the \"cache size\" of the most important caches mentioned above), such as the translation lookaside buffer (TLB) that is part of the memory management unit (MMU) that most CPUs have.\nCaches are generally sized in powers of two: 2, 8, 16 etc. KiB or MiB (for larger non-L1) sizes, although the IBM z13 has a 96 KiB L1 instruction cache.\n\n\n=== Clock rate ===\n\nMost CPUs are synchronous circuits, which means they employ a clock signal to pace their sequential operations. The clock signal is produced by an external oscillator circuit that generates a consistent number of pulses each second in the form of a periodic square wave. The frequency of the clock pulses determines the rate at which a CPU executes instructions and, consequently, the faster the clock, the more instructions the CPU will execute each second.\nTo ensure proper operation of the CPU, the clock period is longer than the maximum time needed for all signals to propagate (move) through the CPU. In setting the clock period to a value well above the worst-case propagation delay, it is possible to design the entire CPU and the way it moves data around the \"edges\" of the rising and falling clock signal. This has the advantage of simplifying the CPU significantly, both from a design perspective and a component-count perspective. However, it also carries the disadvantage that the entire CPU must wait on its slowest elements, even though some portions of it are much faster. This limitation has largely been compensated for by various methods of increasing CPU parallelism (see below).\nHowever, architectural improvements alone do not solve all of the drawbacks of globally synchronous CPUs. For example, a clock signal is subject to the delays of any other electrical signal. Higher clock rates in increasingly complex CPUs make it more difficult to keep the clock signal in phase (synchronized) throughout the entire unit. This has led many modern CPUs to require multiple identical clock signals to be provided to avoid delaying a single signal significantly enough to cause the CPU to malfunction. Another major issue, as clock rates increase dramatically, is the amount of heat that is dissipated by the CPU. The constantly changing clock causes many components to switch regardless of whether they are being used at that time. In general, a component that is switching uses more energy than an element in a static state. Therefore, as clock rate increases, so does energy consumption, causing the CPU to require more heat dissipation in the form of CPU cooling solutions.\nOne method of dealing with the switching of unneeded components is called clock gating, which involves turning off the clock signal to unneeded components (effectively disabling them). However, this is often regarded as difficult to implement and therefore does not see common usage outside of very low-power designs. One notable recent CPU design that uses extensive clock gating is the IBM PowerPC-based Xenon used in the Xbox 360; this reduces the power requirements of the Xbox 360.\n\n\n=== Clockless CPUs ===\nAnother method of addressing some of the problems with a global clock signal is the removal of the clock signal altogether. While removing the global clock signal makes the design process considerably more complex in many ways, asynchronous (or clockless) designs carry marked advantages in power consumption and heat dissipation in comparison with similar synchronous designs. While somewhat uncommon, entire asynchronous CPUs have been built without using a global clock signal. Two notable examples of this are the ARM compliant AMULET and the MIPS R3000 compatible MiniMIPS.Rather than totally removing the clock signal, some CPU designs allow certain portions of the device to be asynchronous, such as using asynchronous ALUs in conjunction with superscalar pipelining to achieve some arithmetic performance gains. While it is not altogether clear whether totally asynchronous designs can perform at a comparable or better level than their synchronous counterparts, it is evident that they do at least excel in simpler math operations. This, combined with their excellent power consumption and heat dissipation properties, makes them very suitable for embedded computers.\n\n\n=== Voltage regulator module ===\n\nMany modern CPUs have a die-integrated power managing module which regulates on-demand voltage supply to the CPU circuitry allowing it to keep balance between performance and power consumption.\n\n\n=== Integer range ===\nEvery CPU represents numerical values in a specific way. For example, some early digital computers represented numbers as familiar decimal (base 10) numeral system values, and others have employed more unusual representations such as ternary (base three). Nearly all modern CPUs represent numbers in binary form, with each digit being represented by some two-valued physical quantity such as a \"high\" or \"low\" voltage.\nRelated to numeric representation is the size and precision of integer numbers that a CPU can represent. In the case of a binary CPU, this is measured by the number of bits (significant digits of a binary encoded integer) that the CPU can process in one operation, which is commonly called word size, bit width, data path width, integer precision, or integer size. A CPU's integer size determines the range of integer values on which it can it can directly operate. For example, an 8-bit CPU can directly manipulate integers represented by eight bits, which have a range of 256 (28) discrete integer values.\nInteger range can also affect the number of memory locations the CPU can directly address (an address is an integer value representing a specific memory location). For example, if a binary CPU uses 32 bits to represent a memory address then it can directly address 232 memory locations. To circumvent this limitation and for various other reasons, some CPUs use mechanisms (such as bank switching) that allow additional memory to be addressed.\nCPUs with larger word sizes require more circuitry and consequently are physically larger, cost more and consume more power (and therefore generate more heat). As a result, smaller 4- or 8-bit microcontrollers are commonly used in modern applications even though CPUs with much larger word sizes (such as 16, 32, 64, even 128-bit) are available. When higher performance is required, however, the benefits of a larger word size (larger data ranges and address spaces) may outweigh the disadvantages. A CPU can have internal data paths shorter than the word size to reduce size and cost. For example, even though the IBM System/360 instruction set architecture was a 32-bit instruction set, the System/360 Model 30 and Model 40 had 8-bit data paths in the arithmetic logical unit, so that a 32-bit add required four cycles, one for each 8 bits of the operands, and, even though the Motorola 68000 series instruction set was a 32-bit instruction set, the Motorola 68000 and Motorola 68010 had 16-bit data paths in the arithmetic logical unit, so that a 32-bit add required two cycles.\nTo gain some of the advantages afforded by both lower and higher bit lengths, many instruction sets have different bit widths for integer and floating-point data, allowing CPUs implementing that instruction set to have different bit widths for different portions of the device. For example, the IBM System/360 instruction set was primarily 32 bit, but supported 64-bit floating-point values to facilitate greater accuracy and range in floating-point numbers. The System/360 Model 65 had an 8-bit adder for decimal and fixed-point binary arithmetic and a 60-bit adder for floating-point arithmetic. Many later CPU designs use similar mixed bit width, especially when the processor is meant for general-purpose use where a reasonable balance of integer and floating-point capability is required.\n\n\n=== Parallelism ===\n\nThe description of the basic operation of a CPU offered in the previous section describes the simplest form that a CPU can take. This type of CPU, usually referred to as subscalar, operates on and executes one instruction on one or two pieces of data at a time, that is less than one instruction per clock cycle (IPC < 1).\nThis process gives rise to an inherent inefficiency in subscalar CPUs. Since only one instruction is executed at a time, the entire CPU must wait for that instruction to complete before proceeding to the next instruction. As a result, the subscalar CPU gets \"hung up\" on instructions which take more than one clock cycle to complete execution. Even adding a second execution unit (see below) does not improve performance much; rather than one pathway being hung up, now two pathways are hung up and the number of unused transistors is increased. This design, wherein the CPU's execution resources can operate on only one instruction at a time, can only possibly reach scalar performance (one instruction per clock cycle, IPC = 1). However, the performance is nearly always subscalar (less than one instruction per clock cycle, IPC < 1).\nAttempts to achieve scalar and better performance have resulted in a variety of design methodologies that cause the CPU to behave less linearly and more in parallel. When referring to parallelism in CPUs, two terms are generally used to classify these design techniques:\n\ninstruction-level parallelism (ILP), which seeks to increase the rate at which instructions are executed within a CPU (that is, to increase the use of on-die execution resources);\ntask-level parallelism (TLP), which purposes to increase the number of threads or processes that a CPU can execute simultaneously.Each methodology differs both in the ways in which they are implemented, as well as the relative effectiveness they afford in increasing the CPU's performance for an application.\n\n\n==== Instruction-level parallelism ====\n\nOne of the simplest methods for increased parallelism is to begin the first steps of instruction fetching and decoding before the prior instruction finishes executing. This is a technique known as instruction pipelining, and is used in almost all modern general-purpose CPUs. Pipelining allows multiple instruction to be executed at a time by breaking the execution pathway into discrete stages. This separation can be compared to an assembly line, in which an instruction is made more complete at each stage until it exits the execution pipeline and is retired.\nPipelining does, however, introduce the possibility for a situation where the result of the previous operation is needed to complete the next operation; a condition often termed data dependency conflict. Therefore, pipelined processors must check for these sorts of conditions and delay a portion of the pipeline if necessary. A pipelined processor can become very nearly scalar, inhibited only by pipeline stalls (an instruction spending more than one clock cycle in a stage).\n\nImprovements in instruction pipelining led to further decreases in the idle time of CPU components. Designs that are said to be superscalar include a long instruction pipeline and multiple identical execution units, such as load\u2013store units, arithmetic\u2013logic units, floating-point units and address generation units. In a superscalar pipeline, instructions are read and passed to a dispatcher, which decides whether or not the instructions can be executed in parallel (simultaneously). If so, they are dispatched to execution units, resulting in their simultaneous execution. In general, the number of instructions that a superscalar CPU will complete in a cycle is dependent on the number of instructions it is able to dispatch simultaneously to execution units.\nMost of the difficulty in the design of a superscalar CPU architecture lies in creating an effective dispatcher. The dispatcher needs to be able to quickly determine whether instructions can be executed in parallel, as well as dispatch them in such a way as to keep as many execution units busy as possible. This requires that the instruction pipeline is filled as often as possible and requires significant amounts of CPU cache. It also makes hazard-avoiding techniques like branch prediction, speculative execution, register renaming, out-of-order execution and transactional memory crucial to maintaining high levels of performance. By attempting to predict which branch (or path) a conditional instruction will take, the CPU can minimize the number of times that the entire pipeline must wait until a conditional instruction is completed. Speculative execution often provides modest performance increases by executing portions of code that may not be needed after a conditional operation completes. Out-of-order execution somewhat rearranges the order in which instructions are executed to reduce delays due to data dependencies. Also in case of single instruction stream, multiple data stream, a case when a lot of data from the same type has to be processed, modern processors can disable parts of the pipeline so that when a single instruction is executed many times, the CPU skips the fetch and decode phases and thus greatly increases performance on certain occasions, especially in highly monotonous program engines such as video creation software and photo processing.\nWhen a fraction of the CPU is superscalar, the part that is not suffers a performance penalty due to scheduling stalls. The Intel P5 Pentium had two superscalar ALUs which could accept one instruction per clock cycle each, but its FPU could not. Thus the P5 was integer superscalar but not floating point superscalar. Intel's successor to the P5 architecture, P6, added superscalar abilities to its floating-point features.\nSimple pipelining and superscalar design increase a CPU's ILP by allowing it to execute instructions at rates surpassing one instruction per clock cycle. Most modern CPU designs are at least somewhat superscalar, and nearly all general purpose CPUs designed in the last decade are superscalar. In later years some of the emphasis in designing high-ILP computers has been moved out of the CPU's hardware and into its software interface, or instruction set architecture (ISA). The strategy of the very long instruction word (VLIW) causes some ILP to become implied directly by the software, reducing the CPU's work in boosting ILP and thereby reducing design complexity.\n\n\n==== Task-level parallelism ====\n\nAnother strategy of achieving performance is to execute multiple threads or processes in parallel. This area of research is known as parallel computing. In Flynn's taxonomy, this strategy is known as multiple instruction stream, multiple data stream (MIMD).One technology used for this purpose is multiprocessing (MP). The initial type of this technology is known as symmetric multiprocessing (SMP), where a small number of CPUs share a coherent view of their memory system. In this scheme, each CPU has additional hardware to maintain a constantly up-to-date view of memory. By avoiding stale views of memory, the CPUs can cooperate on the same program and programs can migrate from one CPU to another. To increase the number of cooperating CPUs beyond a handful, schemes such as non-uniform memory access (NUMA) and directory-based coherence protocols were introduced in the 1990s. SMP systems are limited to a small number of CPUs while NUMA systems have been built with thousands of processors. Initially, multiprocessing was built using multiple discrete CPUs and boards to implement the interconnect between the processors. When the processors and their interconnect are all implemented on a single chip, the technology is known as chip-level multiprocessing (CMP) and the single chip as a multi-core processor.\nIt was later recognized that finer-grain parallelism existed with a single program. A single program might have several threads (or functions) that could be executed separately or in parallel. Some of the earliest examples of this technology implemented input/output processing such as direct memory access as a separate thread from the computation thread. A more general approach to this technology was introduced in the 1970s when systems were designed to run multiple computation threads in parallel. This technology is known as multi-threading (MT). The approach is considered more cost-effective than multiprocessing, as only a small number of components within a CPU are replicated to support MT as opposed to the entire CPU in the case of MP. In MT, the execution units and the memory system including the caches are shared among multiple threads. The downside of MT is that the hardware support for multithreading is more visible to software than that of MP and thus supervisor software like operating systems have to undergo larger changes to support MT. One type of MT that was implemented is known as temporal multithreading, where one thread is executed until it is stalled waiting for data to return from external memory. In this scheme, the CPU would then quickly context switch to another thread which is ready to run, the switch often done in one CPU clock cycle, such as the UltraSPARC T1. Another type of MT is simultaneous multithreading, where instructions from multiple threads are executed in parallel within one CPU clock cycle.\nFor several decades from the 1970s to early 2000s, the focus in designing high performance general purpose CPUs was largely on achieving high ILP through technologies such as pipelining, caches, superscalar execution, out-of-order execution, etc. This trend culminated in large, power-hungry CPUs such as the Intel Pentium 4. By the early 2000s, CPU designers were thwarted from achieving higher performance from ILP techniques due to the growing disparity between CPU operating frequencies and main memory operating frequencies as well as escalating CPU power dissipation owing to more esoteric ILP techniques.\nCPU designers then borrowed ideas from commercial computing markets such as transaction processing, where the aggregate performance of multiple programs, also known as throughput computing, was more important than the performance of a single thread or process.\nThis reversal of emphasis is evidenced by the proliferation of dual and more core processor designs and notably, Intel's newer designs resembling its less superscalar P6 architecture. Late designs in several processor families exhibit CMP, including the x86-64 Opteron and Athlon 64 X2, the SPARC UltraSPARC T1, IBM POWER4 and POWER5, as well as several video game console CPUs like the Xbox 360's triple-core PowerPC design, and the PlayStation 3's 7-core Cell microprocessor.\n\n\n==== Data parallelism ====\n\nA less common but increasingly important paradigm of processors (and indeed, computing in general) deals with data parallelism. The processors discussed earlier are all referred to as some type of scalar device. As the name implies, vector processors deal with multiple pieces of data in the context of one instruction. This contrasts with scalar processors, which deal with one piece of data for every instruction. Using Flynn's taxonomy, these two schemes of dealing with data are generally referred to as single instruction stream, multiple data stream (SIMD) and single instruction stream, single data stream (SISD), respectively. The great utility in creating processors that deal with vectors of data lies in optimizing tasks that tend to require the same operation (for example, a sum or a dot product) to be performed on a large set of data. Some classic examples of these types of tasks include multimedia applications (images, video and sound), as well as many types of scientific and engineering tasks. Whereas a scalar processor must complete the entire process of fetching, decoding and executing each instruction and value in a set of data, a vector processor can perform a single operation on a comparatively large set of data with one instruction. This is only possible when the application tends to require many steps which apply one operation to a large set of data.\nMost early vector processors, such as the Cray-1, were associated almost exclusively with scientific research and cryptography applications. However, as multimedia has largely shifted to digital media, the need for some form of SIMD in general-purpose processors has become significant. Shortly after inclusion of floating-point units started to become commonplace in general-purpose processors, specifications for and implementations of SIMD execution units also began to appear for general-purpose processors. Some of these early SIMD specifications \u2013 like HP's Multimedia Acceleration eXtensions (MAX) and Intel's MMX \u2013 were integer-only. This proved to be a significant impediment for some software developers, since many of the applications that benefit from SIMD primarily deal with floating-point numbers. Progressively, developers refined and remade these early designs into some of the common modern SIMD specifications, which are usually associated with one instruction set architecture (ISA). Some notable modern examples include Intel's Streaming SIMD Extensions (SSE) and the PowerPC-related AltiVec (also known as VMX).\n\n\n=== Hardware performance counter ===\n\nMany modern architectures (including embedded ones) often include hardware performance counters (HPC), which enables low-level (instruction-level) collection, benchmarking, debugging or analysis of running software metrics. HPC may also be used to discover and analyze unusual or suspicious activity of the software, such as return-oriented programming (ROP) or sigreturn-oriented programming (SROP) exploits etc. This is usually done by software-security teams to assess and find malicious binary programs.\nMany major vendors (such as IBM, Intel, AMD, and Arm etc.) provide software interfaces (usually written in C/C++) that can be used to collected data from CPUs registers in order to get metrics. Operating system vendors also provide software like perf (Linux) to record, benchmark, or trace CPU events running kernels and applications.\n\n\n== Privileged modes ==\nMost modern CPUs have privileged modes to support operating systems and virtualization.\nCloud computing can use virtualization to provide virtual central processing units (vCPUs) for separate users.A host is the virtual equivalent of a physical machine, on which a virtual system is operating. When there are several physical machines operating in tandem and managed as a whole, the grouped computing and memory resources form a cluster. In some systems, it is possible to dynamically add and remove from a cluster. Resources available at a host and cluster level can be partitioned into resources pools with fine granularity.\n\n\n== Performance ==\n\nThe performance or speed of a processor depends on, among many other factors, the clock rate (generally given in multiples of hertz) and the instructions per clock (IPC), which together are the factors for the instructions per second (IPS) that the CPU can perform.\nMany reported IPS values have represented \"peak\" execution rates on artificial instruction sequences with few branches, whereas realistic workloads consist of a mix of instructions and applications, some of which take longer to execute than others. The performance of the memory hierarchy also greatly affects processor performance, an issue barely considered in IPS calculations. Because of these problems, various standardized tests, often called \"benchmarks\" for this purpose\u200d\u2014\u200c such as SPECint\u200d\u2014\u200chave been developed to attempt to measure the real effective performance in commonly used applications.\nProcessing performance of computers is increased by using multi-core processors, which essentially is plugging two or more individual processors (called cores in this sense) into one integrated circuit. Ideally, a dual core processor would be nearly twice as powerful as a single core processor. In practice, the performance gain is far smaller, only about 50%, due to imperfect software algorithms and implementation. Increasing the number of cores in a processor (i.e. dual-core, quad-core, etc.) increases the workload that can be handled. This means that the processor can now handle numerous asynchronous events, interrupts, etc. which can take a toll on the CPU when overwhelmed. These cores can be thought of as different floors in a processing plant, with each floor handling a different task. Sometimes, these cores will handle the same tasks as cores adjacent to them if a single core is not enough to handle the information. Multi-core CPUs enhance a computer's ability to run several tasks simultaneously by providing additional processing power. However, the increase in speed is not directly proportional to the number of cores added. This is because the cores need to interact through specific channels, and this inter-core communication consumes a portion of the available processing speed.Due to specific capabilities of modern CPUs, such as simultaneous multithreading and uncore, which involve sharing of actual CPU resources while aiming at increased utilization, monitoring performance levels and hardware use gradually became a more complex task. As a response, some CPUs implement additional hardware logic that monitors actual use of various parts of a CPU and provides various counters accessible to software; an example is Intel's Performance Counter Monitor technology.\n\n\n\n\n\n                           Answer: \n\n"}, {"role": "assistant", "content": "A central processing unit (CPU)\u2014also called a central processor or main processor\u2014is the most important processor in a given computer. Its electronic circuitry executes instructions of a computer program, such as arithmetic, logic, controlling, and input/output (I/O) operations. This role contrasts with that of external components, such as main memory and I/O circuitry,[1] and specialized coprocessors such as graphics processing units (GPUs).\n\nA CPU consists of a RAM module, registers, an Arithmetic and Logic Unit (ALU), an instruction address register, and an instruction register. Some of its\u2019 components are as follows: \n* RAM: Location to store memory\n* Registers: Temporarily store and manipulate values\n* ALU: Perform mathematical or logical operations\n* Instruction address register: Keep track of where we are in a program\n* Instruction register: Store the current instruction\n\nThe CPU performs instruction in three phases: \n* In the fetch phase, the CPU uses the instruction address register to access instruction from RAM, and then load that instruction into the instruction register. The instruction's location (address) in program memory is determined by the instruction pointer. After an instruction is fetched, the PC is incremented by the length of the instruction so that it will contain the address of the next instruction in the sequence\n* In the decode phase, it decodes the instruction that was fetched to get the opcode and the RAM addresses to access. Often, one group of bits (that is, a \"field\") within the instruction, called the opcode, indicates which operation is to be performed, while the remaining fields usually provide supplemental information required for the operation, such as the operands. Those operands may be specified as a constant value (called an immediate value), or as the location of a value that may be a processor register or a memory address, as determined by some addressing mode\n* The execute phase performs the instruction by configuring the ALU and other components based on the decoded opcode. Depending on the CPU architecture, this may consist of a single action or a sequence of actions. During each action, control signals electrically enable or disable various parts of the CPU so they can perform all or part of the desired operation. \n\nThe component that runs this process is called the control unit, which directs the flow of data and operations within the CPU, acting as the conductor of an orchestra.  It tells the computer's memory, arithmetic and logic unit and input and output devices how to respond to the instructions that have been sent to the processor.\n\nIn order to run the computer clock forces the CPU to continue going through the phases by sending an electrical signal at regular intervals to advance internal operations. The clock speed, measured in Hertz, determines the frequency at which the CPU executes cycles. CPUs can be overclocked (increased clock speed) or underclocked (decreased clock speed) to optimize performance or save power.\n"}]}
{"messages": [{"role": "system", "content": "\n                      Please write a 500 word summary on the following Transcript based on the Reading Material.\n                      Pick relevant information from the Reading Material and add it to the summary of the Transcript.\n                      The Summary should be only of the Transcript with a few information from the Reading Material.\n                      If you are not sure of the summary, say 'I don't know'.\n    "}, {"role": "user", "content": "Transcript: Welcome to the WebAudio API lesson! I personnally love this API, playing with it is a lot of fun as you will discover! I hope you will like it as much as I do! The audio and video elements are used for playing streamed content, but we do not have a real control on the audio. They come with a powerful API as we saw during the previous course and the previous lessons of this course: we can build a custom user interface, make our own play, stop, pause buttons. We can control the video from JavaScript, listen to events and manage playlists, etc. However, we have no real control on the audio signal: fancy visualizations are impossible to do. The ones that dance with the music, and sound effects such as reverberation, delay, make an equalizer, control the stereo, put the signal on the left or on the right is impossible. Furthermore, playing multiple sounds in sync is nearly impossible due to the streamed nature of the signal. For video games, we will need to play very fast different sounds, and you can not wait for the stream to arrive before starting playing it. Web Audio is the solution to all these needs and with Web Audio you will be able to get the output signal from the audio and video elements, and process it with multiple effects. You will be able to work with samples loaded in memory. This will enable perfect syncing, accurate loops, you will be able to mix sounds, etc. You can also generate music programmatically for creating synthetic sounds or virtual instruments. This part will not be covered by this course even if I give links to interesting libraries and demos that do that. Let\u00e2\u20ac\u2122s have a look at some applications. The first thing I wanted to show you is just want we can do with the standard audio element. So this is the standard audio element [music] that just plays a guitar riff that is coming from a server, but we can get control on the audio stream and do such things like that [music]. As you can see I control the stereo balancing here, and we have a real time waveform and volume meters visualization. Another thing we can do is that we can load samples in memory. This is an application I wrote for playing multitracks songs. So we are loading MP3s and decoding them in memory so that we can click anywhere on the song, I can make loops like this [music]. As you can see, we can isolate the tracks, we can mix them in real time. Another application that works with samples in memory is this small example you will learn how to write it in the course: we loaded two different short sounds [sounds] in memory and we can play them repeatedly [sounds] or we can add effects like changing the pitch, changing the volume with some random values and play them with random intervals [sounds]. We can see that the application to video games is straightforward. Another thing you can do is use synthetics sounds, we will not cover the techniques, but you can use some libraries. This is a library that works with synthetic sounds, you do not have to load a file for having these sounds [sounds]. This is a library for making 8 bits sounds like the very first computers and video games in the 80's used to produce. You can also make very complex application, like a vocoder [sounds], or a synthesizer music instrument [sounds]. Ok you have got the idea. This is all the interesting things you can do, and you can also learn how to debug such applications. I will make a video especially for that, but using FireFox, you can activate, in the setting of the dev tools, the Web Audio debug tab. So I clicked here on Web Audio, and this added a new tab here Web Audio, and if I reload the page, I can see the graph corresponding to the route of the signal. Here we have got a source -this is called the audio graph- so we've got the source, and we've got a destination. The source is the original sound. In that case it is a mediaElementAudioSource node that corresponds to the audio element here. The signal goes to an other node that is provided by the Web Audio API and implemented natively in your browser, it is a StereoPanner for separating the sound between left and right. So then it goes to an analyser here that will draw the blue waveform and finally to the destination, and the destination is the speakers. I also routed the signal to another part of the graph just for displaying two different analysers corresponding to the left and right channels. This is for the volume meters here [music]. And if you click on a node, you can see that some node have parameters. On the stereoPanner, that enables me to balance the sound to the left or to the right, you can see if I change that and click again, I can debug the different properties of each node. You will learn how to build this graph, how to assemble the different nodes, what are the most useful nodes for adding effects, controlling the volume, controlling the stereo, making a equalizer, creating fancy visualizations, and so on. Welcome to the Web Audio world and during a few lessons, you will learn step by step how to do such an application.\n\n\n                           Reading Material: HTML5 Audio is a subject of the HTML5 specification, incorporating audio input, playback, and synthesis, as well as in the browser. iOS \n\n\n== <audio> element ==\nThe <audio> element represents a sound, or an audio stream. It is commonly used to play back a single audio file within a web page, showing a GUI widget with play/pause/volume controls.\nThe <audio> element has these attributes:\n\nglobal attributes (accesskey; class; contenteditable; contextmenu; dir; draggable; dropzone; hidden; id; lang; spellcheck; style; tabindex; title; translate)\nautoplay = \"autoplay\" or \"\" (empty string) or emptyInstructs the User-Agent to automatically begin playback of the audio stream as soon as it can do so without stopping.\npreload = \"none\" or \"metadata\" or \"auto\" or \"\" (empty string) or emptyRepresents a hint to the User-Agent about whether optimistic downloading of the audio stream itself or its metadata is considered worthwhile.\n\"none\": Hints to the User-Agent that the user is not expected to need the audio stream, or that minimizing unnecessary traffic is desirable.\n\"metadata\": Hints to the User-Agent that the user is not expected to need the audio stream, but that fetching its metadata (duration and so on) is desirable.\n\"auto\": Hints to the User-Agent that optimistically downloading the entire audio stream is considered desirable.\ncontrols = \"controls\" or \"\" (empty string) or emptyInstructs the User-Agent to expose a user interface for controlling playback of the audio stream.\nloop = \"loop\" or \"\" (empty string) or emptyInstructs the User-Agent to seek back to the start of the audio stream upon reaching the end.\nmediagroup = stringInstructs the User-Agent to link multiple videos and/or audio streams together.\nmuted = \"muted\" or \"\" (empty string) or emptyRepresents the default state of the audio stream, potentially overriding user preferences.\nsrc = non-empty [URL] potentially surrounded by spacesThe URL for the audio stream.Example:\n\n\n=== Supporting browsers ===\nOn PC:\n\nGoogle Chrome\nInternet Explorer 9\nFirefox 3.5\nOpera 10.5\nGoogle\nSafari 3.1On mobile devices:\n\nAndroid Browser 2.3\n\nGoogle Chrome\nInternet Explorer Mobile 9\nSafari 4\nFirefox\nOpera Mobile 11\n\n\n== Supported audio coding formats ==\nThe adoption of HTML5 audio, as with HTML5 video, has become polarized between proponents of free and patent-encumbered formats. In 2007, the recommendation to use Vorbis was retracted from the specification by the W3C together with that to use Ogg Theora, citing the lack of a format accepted by all the major browser vendors.\nApple and Microsoft support the ISO/IEC-defined formats AAC and the older MP3. Mozilla and Opera support the free and open, royalty-free Vorbis format in Ogg and WebM containers, and criticize the patent-encumbered nature of MP3 and AAC, which are guaranteed to be \u201cnon-free\u201d. Google has so far provided support for all common formats.\nMost AAC files with finite length are wrapped in an MPEG-4 container (.mp4, .m4a), which is supported natively in Internet Explorer, Safari, and Chrome, and supported by the OS in Firefox and Opera. Most AAC live streams with infinite length are wrapped in an Audio Data Transport Stream container (.aac, .adts), which is supported by Chrome, Safari, Firefox and Edge.Many browsers also support uncompressed PCM audio in a WAVE container.In 2012, the free and open royalty-free Opus format was released and standardized by IETF. It is supported by Mozilla, Google, Opera and Edge.This table documents the current support for audio coding formats by the <audio> element.\n\n\n== Web Audio API and MediaStream Processing API ==\nThe Web Audio API specification developed by W3C describes a high-level JavaScript API for processing and synthesizing audio in web applications. The primary paradigm is of an audio routing graph, where a number of AudioNode objects are connected together to define the overall audio rendering. The actual processing will primarily take place in the underlying implementation (typically optimized Assembly / C / C++ code), but direct JavaScript processing and synthesis is also supported.Mozilla's Firefox browser implements a similar Audio Data API extension since version 4, implemented in 2010  and released in 2011, but Mozilla warns it is non-standard and deprecated, and recommends the Web Audio API instead.\nSome JavaScript audio processing and synthesis libraries such as Audiolet Archived 2013-01-28 at the Wayback Machine support both APIs.\nThe W3C Audio Working Group is also considering the MediaStream Processing API specification developed by Mozilla.\nIn addition to audio mixing and processing, it covers more general media streaming, including synchronization with HTML elements, capture of audio and video streams, and peer-to-peer routing of such media streams.\n\n\n=== Supporting browsers ===\nOn PC:\n\nGoogle Chrome 10 (Enabled by default since 14)\nFirefox 23 (Enabled by default since 25)\nOpera 15\nSafari 6\nMicrosoft Edge 12\nOpera GX 36On mobile devices:\n\nGoogle Chrome for Android 28 (Enabled by default since 29) and Apple iPads\nSafari 6 (Has restrictions on use (Muted unless user called))\nFirefox 23 (Enabled by default since 25)\nTizen\n\n\n== Web Speech API ==\nThe Web Speech API aims to provide an alternative input method for web applications (without using a keyboard). With this API, developers can give web apps the ability to transcribe voice to text, from the computer's microphone. The recorded audio is sent to speech servers for transcription, after which the text is typed out for the user. The API itself is agnostic of the underlying speech recognition implementation and can support both server based as well as embedded recognizers.\nThe HTML Speech Incubator group has proposed the implementation of audio-speech technology in browsers in the form of uniform, cross-platform APIs. The API contains both:\nSpeech Input API\nText to Speech APIGoogle integrated this feature into Google Chrome in March 2011. Letting its users search the web with their voice with code like:\n\n\n=== Supporting browsers ===\nSafari 6.1 and up [PARTIAL: speech synthesis only; no recognition]\nGoogle Chrome 25 and up\nFirefox Desktop 44.0 and up (Linux and Mac) / 45.0 and up (Windows) [PARTIAL: speech synthesis only; no recognition; currently requires \"media.webspeech.recognition.enable\" about:config option to be manually changed to \"true\"]\n\n\n\n\n\n                           Answer: \n\n"}, {"role": "assistant", "content": "The Web Audio API specification developed by W3C describes a high-level JavaScript API for processing and synthesizing audio in web applications. The primary paradigm is of an audio routing graph, where a number of AudioNode objects are connected together to define the overall audio rendering.\n\nThe Web Audio API allows developers to perform tasks such as:\n* Process and synthesize audio in web applications\n* Load, play, loop, and process sound samples\n* Apply sound effects such as reverberation, delay, graphic equalizer, compressor, distortion, etc.\n* Create real-time audio visualizations like dancing frequency graphs, animated waveforms that dance with the music, or generate music programmatically.\n\nThese capabilities make WebAudioAPI suitable for games and music applications. WebAudio API is available on web browsers such as Google Chrome, Firefox, Opera, Safari, Microsoft Edge and Opera GX and also available on Google Chrome, Firefox and Safari on mobile devices.\n\nAnother particular suitable multimedia feature is Track API. Using Track API, you will be able to  synchronize video with other elements in the document, such as display a Google Map, an HTML description or a Wikipedia page beside the video, while it\u2019s playing.\n"}]}
{"messages": [{"role": "system", "content": "\n                      Please write a 500 word summary on the following Transcript based on the Reading Material.\n                      Pick relevant information from the Reading Material and add it to the summary of the Transcript.\n                      The Summary should be only of the Transcript with a few information from the Reading Material.\n                      If you are not sure of the summary, say 'I don't know'.\n    "}, {"role": "user", "content": "Transcript: Expression is a combination of objects and operators that computes a value. Many expressions involve what is known as the boolean data type. Objects of the boolean type have only two values. These are called True and False. In Python, you need to capitalize these words, True and False, for Python to understand them as boolean type. Let&#39;s just check very quickly. If we type True, Python tells us this is a boolean object. Or if we ask Python, what is the type of False, with F capitalized, Python tells us this is a boolean object. Note that if I don&#39;t capitalize false, Python doesn&#39;t know what this object is. It doesn&#39;t understand that. So you need to be sure to capitalize your boolean types. Operations involving logic, so-called boolean operations, take in one or more boolean object and then they return one boolean object back to you. There are only three boolean operations, which are &quot;or&quot;, &quot;and&quot;, and &quot;not&quot;. So let&#39;s try these out. Let&#39;s start with &quot;or&quot;. &quot;Or&quot; between x and y is going to be True if either x is True or y is True, or both are True. So for example, if we say True or False, then Python returns True. True or True would also be True. So the only time &quot;or&quot; would be False-- if both the first and second object surrounding &quot;or&quot; are False. &quot;And&quot; is only true if both objects are True. So if we type True and True, the answer is going to be True. However, if we turned the second True to False, &quot;and&quot; is going to be False. So in order for &quot;and&quot; to be True, both of the objects need to be True. Finally, we have the &quot;not&quot; operation, which simply negates the value of the object. So if we say not True, Python gives us False. And if we say not False, Python returns to us True. We often need to compare objects in our programs. There are a total of eight different comparison operations in Python. Although these are commonly used for numeric types, we can actually apply them to other types as well. For example, if you&#39;re comparing two sequences, the comparison is carried out element-wise. So you&#39;re comparing the first element of your first sequence to your first element in your second sequence, and so on. The result of a comparison like this is always a boolean type, either True or False. It&#39;s perhaps easiest to understand these comparisons through a simple example that involves numbers. So let&#39;s try out a couple of them. Let&#39;s say you are comparing two numbers. We might ask Python, is 2 less than 4? Python returns True to us. We can also ask, is 2 less than or equal to, say, 2? And in this case, the answer is again True. We can test for equality by using two equal signs. 2 is equal to 2, so Python returns True to us. And finally we can ask, are two objects not equal to one another, by using the exclamation mark or exclamation point. In this case, the answer is False, because two is equal to 2. These two comparisons are used to test whether two objects are the one and the same. Notice that this is different than asking if the contents of two objects are the same. So let&#39;s see what this implies using a little bit of code. We could ask Python if the list that contains numbers 2 and 3 is the same as the list containing numbers 3 and 3. The answer is, of course, False in this case. If we modify the second list, now both lists have the numbers 2 and 3 in them. The answer is going to be True. The lists are identical in content. However, if we wanted to ask if the first list is the same object as the second list, we would use the &quot;is&quot; comparison. And Python tells us that this is False. If we&#39;d like to know if the first list is not the same object as the second list, we can use the &quot;is not&quot; operation. And in this case, Python returns True. So we actually have two lists here. They happen to have the same contents, but we do have two objects. That&#39;s why this comparison returns False. How would we test equality of two numbers that are a floating point number and an integer? So we can see how testing if 2.0 is equal to 2.0 returns True. But what happens if we ask Python, is 2.0 equal to 2? In this case 2.0 is a floating point number, whereas 2 is an integer. What happens in this situation is the following: Python takes the second number, which is number 2, an integer-- it turns that into a floating point number. The floating point representation of the integer 2 is 2.0. So now we are comparing implicitly 2.0 to 2.0. Therefore the answer is going to be True.\n\n\n                           Reading Material: Python is a high-level, general-purpose programming language. Its design philosophy emphasizes code readability with the use of significant indentation.Python is dynamically typed and garbage-collected. It supports multiple programming paradigms, including structured (particularly procedural), object-oriented and functional programming. It is often described as a \"batteries included\" language due to its comprehensive standard library.Guido van Rossum began working on Python in the late 1980s as a successor to the ABC programming language and first released it in 1991 as Python 0.9.0. Python 2.0 was released in 2000. Python 3.0, released in 2008, was a major revision not completely backward-compatible with earlier versions. Python 2.7.18, released in 2020, was the last release of Python 2.Python consistently ranks as one of the most popular programming languages, and has gained widespread use in the machine learning community.\n\n\n== History ==\n\nPython was conceived in the late 1980s by Guido van Rossum at Centrum Wiskunde & Informatica (CWI) in the Netherlands as a successor to the ABC programming language, which was inspired by SETL, capable of exception handling and interfacing with the Amoeba operating system. Its implementation began in December 1989. Van Rossum shouldered sole responsibility for the project, as the lead developer, until 12 July 2018, when he announced his \"permanent vacation\" from his responsibilities as Python's \"benevolent dictator for life\", a title the Python community bestowed upon him to reflect his long-term commitment as the project's chief decision-maker. In January 2019, active Python core developers elected a five-member Steering Council to lead the project.Python 2.0 was released on 16 October 2000, with many major new features such as list comprehensions, cycle-detecting garbage collection, reference counting, and Unicode support. Python 3.0, released on 3 December 2008, with many of its major features backported to Python 2.6.x and 2.7.x. Releases of Python 3 include the 2to3 utility, which automates the translation of Python 2 code to Python 3.Python 2.7's end-of-life was initially set for 2015, then postponed to 2020 out of concern that a large body of existing code could not easily be forward-ported to Python 3. No further security patches or other improvements will be released for it. Currently only 3.8 and later are supported (2023 security issues were fixed in e.g. 3.7.17, the final 3.7.x release). While Python 2.7 and older is officially unsupported, a different unofficial Python implementation, PyPy, continues to support Python 2, i.e. \"2.7.18+\" (plus 3.9 and 3.10), with the plus meaning (at least some) \"backported security updates\".In 2021 (and again twice in 2022), security updates were expedited, since all Python versions were insecure (including 2.7) because of security issues leading to possible remote code execution and web-cache poisoning. In 2022, Python 3.10.4 and 3.9.12 were expedited and 3.8.13, because of many security issues. When Python 3.9.13 was released in May 2022, it was announced that the 3.9 series (joining the older series 3.8 and 3.7) would only receive security fixes in the future. On 7 September 2022, four new releases were made due to a potential denial-of-service attack: 3.10.7, 3.9.14, 3.8.14, and 3.7.14.As of October 2023, Python 3.12 is the stable release, and 3.12 and 3.11 are the only versions with active (as opposed to just security) support. Notable changes in 3.11 from 3.10 include increased program execution speed and improved error reporting.Python 3.12 adds syntax (and in fact every Python since at least 3.5 adds some syntax) to the language, the new (soft) keyword type (recent releases have added a lot of typing support e.g. new type union operator in 3.10), and 3.11 for exception handling, and 3.10 the match and case (soft) keywords, for structural pattern matching statements. Python 3.12 also drops outdated modules and functionality, and future versions will too, see below in Development section.\nPython 3.11 claims to be between 10 and 60% faster than Python 3.10, and Python 3.12 adds another 5% on top of that. It also has improved error messages, and many other changes.\nSince 27 June 2023, Python 3.8 is the oldest supported version of Python (albeit in the 'security support' phase), due to Python 3.7 reaching end-of-life.\n\n\n== Design philosophy and features ==\nPython is a multi-paradigm programming language. Object-oriented programming and structured programming are fully supported, and many of their features support functional programming and aspect-oriented programming (including metaprogramming and metaobjects). Many other paradigms are supported via extensions, including design by contract and logic programming.Python uses dynamic typing and a combination of reference counting and a cycle-detecting garbage collector for memory management. It uses dynamic name resolution (late binding), which binds method and variable names during program execution.\nIts design offers some support for functional programming in the Lisp tradition. It has filter,mapandreduce functions; list comprehensions, dictionaries, sets, and generator expressions. The standard library has two modules (itertools and functools) that implement functional tools borrowed from Haskell and Standard ML.Its core philosophy is summarized in the Zen of Python (PEP 20), which includes aphorisms such as:\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nReadability counts.However, Python features regularly violate these principles and received criticism for adding unnecessary language bloat. Responses to these criticisms are that the Zen of Python is a guideline rather than a rule. New features has been so controversial that Guido van Rossum resigned as Benevolent Dictator for Life following vitriol over the addition of the assignment expression operator in Python 3.8.Nevertheless, rather than building all of its functionality into its core, Python was designed to be highly extensible via modules. This compact modularity has made it particularly popular as a means of adding programmable interfaces to existing applications. Van Rossum's vision of a small core language with a large standard library and easily extensible interpreter stemmed from his frustrations with ABC, which espoused the opposite approach.Python claims to strive for a simpler, less-cluttered syntax and grammar while giving developers a choice in their coding methodology. In contrast to Perl's \"there is more than one way to do it\" motto, Python embraces a \"there should be one\u2014and preferably only one\u2014obvious way to do it.\"  philosophy. In practice, however, Python provides many ways to achieve the same task. There are, for example, at least three ways to format a string literal, with no certainty as to which one a programmer should use. Alex Martelli, a Fellow at the Python Software Foundation and Python book author, wrote: \"To describe something as 'clever' is not considered a compliment in the Python culture.\"Python's developers usually strive to avoid premature optimization and reject patches to non-critical parts of the CPython reference implementation that would offer marginal increases in speed at the cost of clarity. Execution speed can be improved by moving speed-critical functions to extension modules written in languages such as C, or by using a just-in-time compiler like PyPy. It is also possible to cross-compile to other languages, but it either doesn't provide the full speed-up that might be expected, since Python is a very dynamic language, or a restricted subset of Python is compiled, and possibly semantics are slightly changed.Python's developers aim for it to be fun to use. This is reflected in its name\u2014a tribute to the British comedy group Monty Python\u2014and in occasionally playful approaches to tutorials and reference materials, such as the use of the terms \"spam\" and \"eggs\" (a reference to a Monty Python sketch) in examples, instead of the often-used \"foo\" and \"bar\".A common neologism in the Python community is pythonic, which has a wide range of meanings related to program style. \"Pythonic\" code may use Python idioms well, be natural or show fluency in the language, or conform with Python's minimalist philosophy and emphasis on readability. Code that is difficult to understand or reads like a rough transcription from another programming language is called unpythonic.\n\n\n== Syntax and semantics ==\n\nPython is meant to be an easily readable language. Its formatting is visually uncluttered and often uses English keywords where other languages use punctuation. Unlike many other languages, it does not use curly brackets to delimit blocks, and semicolons after statements are allowed but rarely used. It has fewer syntactic exceptions and special cases than C or Pascal.\n\n\n=== Indentation ===\n\nPython uses whitespace indentation, rather than curly brackets or keywords, to delimit blocks. An increase in indentation comes after certain statements; a decrease in indentation signifies the end of the current block. Thus, the program's visual structure accurately represents its semantic structure. This feature is sometimes termed the off-side rule. Some other languages use indentation this way; but in most, indentation has no semantic meaning. The recommended indent size is four spaces.\n\n\n=== Statements and control flow ===\nPython's statements include:\n\nThe assignment statement, using a single equals sign =\nThe if statement, which conditionally executes a block of code, along with else and elif (a contraction of else-if)\nThe for statement, which iterates over an iterable object, capturing each element to a local variable for use by the attached block\nThe while statement, which executes a block of code as long as its condition is true\nThe try statement, which allows exceptions raised in its attached code block to be caught and handled by except clauses (or new syntax except* in Python 3.11 for exception groups); it also ensures that clean-up code in a finally block is always run regardless of how the block exits\nThe raise statement, used to raise a specified exception or re-raise a caught exception\nThe class statement, which executes a block of code and attaches its local namespace to a class, for use in object-oriented programming\nThe def statement, which defines a function or method\nThe with statement, which encloses a code block within a context manager (for example, acquiring a lock before it is run, then releasing the lock; or opening and closing a file), allowing resource-acquisition-is-initialization (RAII)-like behavior and replacing a common try/finally idiom\nThe break statement, which exits a loop\nThe continue statement, which skips the rest of the current iteration and continues with the next\nThe del statement, which removes a variable\u2014deleting the reference from the name to the value, and producing an error if the variable is referred to before it is redefined\nThe pass statement, serving as a NOP, syntactically needed to create an empty code block\nThe assert statement, used in debugging to check for conditions that should apply\nThe yield statement, which returns a value from a generator function (and also an operator); used to implement coroutines\nThe return statement, used to return a value from a function\nThe import and from statements, used to import modules whose functions or variables can be used in the current programThe assignment statement (=) binds a name as a reference to a separate, dynamically allocated object. Variables may subsequently be rebound at any time to any object. In Python, a variable name is a generic reference holder without a fixed data type; however, it always refers to some object with a type. This is called dynamic typing\u2014in contrast to statically-typed languages, where each variable may contain only a value of a certain type.\nPython does not support tail call optimization or first-class continuations, and, according to Van Rossum, it never will. However, better support for coroutine-like functionality is provided by extending Python's generators. Before 2.5, generators were lazy iterators; data was passed unidirectionally out of the generator. From Python 2.5 on, it is possible to pass data back into a generator function; and from version 3.3, it can be passed through multiple stack levels.\n\n\n=== Expressions ===\nPython's expressions include:\n\nThe +, -, and * operators for mathematical addition, subtraction, and multiplication are similar to other languages, but the behavior of division differs. There are two types of divisions in Python: floor division (or integer division) // and floating-point/division. Python uses the ** operator for exponentiation.\nPython uses the + operator for string concatenation. Python uses the * operator for duplicating a string a specified number of times.\nThe @ infix operator. It is intended to be used by libraries such as NumPy for matrix multiplication.\nThe syntax :=, called the \"walrus operator\", was introduced in Python 3.8. It assigns values to variables as part of a larger expression.\nIn Python, == compares by value. Python's is operator may be used to compare object identities (comparison by reference), and comparisons may be chained\u2014for example, a <= b <= c.\nPython uses and, or, and not as Boolean operators.\nPython has a type of expression called a list comprehension, as well as a more general expression called a generator expression.\nAnonymous functions are implemented using lambda expressions; however, there may be only one expression in each body.\nConditional expressions are written as x if c else y (different in order of operands from the c ? x : y operator common to many other languages).\nPython makes a distinction between lists and tuples. Lists are written as [1, 2, 3], are mutable, and cannot be used as the keys of dictionaries (dictionary keys must be immutable in Python). Tuples, written as (1, 2, 3), are immutable and thus can be used as keys of dictionaries, provided all of the tuple's elements are immutable. The + operator can be used to concatenate two tuples, which does not directly modify their contents, but produces a new tuple containing the elements of both. Thus, given the variable t initially equal to (1, 2, 3), executing t = t + (4, 5) first evaluates t + (4, 5), which yields (1, 2, 3, 4, 5), which is then assigned back to t\u2014thereby effectively \"modifying the contents\" of t while conforming to the immutable nature of tuple objects. Parentheses are optional for tuples in unambiguous contexts.\nPython features sequence unpacking where multiple expressions, each evaluating to anything that can be assigned (to a variable, writable property, etc.) are associated in an identical manner to that forming tuple literals\u2014and, as a whole, are put on the left-hand side of the equal sign in an assignment statement. The statement expects an iterable object on the right-hand side of the equal sign that produces the same number of values as the provided writable expressions; when iterated through them, it assigns each of the produced values to the corresponding expression on the left.\nPython has a \"string format\" operator % that functions analogously to printf format strings in C\u2014e.g. \"spam=%s eggs=%d\" % (\"blah\", 2) evaluates to \"spam=blah eggs=2\". In Python 2.6+ and 3+, this was supplemented by the format() method of the str class, e.g. \"spam={0} eggs={1}\".format(\"blah\", 2). Python 3.6 added \"f-strings\": spam = \"blah\"; eggs = 2; f'spam={spam} eggs={eggs}'.\nStrings in Python can be concatenated by \"adding\" them (with the same operator as for adding integers and floats), e.g. \"spam\" + \"eggs\" returns \"spameggs\". If strings contain numbers, they are added as strings rather than integers, e.g. \"2\" + \"2\" returns \"22\".\nPython has various string literals:\nDelimited by single or double quotes; unlike in Unix shells, Perl, and Perl-influenced languages, single and double quotes work the same. Both use the backslash (\\) as an escape character. String interpolation became available in Python 3.6 as \"formatted string literals\".\nTriple-quoted (beginning and ending with three single or double quotes), which may span multiple lines and function like here documents in shells, Perl, and Ruby.\nRaw string varieties, denoted by prefixing the string literal with r. Escape sequences are not interpreted; hence raw strings are useful where literal backslashes are common, such as regular expressions and Windows-style paths. (Compare \"@-quoting\" in C#.)\nPython has array index and array slicing expressions in lists, denoted as a[key], a[start:stop] or a[start:stop:step]. Indexes are zero-based, and negative indexes are relative to the end. Slices take elements from the start index up to, but not including, the stop index. The third slice parameter called step or stride, allows elements to be skipped and reversed. Slice indexes may be omitted\u2014for example, a[:] returns a copy of the entire list. Each element of a slice is a shallow copy.In Python, a distinction between expressions and statements is rigidly enforced, in contrast to languages such as Common Lisp, Scheme, or Ruby. This leads to duplicating some functionality. For example:\n\nList comprehensions vs. for-loops\nConditional expressions vs. if blocks\nThe eval() vs. exec() built-in functions (in Python 2, exec is a statement); the former is for expressions, the latter is for statementsStatements cannot be a part of an expression\u2014so list and other comprehensions or lambda expressions, all being expressions, cannot contain statements. A particular case is that an assignment statement such as a = 1 cannot form part of the conditional expression of a conditional statement. This has the advantage of avoiding a classic C error of mistaking an assignment operator = for an equality operator == in conditions: if (c = 1) { ... } is syntactically valid (but probably unintended) C code, but if c = 1: ... causes a syntax error in Python.\n\n\n=== Methods ===\nMethods on objects are functions attached to the object's class; the syntax instance.method(argument) is, for normal methods and functions, syntactic sugar for Class.method(instance, argument). Python methods have an explicit self parameter to access instance data, in contrast to the implicit self (or this) in some other object-oriented programming languages (e.g., C++, Java, Objective-C, Ruby). Python also provides methods, often called dunder methods (due to their names beginning and ending with double-underscores), to allow user-defined classes to modify how they are handled by native operations including length, comparison, in arithmetic operations and type conversion.\n\n\n=== Typing ===\nPython uses duck typing and has typed objects but untyped variable names. Type constraints are not checked at compile time; rather, operations on an object may fail, signifying that it is not of a suitable type. Despite being dynamically typed, Python is strongly typed, forbidding operations that are not well-defined (for example, adding a number to a string) rather than silently attempting to make sense of them.\nPython allows programmers to define their own types using classes, most often used for object-oriented programming. New instances of classes are constructed by calling the class (for example, SpamClass() or EggsClass()), and the classes are instances of the metaclass type (itself an instance of itself), allowing metaprogramming and reflection.\nBefore version 3.0, Python had two kinds of classes (both using the same syntax): old-style and new-style, current Python versions only support the semantics new style.\nPython supports optional type annotations. These annotations are not enforced by the language, but may be used by external tools such as mypy to catch errors. Mypy also supports a Python compiler called mypyc, which leverages type annotations for optimization.\n\n\n=== Arithmetic operations ===\nPython has the usual symbols for arithmetic operators (+, -, *, /), the floor division operator // and the modulo operation % (where the remainder can be negative,  e.g. 4 % -3 == -2). It also has ** for exponentiation, e.g. 5**3 == 125 and 9**0.5 == 3.0, and a matrix\u2011multiplication operator @ . These operators work like in traditional math; with the same precedence rules, the operators infix (+ and - can also be unary to represent positive and negative numbers respectively).\nThe division between integers produces floating-point results. The behavior of division has changed significantly over time:\nCurrent Python (i.e. since 3.0) changed / to always be floating-point division, e.g. 5/2 == 2.5.\nThe floor division // operator was introduced. So 7//3 == 2, -7//3 == -3, 7.5//3 == 2.0 and -7.5//3 == -3.0. Adding from __future__ import division causes a module used in Python 2.7 to use Python 3.0 rules for division (see above).In Python terms, / is true division (or simply division), and // is floor division. / before version 3.0 is classic division.Rounding towards negative infinity, though different from most languages, adds consistency. For instance, it means that the equation (a + b)//b == a//b + 1 is always true. It also means that the equation b*(a//b) + a%b == a is valid for both positive and negative values of a. However, maintaining the validity of this equation means that while the result of a%b is, as expected, in the half-open interval [0, b), where b is a positive integer, it has to lie in the interval (b, 0] when b is negative.Python provides a round function for rounding a float to the nearest integer. For tie-breaking, Python 3 uses round to even: round(1.5) and round(2.5) both produce 2. Versions before 3 used round-away-from-zero: round(0.5) is 1.0, round(-0.5) is \u22121.0.Python allows Boolean expressions with multiple equality relations in a manner that is consistent with general use in mathematics. For example, the expression a < b < c tests whether a is less than b and b is less than c. C-derived languages interpret this expression differently: in C, the expression would first evaluate a < b, resulting in 0 or 1, and that result would then be compared with c.Python uses arbitrary-precision arithmetic for all integer operations. The Decimal type/class in the decimal module provides decimal floating-point numbers to a pre-defined arbitrary precision and several rounding modes. The Fraction class in the fractions module provides arbitrary precision for rational numbers.Due to Python's extensive mathematics library, and the third-party library NumPy that further extends the native capabilities, it is frequently used as a scientific scripting language to aid in problems such as numerical data processing and manipulation.\n\n\n== Programming examples ==\n\"Hello, World!\" program:\n\nProgram to calculate the factorial of a positive integer:\n\n\n== Libraries ==\nPython's large standard library provides tools suited to many tasks and is commonly cited as one of its greatest strengths. For Internet-facing applications, many standard formats and protocols such as MIME and HTTP are supported. It includes modules for creating graphical user interfaces, connecting to relational databases, generating pseudorandom numbers, arithmetic with arbitrary-precision decimals, manipulating regular expressions, and unit testing.\nSome parts of the standard library are covered by specifications\u2014for example, the Web Server Gateway Interface (WSGI) implementation wsgiref follows PEP 333\u2014but most are specified by their code, internal documentation, and test suites. However, because most of the standard library is cross-platform Python code, only a few modules need altering or rewriting for variant implementations.\nAs of 14 November 2022, the Python Package Index (PyPI), the official repository for third-party Python software, contains over 415,000 packages with a wide range of functionality, including:\n\n\n== Development environments ==\n\nMost Python implementations (including CPython) include a read\u2013eval\u2013print loop (REPL), permitting them to function as a command line interpreter for which users enter statements sequentially and receive results immediately.\nPython also comes with an Integrated development environment (IDE) called IDLE, which is more beginner-oriented.\nOther shells, including IDLE and IPython, add further abilities such as improved auto-completion, session state retention, and syntax highlighting.\nAs well as standard desktop integrated development environments including PyCharm, IntelliJ Idea, Visual Studio Code etc, there are web browser-based IDEs, including SageMath, for developing science- and math-related programs; PythonAnywhere, a browser-based IDE and hosting environment; and Canopy IDE, a commercial IDE emphasizing scientific computing.\n\n\n== Implementations ==\n\n\n=== Reference implementation ===\nCPython is the reference implementation of Python. It is written in C, meeting the C89 standard (Python 3.11 uses C11) with several select C99 features. CPython includes its own C extensions, but third-party extensions are not limited to older C versions\u2014e.g. they can be implemented with C11 or C++.) It compiles Python programs into an intermediate bytecode which is then executed by its virtual machine. CPython is distributed with a large standard library written in a mixture of C and native Python, and is available for many platforms, including Windows (starting with Python 3.9, the Python installer deliberately fails to install on Windows 7 and 8; Windows XP was supported until Python 3.5) and most modern Unix-like systems, including macOS (and Apple M1 Macs, since Python 3.9.1, with experimental installer) and unofficial support for e.g. VMS. Platform portability was one of its earliest priorities. (During Python 1 and 2 development, even OS/2 and Solaris were supported, but support has since been dropped for many platforms.)\n\n\n=== Other implementations ===\nPyPy is a fast, compliant interpreter of Python 2.7 and 3.8. Its just-in-time compiler often brings a significant speed improvement over CPython but some libraries written in C cannot be used with it.\nStackless Python is a significant fork of CPython that implements microthreads; it does not use the call stack in the same way, thus allowing massively concurrent programs. PyPy also has a stackless version.\nMicroPython and CircuitPython are Python 3 variants optimized for microcontrollers, including Lego Mindstorms EV3.\nPyston is a variant of the Python runtime that uses just-in-time compilation to speed up the execution of Python programs.\nCinder is a performance-oriented fork of CPython 3.8 that contains a number of optimizations, including bytecode inline caching, eager evaluation of coroutines, a method-at-a-time JIT, and an experimental bytecode compiler.\nSnek Embedded Computing Language (supporting e.g. 8-bit AVR microcontrollers such as ATmega 328P-based Arduino, and larger ones that are MicroPython can also support) \"is Python-inspired, but it is not Python. It is possible to write Snek programs that run under a full Python system, but most Python programs will not run under Snek.\" It's an imperative language not including OOP/classes unlike Python, and simplifying to one number type (like JavaScript, except using smaller) 32-bit single-precision \"Integer values of less than 24 bits can be represented exactly in these floating point values\".\n\n\n=== Unsupported implementations ===\nOther just-in-time Python compilers have been developed, but are now unsupported:\n\nGoogle began a project named Unladen Swallow in 2009, with the aim of speeding up the Python interpreter fivefold by using the LLVM, and of improving its multithreading ability to scale to thousands of cores, while ordinary implementations suffer from the global interpreter lock.\nPsyco is a discontinued just-in-time specializing compiler that integrates with CPython and transforms bytecode to machine code at runtime. The emitted code is specialized for certain data types and is faster than the standard Python code. Psyco does not support Python 2.7 or later.\nPyS60 was a Python 2 interpreter for Series 60 mobile phones released by Nokia in 2005. It implemented many of the modules from the standard library and some additional modules for integrating with the Symbian operating system. The Nokia N900 also supports Python with GTK widget libraries, enabling programs to be written and run on the target device.\n\n\n=== Cross-compilers to other languages ===\nThere are several compilers/transpilers to high-level object languages, with either unrestricted Python, a restricted subset of Python, or a language similar to Python as the source language:\n\nBrython, Transcrypt and Pyjs (latest release in 2012) compile Python to JavaScript.\nCodon compiles a subset of statically typed Python to machine code (via LLVM) and supports native multithreading.\nCython compiles (a superset of) Python  to C. The resulting code is also usable with Python via direct C-level API calls into the Python interpreter.\nPyJL compiles/transpiles a subset of Python to \"human-readable, maintainable, and high-performance Julia source code\". Despite claiming high performance, no tool can claim to do that for arbitrary Python code; i.e. it's known not possible to compile to a faster language or machine code. Unless semantics of Python are changed, but in many cases speedup is possible with few or no changes in the Python code. The faster Julia source code can then be used from Python, or compiled to machine code, and based that way.\nNuitka compiles Python into C.\nNumba uses LLVM to compile a subset of Python to machine code.\nPythran compiles a subset of Python 3 to C++ (C++11).\nRPython can be compiled to C, and is used to build the PyPy interpreter of Python.\nThe Python \u2192 11l \u2192 C++ transpiler compiles a subset of Python 3 to C++ (C++17).Specialized:\n\nMyHDL is a Python-based hardware description language (HDL), that converts MyHDL code to Verilog or VHDL code.Older projects (or not to be used with Python 3.x and latest syntax):\n\nGoogle's Grumpy (latest release in 2017) transpiles Python 2 to Go.\nIronPython  allows running Python 2.7 programs (and an alpha, released in 2021, is also available for \"Python 3.4, although features and behaviors from later versions may be included\") on the .NET Common Language Runtime.\nJython compiles Python 2.7 to Java bytecode, allowing the use of the Java libraries from a Python program.\nPyrex (latest release in 2010) and Shed Skin (latest release in 2013) compile to C and C++ respectively.\n\n\n=== Performance ===\nPerformance comparison of various Python implementations on a non-numerical (combinatorial) workload was presented at EuroSciPy '13. Python's performance compared to other programming languages is also benchmarked by The Computer Language Benchmarks Game.\n\n\n== Development ==\nPython's development is conducted largely through the Python Enhancement Proposal (PEP) process, the primary mechanism for proposing major new features, collecting community input on issues, and documenting Python design decisions. Python coding style is covered in PEP 8. Outstanding PEPs are reviewed and commented on by the Python community and the steering council.Enhancement of the language corresponds with the development of the CPython reference implementation. The mailing list python-dev is the primary forum for the language's development. Specific issues were originally discussed in the Roundup bug tracker hosted at by the foundation. In 2022, all issues and discussions were migrated to GitHub. Development originally took place on a self-hosted source-code repository running Mercurial, until Python moved to GitHub in January 2017.CPython's public releases come in three types, distinguished by which part of the version number is incremented:\n\nBackward-incompatible versions, where code is expected to break and needs to be manually ported. The first part of the version number is incremented. These releases happen infrequently\u2014version 3.0 was released 8 years after 2.0. According to Guido van Rossum, a version 4.0 is very unlikely to ever happen.\nMajor or \"feature\" releases are largely compatible with the previous version but introduce new features. The second part of the version number is incremented. Starting with Python 3.9, these releases are expected to happen annually. Each major version is supported by bug fixes for several years after its release.\nBugfix releases, which introduce no new features, occur about every 3 months and are made when a sufficient number of bugs have been fixed upstream since the last release. Security vulnerabilities are also patched in these releases. The third and final part of the version number is incremented.Many alpha, beta, and release-candidates are also released as previews and for testing before final releases. Although there is a rough schedule for each release, they are often delayed if the code is not ready. Python's development team monitors the state of the code by running the large unit test suite during development.The major academic conference on Python is PyCon. There are also special Python mentoring programs, such as PyLadies.\nPython 3.12 removed wstr meaning Python extensions need to be modified, and 3.10 added pattern matching to the language.Python 3.12 dropped some outdated modules, and more will be dropped in the future, deprecated as of 3.13; already deprecated array 'u' format code will emit DeprecationWarning since 3.13 and will be removed in Python 3.16. The 'w' format code should be used instead. Part of ctypes is also deprecated and http.server.CGIHTTPRequestHandler will emit a DeprecationWarning, and will be removed in 3.15. Using that code already has a high potential for both security and functionality bugs. Parts of the typing module are deprecated, e.g. creating a typing.NamedTuple class using keyword arguments to denote the fields and such (and more) will be disallowed in Python 3.15.\n\n\n== API documentation generators ==\nTools that can generate documentation for Python API include pydoc (available as part of the standard library), Sphinx, Pdoc and its forks, Doxygen and Graphviz, among others.\n\n\n== Naming ==\nPython's name is derived from the British comedy group Monty Python, whom Python creator Guido van Rossum enjoyed while developing the language. Monty Python references appear frequently in Python code and culture; for example, the metasyntactic variables often used in Python literature are spam and eggs instead of the traditional foo and bar. The official Python documentation also contains various references to Monty Python routines. Users of Python are sometimes referred to as \"Pythonistas\".The prefix Py- is used to show that something is related to Python. Examples of the use of this prefix in names of Python applications or libraries include Pygame, a binding of SDL to Python (commonly used to create games); PyQt and PyGTK, which bind Qt and GTK to Python respectively; and PyPy, a Python implementation originally written in Python.\n\n\n== Popularity ==\nSince 2003, Python has consistently ranked in the top ten most popular programming languages in the TIOBE Programming Community Index where as of December 2022 it was the most popular language (ahead of C, C++, and Java). It was selected Programming Language of the Year (for \"the highest rise in ratings in a year\") in 2007, 2010, 2018, and 2020 (the only language to have done so four times as of 2020).\nAn empirical study found that scripting languages, such as Python, are more productive than conventional languages, such as C and Java, for programming problems involving string manipulation and search in a dictionary, and determined that memory consumption was often \"better than Java and not much worse than C or C++\".Large organizations that use Python include Wikipedia, Google, Yahoo!, CERN, NASA, Facebook, Amazon, Instagram, Spotify, and some smaller entities like ILM and ITA. The social news networking site Reddit was written mostly in Python.\n\n\n== Uses ==\n\nPython can serve as a scripting language for web applications, e.g. via mod_wsgi for the Apache webserver. With Web Server Gateway Interface, a standard API has evolved to facilitate these applications. Web frameworks like Django, Pylons, Pyramid, TurboGears, web2py, Tornado, Flask, Bottle, and Zope support developers in the design and maintenance of complex applications. Pyjs and IronPython can be used to develop the client-side of Ajax-based applications. SQLAlchemy can be used as a data mapper to a relational database. Twisted is a framework to program communications between computers, and is used (for example) by Dropbox.\nLibraries such as NumPy, SciPy and Matplotlib allow the effective use of Python in scientific computing, with specialized libraries such as Biopython and Astropy providing domain-specific functionality. SageMath is a computer algebra system with a notebook interface programmable in Python: its library covers many aspects of mathematics, including algebra, combinatorics, numerical mathematics, number theory, and calculus. OpenCV has Python bindings with a rich set of features for computer vision and image processing.Python is commonly used in artificial intelligence projects and machine learning projects with the help of libraries like TensorFlow, Keras, Pytorch, scikit-learn and the Logic language ProbLog. As a scripting language with a modular architecture, simple syntax, and rich text processing tools, Python is often used for natural language processing.The combination of Python and Prolog has proved to be particularly useful for AI applications, with Prolog providing knowledge representation and reasoning capablities. The Janus system, in particular, exploits the similarites between these two languages,\nin part because of their use of dynamic typing, and the simple recursive nature of their\ndata structures. Typical applications of this combination include  natural language processing, visual query\nanswering, geospatial reasoning, and handling of semantic web data.\nThe Natlog system, implemented in Python, uses Definite Clause Grammars (DCGs) as prompt generators for text-to-text generators like GPT3 and text-to-image generators like DALL-E or Stable Diffusion.Python can also be used for graphical user interface (GUI) by using libraries like Tkinter.Python can also be used to create games, with libraries such as Pygame, which can make 2D games.\nPython has been successfully embedded in many software products as a scripting language, including in finite element method software such as Abaqus, 3D parametric modelers like FreeCAD, 3D animation packages such as 3ds Max, Blender, Cinema 4D, Lightwave, Houdini, Maya, modo, MotionBuilder, Softimage, the visual effects compositor Nuke, 2D imaging programs like GIMP, Inkscape, Scribus and Paint Shop Pro, and musical notation programs like scorewriter and capella. GNU Debugger uses Python as a pretty printer to show complex structures such as C++ containers. Esri promotes Python as the best choice for writing scripts in ArcGIS. It has also been used in several video games, and has been adopted as first of the three available programming languages in Google App Engine, the other two being Java and Go.Many operating systems include Python as a standard component. It ships with most Linux distributions, AmigaOS 4 (using Python 2.7), FreeBSD (as a package), NetBSD, and OpenBSD (as a package) and can be used from the command line (terminal). Many Linux distributions use installers written in Python: Ubuntu uses the Ubiquity installer, while Red Hat Linux and Fedora Linux use the Anaconda installer. Gentoo Linux uses Python in its package management system, Portage.\nPython is used extensively in the information security industry, including in exploit development.Most of the Sugar software for the One Laptop per Child XO, developed at Sugar Labs as of 2008, is written in Python. The Raspberry Pi single-board computer project has adopted Python as its main user-programming language.\nLibreOffice includes Python and intends to replace Java with Python. Its Python Scripting Provider is a core feature since Version 4.0 from 7 February 2013.\n\n\n== Languages influenced by Python ==\nPython's design and philosophy have influenced many other programming languages:\n\nBoo uses indentation, a similar syntax, and a similar object model.\nCobra uses indentation and a similar syntax, and its Acknowledgements document lists Python first among languages that influenced it.\nCoffeeScript, a programming language that cross-compiles to JavaScript, has Python-inspired syntax.\nECMAScript/JavaScript borrowed iterators and generators from Python.\nGDScript, a scripting language very similar to Python, built-in to the Godot game engine.\nGo is designed for the \"speed of working in a dynamic language like Python\" and shares the same syntax for slicing arrays.\nGroovy was motivated by the desire to bring the Python design philosophy to Java.\nJulia was designed to be \"as usable for general programming as Python\".\nMojo is currently a non-strict (aims to be a strict) superset of Python (e.g. still missing classes, and adding e.g. struct), and is up to 35,000x faster for some code (mandelbrot, since it is embarrassingly parallel), where static typing helps (and MLIR it is implemented with), and, e.g. 4000 times faster for matrix multiplication.\nNim uses indentation and similar syntax.\nRuby's creator, Yukihiro Matsumoto, has said: \"I wanted a scripting language that was more powerful than Perl, and more object-oriented than Python. That's why I decided to design my own language.\"\nSwift, a programming language developed by Apple, has some Python-inspired syntax.Python's development practices have also been emulated by other languages. For example, the practice of requiring a document describing the rationale for, and issues surrounding, a change to the language (in Python, a PEP) is also used in Tcl, Erlang, and Swift.\n\n\n\n\n\n                           Answer: \n\n"}, {"role": "assistant", "content": "\ufeffExpressions are a combination of objects and operators that compute a value. Many expressions involve a boolean data type, which takes values True or False and must be capitalized. Not capitalizing will make it unrecognizable to Python and will throw an error.\n\nBoolean operations (\"or\", \"and\", \"not\") take one or more boolean objects and return boolean results.\n* \"X Or Y\" returns True if either the X or Y argument is True.\n* \"X And Y\" returns True only if both X and Y arguments are True.\n* \"Not X\" negates the value of its argument X, switching the truth value of the boolean.\n\nPython provides eight comparison operations for various types, including numbers and sequences. Although they are commonly used for numeric types, we can apply them to other types as well. The result of a comparison will always return a boolean output.\n* <: Less than\n* <=: Less than or equal to\n* >: greater than\n* >=: greater than or equal to\n* ==: Equal to\n* !=: Not equal to\n* is: Same object\n* is not: Different object\n\nThe \u201cis\u201d  and \u201cis not\u201d can test if two objects are one and the same, which is different from saying whether or not contents are the same. In Python, \u201c==\u201d compares by value. The \u201cis\u201d operator may be used to compare object identities (comparison by reference), and comparisons may be chained\u2014for example, a <= b <= c. \n\nIn Python, a distinction between expressions and statements is rigidly enforced. Statements cannot be a part of an expression\u2014so list and other comprehensions or lambda expressions, all being expressions, cannot contain statements. A particular case is that an assignment statement such as a = 1 cannot form part of the conditional expression of a conditional statement.\n"}]}
{"messages": [{"role": "system", "content": "\n                      Please write a 500 word summary on the following Transcript based on the Reading Material.\n                      Pick relevant information from the Reading Material and add it to the summary of the Transcript.\n                      The Summary should be only of the Transcript with a few information from the Reading Material.\n                      If you are not sure of the summary, say 'I don't know'.\n    "}, {"role": "user", "content": "Transcript: Our story begins 20 years ago. Boris Yeltsin was sworn into office. Jay Leno replaced Johnny Carson on The Tonight Show, and cellphones were really, really big. It was August of 1991 and a 20 year old computer science student named Linus Torvalds sat down at his computer in Helsinki to post what is now one of the most famous entries in computing history: \"Hello everybody out there... I'm doing a (free) operating system (just a hobby, won't be anything big and professional like gnu)... it probably will never support anything other than AT-hard disks, as that's all I have...\" Well, word of Linux open source project quickly spread around the globe and developers from all over contributed their code. Linus named his OS kernel Linux and chose a penguin as its mascot, after a little incident at the zoo. He soon made a very important decision that would shape Linux's future just as much as the technology. He chose: the GPL license created by a visionary named Richard Stallman. The Linux kernel, along with the GPL license, and other GNU components, revolutionized the computing industry with a few very simple, yet very important freedoms: the freedom to use the software for any purpose, the freedom to change the software to suit your needs, the freedom to share the software with your friends and neighbors, and the freedom to share the changes you make. These radical ideas fueled its spread around the world and somewhat paradoxically, its rise from a hobbyist experiment to the foundation of a large and thriving commercial ecosystem. Companies built businesses around Linux. In 1999, Red Hat's stock tripled as it became the first Linux company to go public. That same year, IBM spent a billion dollars to improve and advertise Linux. Soon, Linux was knocking out industry heavyweights and fueling the rise of the internet with its free software. In short, Linux revolutionized computing. But whenever something is this disruptive, there's bound to be competitive crossfire. But Linux not only survived. It thrived. Today, the kernel development community numbers in the thousands, with hundreds of companies collaborating on Linux development. Every three months, another version of Linux is released. So, where is Linux today? Running in 75% of stock exchanges worldwide and powering the servers that deliver Amazon, Facebook, Twitter, eBay, and Google. You use Linux literally every time you surf the internet. It's in your phone, in your TV, running 95 percent of supercomputers, and in many of the devices you use every day. Linux is everywhere and the Helsinki-based programmer who started it all, he orchestrates this worldwide army of developers from his home office in Portland, Oregon, as a fellow at the Linux Foundation. As we celebrate 20 years of Linux, we can all see ourselves in its story. Thank you for being a part of its first 20 years!\n\n\n                           Reading Material: Linux ( LIN-uuks) is a family of open-source Unix-like operating systems based on the Linux kernel, an operating system kernel first released on September 17, 1991, by Linus Torvalds. Linux is typically packaged as a Linux distribution (distro), which includes the kernel and supporting system software and libraries, many of which are provided by the GNU Project. Many Linux distributions use the word \"Linux\" in their name, but the Free Software Foundation uses and recommends the name \"GNU/Linux\" to emphasize the use and importance of GNU software in many distributions, causing some controversy.Popular Linux distributions include Debian, Fedora Linux, Arch Linux, and Ubuntu. Commercial distributions include Red Hat Enterprise Linux and SUSE Linux Enterprise. Desktop Linux distributions include a windowing system such as X11 or Wayland and a desktop environment such as GNOME or KDE Plasma. Distributions intended for servers may not have a graphical user interface at all, or include a solution stack such as LAMP. Because Linux is freely redistributable, anyone may create a distribution for any purpose.Linux was originally developed for personal computers based on the Intel x86 architecture, but has since been ported to more platforms than any other operating system. Because of the dominance of Linux-based Android on smartphones, Linux, including Android, has the largest installed base of all general-purpose operating systems as of May 2022. Although Linux is, as of November 2022, used by only around 2.6 percent of desktop computers, the Chromebook, which runs the Linux kernel-based ChromeOS, dominates the US K\u201312 education market and represents nearly 20 percent of sub-$300 notebook sales in the US. Linux is the leading operating system on servers (over 96.4% of the top one million web servers' operating systems are Linux), leads other big iron systems such as mainframe computers, and is used on all of the world's 500 fastest supercomputers (as of November 2017, having gradually displaced all competitors).Linux also runs on embedded systems, i.e., devices whose operating system is typically built into the firmware and is highly tailored to the system. This includes routers, automation controls, smart home devices, video game consoles, televisions (Samsung and LG Smart TVs), automobiles (Tesla, Audi, Mercedes-Benz, Hyundai, and Toyota), and spacecraft (Falcon 9 rocket, Dragon crew capsule, and the Perseverance rover).\nLinux is one of the most prominent examples of free and open-source software collaboration. The source code may be used, modified, and distributed commercially or non-commercially by anyone under the terms of its respective licenses, such as the GNU General Public License (GPL). The Linux kernel, for example, is licensed under the GPLv2, with an exception for system calls that allows code that calls the kernel via system calls not to be licensed under the GPL.\n\n\n== History ==\n\n\n=== Precursors ===\nThe Unix operating system was conceived and implemented in 1969, at AT&T's Bell Labs, in the United States by Ken Thompson, Dennis Ritchie, Douglas McIlroy, and Joe Ossanna. First released in 1971, Unix was written entirely in assembly language, as was common practice at the time. In 1973, in a key pioneering approach, it was rewritten in the C programming language by Dennis Ritchie (with the exception of some hardware and I/O routines). The availability of a high-level language implementation of Unix made its porting to different computer platforms easier.Due to an earlier antitrust case forbidding it from entering the computer business, AT&T licensed the operating system's source code as a trade secret to anyone who asked. As a result, Unix grew quickly and became widely adopted by academic institutions and businesses. In 1984, AT&T divested itself of its regional operating companies, and was released from its obligation not to enter the computer business; freed of that obligation, Bell Labs began selling Unix as a proprietary product, where users were not legally allowed to modify it.Onyx Systems began selling early microcomputer-based Unix workstations in 1980. Later, Sun Microsystems, founded as a spin-off of a student project at Stanford University, also began selling Unix-based desktop workstations in 1982. While Sun workstations did not use commodity PC hardware, for which Linux was later originally developed, it represented the first successful commercial attempt at distributing a primarily single-user microcomputer that ran a Unix operating system.With Unix increasingly \"locked in\" as a proprietary product, the GNU Project, started in 1983 by Richard Stallman, had the goal of creating a \"complete Unix-compatible software system\" composed entirely of free software. Work began in 1984. Later, in 1985, Stallman started the Free Software Foundation and wrote the GNU General Public License (GNU GPL) in 1989. By the early 1990s, many of the programs required in an operating system (such as libraries, compilers, text editors, a command-line shell, and a windowing system) were completed, although low-level elements such as device drivers, daemons, and the kernel, called GNU Hurd, were stalled and incomplete.MINIX was created by Andrew S. Tanenbaum, a computer science professor, and released in 1987 as a minimal Unix-like operating system targeted at students and others who wanted to learn operating system principles. Although the complete source code of MINIX was freely available, the licensing terms prevented it from being free software until the licensing changed in April 2000.Although not released until 1992, due to legal complications, development of 386BSD, from which NetBSD, OpenBSD and FreeBSD descended, predated that of Linux. Linus Torvalds has stated on separate occasions that if the GNU kernel or 386BSD had been available at the time (1991), he probably would not have created Linux.\n\n\n=== Creation ===\nWhile attending the University of Helsinki in the fall of 1990, Torvalds enrolled in a Unix course. The course used a MicroVAX minicomputer running Ultrix, and one of the required texts was Operating Systems: Design and Implementation by Andrew S. Tanenbaum. This textbook included a copy of Tanenbaum's MINIX operating system. It was with this course that Torvalds first became exposed to Unix. In 1991, he became curious about operating systems. Frustrated by the licensing of MINIX, which at the time limited it to educational use only, he began to work on his own operating system kernel, which eventually became the Linux kernel.\nOn July 3, 1991, in an effort to implement Unix system calls, Linus Torvalds attempted unsuccessfully to obtain a digital copy of the POSIX standards documentation with a request to the comp.os.minix newsgroup. After not finding the POSIX documentation, Torvalds initially resorted to determining system calls from SunOS documentation owned by the university for use in operating its Sun Microsystems server. He also learned some system calls from Tanenbaum's MINIX text.\nTorvalds began the development of the Linux kernel on MINIX and applications written for MINIX were also used on Linux. Later, Linux matured and further Linux kernel development took place on Linux systems. GNU applications also replaced all MINIX components, because it was advantageous to use the freely available code from the GNU Project with the fledgling operating system; code licensed under the GNU GPL can be reused in other computer programs as long as they also are released under the same or a compatible license. Torvalds initiated a switch from his original license, which prohibited commercial redistribution, to the GNU GPL. Developers worked to integrate GNU components with the Linux kernel, creating a fully functional and free operating system.\n\n\n=== Naming ===\nLinus Torvalds had wanted to call his invention \"Freax\", a portmanteau of \"free\", \"freak\", and \"x\" (as an allusion to Unix). During the start of his work on the system, some of the project's makefiles included the name \"Freax\" for about half a year. Initially, Torvalds considered the name \"Linux\" but dismissed it as too egotistical.To facilitate development, the files were uploaded to the FTP server (ftp.funet.fi) of FUNET in September 1991. Ari Lemmke, Torvalds' coworker at the Helsinki University of Technology (HUT) who was one of the volunteer administrators for the FTP server at the time, did not think that \"Freax\" was a good name, so he named the project \"Linux\" on the server without consulting Torvalds. Later, however, Torvalds consented to \"Linux\".\nAccording to a newsgroup post by Torvalds, the word \"Linux\" should be pronounced (  LIN-uuks) with a short 'i' as in 'print' and 'u' as in 'put'. To further demonstrate how the word \"Linux\" should be pronounced, he included an audio guide with the kernel source code. However, in this recording, he pronounces Linux as /\u02c8lin\u028aks/ (LEEN-uuks) with a short but close front unrounded vowel, instead of a near-close near-front unrounded vowel as in his newsgroup post.\n\n\n=== Commercial and popular uptake ===\n\nAdoption of Linux in production environments, rather than being used only by hobbyists, started to take off first in the mid-1990s in the supercomputing community, where organizations such as NASA started to replace their increasingly expensive machines with clusters of inexpensive commodity computers running Linux. Commercial use began when Dell and IBM, followed by Hewlett-Packard, started offering Linux support to escape Microsoft's monopoly in the desktop operating system market.Today, Linux systems are used throughout computing, from embedded systems to virtually all supercomputers, and have secured a place in server installations such as the popular LAMP application stack. Use of Linux distributions in home and enterprise desktops has been growing. Linux distributions have also become popular in the netbook market, with many devices shipping with customized Linux distributions installed, and Google releasing their own ChromeOS designed for netbooks.\nLinux's greatest success in the consumer market is perhaps the mobile device market, with Android being the dominant operating system on smartphones and very popular on tablets and, more recently, on wearables. Linux gaming is also on the rise with Valve showing its support for Linux and rolling out SteamOS, its own gaming-oriented Linux distribution, which was later implemented in their Steam Deck platform. Linux distributions have also gained popularity with various local and national governments, such as the federal government of Brazil.\n\n\n\n\n\n                           Answer: \n\n"}, {"role": "assistant", "content": "In 1991, Linus Torvalds created Linux, an open-source operating system based on the UNIX operating system. Torvalds began the development of the Linux kernel on MINIX and applications written for MINIX were also used on Linux. Later, Linux matured and further Linux kernel development took place on Linux systems. GNU applications also replaced all MINIX components, because it was advantageous to use the freely available code from the GNU Project with the fledgling operating system; code licensed under the GNU GPL can be reused in other computer programs as long as they also are released under the same or a compatible license. Torvalds initiated a switch from his original license, which prohibited commercial redistribution, to the GNU GPL.Torvald decided to release Linux under the GPL license granting users significant freedoms, including the ability to modify and redistribute the software.\n\nThe adoption of Linux in production environments, rather than being used only by hobbyists, started to take off first in the mid-1990s in the supercomputing community, where organizations such as NASA started to replace their increasingly expensive machines with clusters of inexpensive commodity computers running Linux. Over time, due to Torvald\u2019s decision to release Linux under the GPL license, Linux gained global popularity and fueled the rise of a commercial ecosystem around it. \n\nCompanies like Red Hat and IBM invested heavily in Linux, leading to its widespread adoption. Commercial use began when Dell and IBM, followed by Hewlett-Packard, started offering Linux support to escape Microsoft's monopoly in the desktop operating system market.Today, Linux powers numerous critical systems, including stock exchanges, web servers, and supercomputers. \n\nThe Linux development community continues to thrive with thousands of contributors and regular releases. Linus Torvalds, the creator of Linux, remains actively involved in its development from his home office in Portland, Oregon. Linus Torvalds is the lead maintainer for the Linux kernel and guides its development and individuals and corporations develop third-party non-GNU components. These third-party components comprise a vast body of work and may include both kernel modules and user applications and libraries.\n\n"}]}
{"messages": [{"role": "system", "content": "\n                      Please write a 500 word summary on the following Transcript based on the Reading Material.\n                      Pick relevant information from the Reading Material and add it to the summary of the Transcript.\n                      The Summary should be only of the Transcript with a few information from the Reading Material.\n                      If you are not sure of the summary, say 'I don't know'.\n    "}, {"role": "user", "content": "Transcript: our first learning algorithm will be linear regression in this video you see what the model looks like and more importantly you also see what the overall process of supervised learning you'll flip let's use a motivating example of predicting housing prices we're going to use a data set of housing prices from the city of Portland Oregon and you're going to plot my data set of a number of houses there were different sizes that were so for a range of different prices let's say that given this data set you have a friend that's trying to sell a house and let's see your friend's house is of size 1,250 square feet and you want to tell them how much they might be able to sell the house for well one thing you could do is fit to a model maybe put a straight line to this data then write something like that and based on that maybe you could tell your friend that looks likely to maybe sell the whole square around to $18,000 so this is an example of a supervised learning algorithm and it's supervised learning because we're given the quote right answer for each of our examples namely were told what was the actual house what was the actual price that each of the houses in our data set was so for and moreover does an example of a regression problem where the term regression refers to the fact that we're predicting a real-valued output maybe the price and then just remind you the other type the other most common type of supervised learning problem is called the classification problem where we predict discrete values outputs such as if we are looking at cancer tumors and trying to decide if a tumor is malignant or benign so there's a 0 1 value distrito more formally in supervised learning we have a data set and this data set is called a training set so for a housing price an example we have a training set of different housing prices and our job is to learn from this data how to predict the prices of the houses let's define some notation that we're using throughout this course I'm going to define quite a lot of symbols is okay if you don't remember all the symbols right now but as the course progresses so be useful with a convenient notation so I'm going to use lowercase M throughout this course to denote the number of training examples so in this data set if I have you know let's say 47 rows in this table then I have 47 training examples and M equals 47 let me use lowercase X to denote the input variables often also called the features so though the X's here will be on input features and I'm going to use Y to denote my output variables or the target variable region to predict its Alexis second column here a little bit more notation I'm going to use X comma Y to denote a single training example so a single row in this table corresponds to a single training example and to refer to a specific training example I'm going to use this notation X I comma Y I and going to use this to refer to the training example so this superscript I over here this is not exponentiation right this X I Y I the superscript I in parenthesis that's just an index into my training set and it refers to the I row in this table okay so this is not except our of iy ^ I instead X I Y I just refers to the I fro of this table so for example X 1 you know refers to the input value for the first training example so that's 21 0 4 represents X to the first row X 2 would be equal to 14 16 right the second x and y 1 will be equal to 460 with that's the first the Y value for my first training example that's what that one refers to so as I mentioned occasionally I'll ask you a question to let you check your own understanding and a few seconds in this video a multiple-choice question will pop up in the video when it does please use your mouse to select what you think is the right answer we're defined by the training set is and so here's how a supervised learning works we solve them of a training set like our training set of housing prices and we feed that to our learning algorithm is the job of a learning algorithm to then output a function which by convention is usually denoted lowercase H and H stands for hypothesis and what the job of the hypothesis is is is a function that takes as input the size of a house like maybe the size of a new house that your friend is trying to sell it takes in a value of X and it tries to output the estimated value of y for their corresponding house so H is a function that map's from X's to YS um people often ask me you know why is this function called a hypothesis some of you may know the meaning of the term hypothesis from the dictionary or from signs or whatever it turns out that the machine learning this is a name that was used in the early days of machine learning and this kind of stuff because maybe not a great name for this sort of function for mapping from sizes of houses to the predictions but you know I think the term hypothesis maybe isn't the best possible name for this but is what this is the standard terminology that people using here you know so don't worry do it don't worry too much about why people call it that when designing a learning algorithm the next thing we need to decide is how do we represent this hypothesis H for this in the next few videos I'm going to choose our initial choice for representing the hypothesis will be the following going to represent H as follows and with the right of this subscript theta of x equals theta 0 plus theta 1 of X and as a shorthand sometimes instead of writing you know H subscript theta of X sometimes it's a shorthand I'll just write this is H of X but more often our rector the subscript theta over there and plotting to some pictures all this means is that we are going to you know predict that Y is a linear function of X right so there's a data set and what this function is doing is just predicting that Y is some straight line function of X s of x equals 3 0 plus theta 1 X ok and why a linear function well sometimes we'll want to fit more complicated perhaps nonlinear functions as well but since this linear case is the simple building block we'll start with this example first so fitting linear functions and we'll build on this to eventually have more complex models in more complex learning algorithms let me also give this particular model a name small though is called linear regression or district example is a actually linear regression with one variable will be variable being X some connecting housing prices functions in one variable X and another name for this model is you need the area linear regression and you need area is just you know a fancy way of saying one variable so that's linear regression in the next video we'll start to talk about just how to go about implementing this model\n\n\n                           Reading Material: In statistics, simple linear regression (SLR) is a linear regression model with a single explanatory variable. That is, it concerns two-dimensional sample points with one independent variable and one dependent variable (conventionally, the x and y coordinates in a Cartesian coordinate system) and finds a linear function (a non-vertical straight line) that, as accurately as possible, predicts the dependent variable values as a function of the independent variable.\nThe adjective simple refers to the fact that the outcome variable is related to a single predictor.\nIt is common to make the additional stipulation that the ordinary least squares (OLS) method should be used: the accuracy of each predicted value is measured by its squared residual (vertical distance between the point of the data set and the fitted line), and the goal is to make the sum of these squared deviations as small as possible. \nIn this case, the slope of the fitted line is equal to the correlation between y and x corrected by the ratio of standard deviations of these variables. The intercept of the fitted line is such that the line passes through the center of mass (x, y) of the data points.\n\n\n== Formulation and computation ==\nConsider the model function\n\n  \n    \n      \n        y\n        =\n        \u03b1\n        +\n        \u03b2\n        x\n        ,\n      \n    \n    {\\displaystyle y=\\alpha +\\beta x,}\n  which describes a line with slope \u03b2 and y-intercept \u03b1. In general such a relationship may not hold exactly for the largely unobserved population of values of the independent and dependent variables; we call the unobserved deviations from the above equation the errors.   Suppose we observe n data pairs and call them {(xi, yi), i = 1, ..., n}. We can describe the underlying relationship between yi and xi involving this error term \u03b5i by\n\n  \n    \n      \n        \n          y\n          \n            i\n          \n        \n        =\n        \u03b1\n        +\n        \u03b2\n        \n          x\n          \n            i\n          \n        \n        +\n        \n          \u03b5\n          \n            i\n          \n        \n        .\n      \n    \n    {\\displaystyle y_{i}=\\alpha +\\beta x_{i}+\\varepsilon _{i}.}\n  This relationship between the true (but unobserved) underlying parameters \u03b1 and \u03b2 and the data points is called a linear regression model.\nThe goal is to find estimated values \n  \n    \n      \n        \n          \n            \n              \u03b1\n              ^\n            \n          \n        \n      \n    \n    {\\displaystyle {\\widehat {\\alpha }}}\n   and \n  \n    \n      \n        \n          \n            \n              \u03b2\n              ^\n            \n          \n        \n      \n    \n    {\\displaystyle {\\widehat {\\beta }}}\n   for the parameters \u03b1 and \u03b2 which would provide the \"best\" fit in some sense for the data points. As mentioned in the introduction, in this article the \"best\" fit will be understood as in the least-squares approach: a line that minimizes the sum of squared residuals (see also Errors and residuals) \n  \n    \n      \n        \n          \n            \n              \n                \u03b5\n                ^\n              \n            \n          \n          \n            i\n          \n        \n      \n    \n    {\\displaystyle {\\widehat {\\varepsilon }}_{i}}\n   (differences between actual and predicted values of the dependent variable y), each of which is given by, for any candidate parameter values \n  \n    \n      \n        \u03b1\n      \n    \n    {\\displaystyle \\alpha }\n   and \n  \n    \n      \n        \u03b2\n      \n    \n    {\\displaystyle \\beta }\n  ,\n\n  \n    \n      \n        \n          \n            \n              \n                \u03b5\n                ^\n              \n            \n          \n          \n            i\n          \n        \n        =\n        \n          y\n          \n            i\n          \n        \n        \u2212\n        \u03b1\n        \u2212\n        \u03b2\n        \n          x\n          \n            i\n          \n        \n        .\n      \n    \n    {\\displaystyle {\\widehat {\\varepsilon }}_{i}=y_{i}-\\alpha -\\beta x_{i}.}\n  In other words, \n  \n    \n      \n        \n          \n            \n              \u03b1\n              ^\n            \n          \n        \n      \n    \n    {\\displaystyle {\\widehat {\\alpha }}}\n   and \n  \n    \n      \n        \n          \n            \n              \u03b2\n              ^\n            \n          \n        \n      \n    \n    {\\displaystyle {\\widehat {\\beta }}}\n   solve the following minimization problem:\n\n  \n    \n      \n        (\n        \n          \n            \n              \u03b1\n              ^\n            \n          \n        \n        ,\n        \n        \n          \n            \n              \u03b2\n              ^\n            \n          \n        \n        )\n        =\n        argmin\n        \u2061\n        \n          (\n          \n            Q\n            (\n            \u03b1\n            ,\n            \u03b2\n            )\n          \n          )\n        \n        ,\n      \n    \n    {\\displaystyle ({\\hat {\\alpha }},\\,{\\hat {\\beta }})=\\operatorname {argmin} \\left(Q(\\alpha ,\\beta )\\right),}\n  where the objective function Q is:\n\n  \n    \n      \n        Q\n        (\n        \u03b1\n        ,\n        \u03b2\n        )\n        =\n        \n          \u2211\n          \n            i\n            =\n            1\n          \n          \n            n\n          \n        \n        \n          \n            \n              \n                \u03b5\n                ^\n              \n            \n          \n          \n            i\n          \n          \n            \n            2\n          \n        \n        =\n        \n          \u2211\n          \n            i\n            =\n            1\n          \n          \n            n\n          \n        \n        (\n        \n          y\n          \n            i\n          \n        \n        \u2212\n        \u03b1\n        \u2212\n        \u03b2\n        \n          x\n          \n            i\n          \n        \n        \n          )\n          \n            2\n          \n        \n         \n        .\n      \n    \n    {\\displaystyle Q(\\alpha ,\\beta )=\\sum _{i=1}^{n}{\\widehat {\\varepsilon }}_{i}^{\\,2}=\\sum _{i=1}^{n}(y_{i}-\\alpha -\\beta x_{i})^{2}\\ .}\n  By expanding to get a quadratic expression in \n  \n    \n      \n        \u03b1\n      \n    \n    {\\displaystyle \\alpha }\n   and \n  \n    \n      \n        \u03b2\n        ,\n      \n    \n    {\\displaystyle \\beta ,}\n   we can derive minimizing values of the function arguments, denoted \n  \n    \n      \n        \n          \n            \n              \u03b1\n              ^\n            \n          \n        \n      \n    \n    {\\displaystyle {\\widehat {\\alpha }}}\n   and \n  \n    \n      \n        \n          \n            \n              \u03b2\n              ^\n            \n          \n        \n      \n    \n    {\\displaystyle {\\widehat {\\beta }}}\n  :\nHere we have introduced\n\n\n=== Expanded Formulas ===\nThe above equations are efficient to use if the mean of the x and y variables  (\n  \n    \n      \n        \n          \n            \n              x\n              \u00af\n            \n          \n        \n        \n           and \n        \n        \n          \n            \n              y\n              \u00af\n            \n          \n        \n      \n    \n    {\\displaystyle {\\bar {x}}{\\text{ and }}{\\bar {y}}}\n  ) are known.  If the means are not known at the time of calculation, it may be more efficient to use the expanded version of the \n  \n    \n      \n        \n          \n            \n              \u03b1\n              ^\n            \n          \n        \n        \n           and \n        \n        \n          \n            \n              \u03b2\n              ^\n            \n          \n        \n      \n    \n    {\\displaystyle {\\widehat {\\alpha }}{\\text{ and }}{\\widehat {\\beta }}}\n   equations.  These expanded equations may be derived from the more general polynomial regression equations by defining the regression polynomial to be of order 1, as follows.\n\n  \n    \n      \n        \n          \n            [\n            \n              \n                \n                  n\n                \n                \n                  \n                    \u2211\n                    \n                      i\n                      =\n                      1\n                    \n                    \n                      n\n                    \n                  \n                  \n                    x\n                    \n                      i\n                    \n                  \n                \n              \n              \n                \n                  \n                    \u2211\n                    \n                      i\n                      =\n                      1\n                    \n                    \n                      n\n                    \n                  \n                  \n                    x\n                    \n                      i\n                    \n                  \n                \n                \n                  \n                    \u2211\n                    \n                      i\n                      =\n                      1\n                    \n                    \n                      n\n                    \n                  \n                  \n                    x\n                    \n                      i\n                    \n                    \n                      2\n                    \n                  \n                \n              \n            \n            ]\n          \n        \n        \n          \n            [\n            \n              \n                \n                  \n                    \n                      \n                        \u03b1\n                        ^\n                      \n                    \n                  \n                \n              \n              \n                \n                  \n                    \n                      \n                        \u03b2\n                        ^\n                      \n                    \n                  \n                \n              \n            \n            ]\n          \n        \n        =\n        \n          \n            [\n            \n              \n                \n                  \n                    \u2211\n                    \n                      i\n                      =\n                      0\n                    \n                    \n                      n\n                    \n                  \n                  \n                    y\n                    \n                      i\n                    \n                  \n                \n              \n              \n                \n                  \n                    \u2211\n                    \n                      i\n                      =\n                      0\n                    \n                    \n                      n\n                    \n                  \n                  \n                    y\n                    \n                      i\n                    \n                  \n                  \n                    x\n                    \n                      i\n                    \n                  \n                \n              \n            \n            ]\n          \n        \n      \n    \n    {\\displaystyle {\\begin{bmatrix}n&\\sum _{i=1}^{n}x_{i}\\\\\\sum _{i=1}^{n}x_{i}&\\sum _{i=1}^{n}x_{i}^{2}\\end{bmatrix}}{\\begin{bmatrix}{\\widehat {\\alpha }}\\\\{\\widehat {\\beta }}\\end{bmatrix}}={\\begin{bmatrix}\\sum _{i=0}^{n}y_{i}\\\\\\sum _{i=0}^{n}y_{i}x_{i}\\end{bmatrix}}}\n  \nThe above system of linear equations may be solved directly, or stand-alone equations for \n  \n    \n      \n        \n          \n            \n              \u03b1\n              ^\n            \n          \n        \n        \n           and \n        \n        \n          \n            \n              \u03b2\n              ^\n            \n          \n        \n      \n    \n    {\\displaystyle {\\widehat {\\alpha }}{\\text{ and }}{\\widehat {\\beta }}}\n   may be derived by expanding the matrix equations above.  The resultant equations are algebraically equivalent to the ones shown in the prior paragraph, and are shown below without proof.\n  \n    \n      \n        \n          \n            \n              \n              \n                \n                \n                  \n                    \n                      \u03b1\n                      ^\n                    \n                  \n                \n                =\n                \n                  \n                    \n                      \n                        \u2211\n                        \n                          i\n                          =\n                          1\n                        \n                        \n                          n\n                        \n                      \n                      \n                        y\n                        \n                          i\n                        \n                      \n                      \n                        \u2211\n                        \n                          i\n                          =\n                          1\n                        \n                        \n                          n\n                        \n                      \n                      \n                        x\n                        \n                          i\n                        \n                        \n                          2\n                        \n                      \n                      \u2212\n                      \n                        \u2211\n                        \n                          i\n                          =\n                          1\n                        \n                        \n                          n\n                        \n                      \n                      \n                        x\n                        \n                          i\n                        \n                      \n                      \n                        \u2211\n                        \n                          i\n                          =\n                          1\n                        \n                        \n                          n\n                        \n                      \n                      \n                        x\n                        \n                          i\n                        \n                      \n                      \n                        y\n                        \n                          i\n                        \n                      \n                    \n                    \n                      n\n                      \n                        \u2211\n                        \n                          i\n                          =\n                          1\n                        \n                        \n                          n\n                        \n                      \n                      \n                        x\n                        \n                          i\n                        \n                        \n                          2\n                        \n                      \n                      \u2212\n                      (\n                      \n                        \u2211\n                        \n                          i\n                          =\n                          1\n                        \n                        \n                          n\n                        \n                      \n                      \n                        x\n                        \n                          i\n                        \n                      \n                      \n                        )\n                        \n                          2\n                        \n                      \n                    \n                  \n                \n              \n            \n            \n              \n            \n            \n              \n              \n                \n                \n                  \n                    \n                      \u03b2\n                      ^\n                    \n                  \n                \n                =\n                \n                  \n                    \n                      n\n                      \n                        \u2211\n                        \n                          i\n                          =\n                          1\n                        \n                        \n                          n\n                        \n                      \n                      \n                        x\n                        \n                          i\n                        \n                      \n                      \n                        y\n                        \n                          i\n                        \n                      \n                      \u2212\n                      \n                        \u2211\n                        \n                          i\n                          =\n                          1\n                        \n                        \n                          n\n                        \n                      \n                      \n                        x\n                        \n                          i\n                        \n                      \n                      \n                        \u2211\n                        \n                          i\n                          =\n                          1\n                        \n                        \n                          n\n                        \n                      \n                      \n                        y\n                        \n                          i\n                        \n                      \n                    \n                    \n                      n\n                      \n                        \u2211\n                        \n                          i\n                          =\n                          1\n                        \n                        \n                          n\n                        \n                      \n                      \n                        x\n                        \n                          i\n                        \n                        \n                          2\n                        \n                      \n                      \u2212\n                      (\n                      \n                        \u2211\n                        \n                          i\n                          =\n                          1\n                        \n                        \n                          n\n                        \n                      \n                      \n                        x\n                        \n                          i\n                        \n                      \n                      \n                        )\n                        \n                          2\n                        \n                      \n                    \n                  \n                \n              \n            \n            \n              \n              \n                \n              \n            \n          \n        \n      \n    \n    {\\displaystyle {\\begin{aligned}&\\qquad {\\widehat {\\alpha }}={\\frac {\\sum _{i=1}^{n}y_{i}\\sum _{i=1}^{n}x_{i}^{2}-\\sum _{i=1}^{n}x_{i}\\sum _{i=1}^{n}x_{i}y_{i}}{n\\sum _{i=1}^{n}x_{i}^{2}-(\\sum _{i=1}^{n}x_{i})^{2}}}\\\\[5pt]\\\\&\\qquad {\\widehat {\\beta }}={\\frac {n\\sum _{i=1}^{n}x_{i}y_{i}-\\sum _{i=1}^{n}x_{i}\\sum _{i=1}^{n}y_{i}}{n\\sum _{i=1}^{n}x_{i}^{2}-(\\sum _{i=1}^{n}x_{i})^{2}}}\\\\&\\qquad \\end{aligned}}}\n  \n\n\n== Interpretation ==\n\n\n=== Relationship with the sample covariance matrix ===\nThe solution can be reformulated using elements of the covariance matrix:\n\nwhere\n\nSubstituting the above expressions for \n  \n    \n      \n        \n          \n            \n              \u03b1\n              ^\n            \n          \n        \n      \n    \n    {\\displaystyle {\\widehat {\\alpha }}}\n   and \n  \n    \n      \n        \n          \n            \n              \u03b2\n              ^\n            \n          \n        \n      \n    \n    {\\displaystyle {\\widehat {\\beta }}}\n   into the original solution yields\n\n  \n    \n      \n        \n          \n            \n              \n                \n                  \n                    y\n                    ^\n                  \n                \n              \n              \u2212\n              \n                \n                  \n                    y\n                    \u00af\n                  \n                \n              \n            \n            \n              s\n              \n                y\n              \n            \n          \n        \n        =\n        \n          r\n          \n            x\n            y\n          \n        \n        \n          \n            \n              x\n              \u2212\n              \n                \n                  \n                    x\n                    \u00af\n                  \n                \n              \n            \n            \n              s\n              \n                x\n              \n            \n          \n        \n        .\n      \n    \n    {\\displaystyle {\\frac {{\\hat {y}}-{\\bar {y}}}{s_{y}}}=r_{xy}{\\frac {x-{\\bar {x}}}{s_{x}}}.}\n  This shows that rxy is the slope of the regression line of the standardized data points (and that this line passes through the origin). Since \n  \n    \n      \n        \u2212\n        1\n        \u2264\n        \n          r\n          \n            x\n            y\n          \n        \n        \u2264\n        1\n      \n    \n    {\\displaystyle -1\\leq r_{xy}\\leq 1}\n   then we get that if x is some measurement and y is a followup measurement from the same item, then we expect that y (on average) will be closer to the mean measurement than it was to the original value of x. This phenomenon is known as regressions toward the mean.\nGeneralizing the \n  \n    \n      \n        \n          \n            \n              x\n              \u00af\n            \n          \n        \n      \n    \n    {\\displaystyle {\\bar {x}}}\n   notation, we can write a horizontal bar over an expression to indicate the average value of that expression over the set of samples. For example:\n\n  \n    \n      \n        \n          \n            \n              x\n              y\n            \n            \u00af\n          \n        \n        =\n        \n          \n            1\n            n\n          \n        \n        \n          \u2211\n          \n            i\n            =\n            1\n          \n          \n            n\n          \n        \n        \n          x\n          \n            i\n          \n        \n        \n          y\n          \n            i\n          \n        \n        .\n      \n    \n    {\\displaystyle {\\overline {xy}}={\\frac {1}{n}}\\sum _{i=1}^{n}x_{i}y_{i}.}\n  This notation allows us a concise formula for rxy:\n\n  \n    \n      \n        \n          r\n          \n            x\n            y\n          \n        \n        =\n        \n          \n            \n              \n                \n                  \n                    x\n                    y\n                  \n                  \u00af\n                \n              \n              \u2212\n              \n                \n                  \n                    x\n                    \u00af\n                  \n                \n              \n              \n                \n                  \n                    y\n                    \u00af\n                  \n                \n              \n            \n            \n              \n                (\n                \n                  \n                    \n                      \n                        x\n                        \n                          2\n                        \n                      \n                      \u00af\n                    \n                  \n                  \u2212\n                  \n                    \n                      \n                        \n                          x\n                          \u00af\n                        \n                      \n                    \n                    \n                      2\n                    \n                  \n                \n                )\n              \n              \n                (\n                \n                  \n                    \n                      \n                        y\n                        \n                          2\n                        \n                      \n                      \u00af\n                    \n                  \n                  \u2212\n                  \n                    \n                      \n                        \n                          y\n                          \u00af\n                        \n                      \n                    \n                    \n                      2\n                    \n                  \n                \n                )\n              \n            \n          \n        \n        .\n      \n    \n    {\\displaystyle r_{xy}={\\frac {{\\overline {xy}}-{\\bar {x}}{\\bar {y}}}{\\sqrt {\\left({\\overline {x^{2}}}-{\\bar {x}}^{2}\\right)\\left({\\overline {y^{2}}}-{\\bar {y}}^{2}\\right)}}}.}\n  The coefficient of determination (\"R squared\") is equal to \n  \n    \n      \n        \n          r\n          \n            x\n            y\n          \n          \n            2\n          \n        \n      \n    \n    {\\displaystyle r_{xy}^{2}}\n   when the model is linear with a single independent variable. See sample correlation coefficient for additional details.\n\n\n=== Interpretation about the slope ===\nBy multiplying all members of the summation in the numerator by : \n  \n    \n      \n        \n          \n            \n              \n                \n                  \n                    \n                      (\n                      \n                        x\n                        \n                          i\n                        \n                      \n                      \u2212\n                      \n                        \n                          \n                            x\n                            \u00af\n                          \n                        \n                      \n                      )\n                    \n                    \n                      (\n                      \n                        x\n                        \n                          i\n                        \n                      \n                      \u2212\n                      \n                        \n                          \n                            x\n                            \u00af\n                          \n                        \n                      \n                      )\n                    \n                  \n                \n                =\n                1\n              \n            \n          \n        \n      \n    \n    {\\displaystyle {\\begin{aligned}{\\frac {(x_{i}-{\\bar {x}})}{(x_{i}-{\\bar {x}})}}=1\\end{aligned}}}\n   (thereby not changing it):\n\n  \n    \n      \n        \n          \n            \n              \n                \n                  \n                    \n                      \u03b2\n                      ^\n                    \n                  \n                \n              \n              \n                \n                =\n                \n                  \n                    \n                      \n                        \u2211\n                        \n                          i\n                          =\n                          1\n                        \n                        \n                          n\n                        \n                      \n                      (\n                      \n                        x\n                        \n                          i\n                        \n                      \n                      \u2212\n                      \n                        \n                          \n                            x\n                            \u00af\n                          \n                        \n                      \n                      )\n                      (\n                      \n                        y\n                        \n                          i\n                        \n                      \n                      \u2212\n                      \n                        \n                          \n                            y\n                            \u00af\n                          \n                        \n                      \n                      )\n                    \n                    \n                      \n                        \u2211\n                        \n                          i\n                          =\n                          1\n                        \n                        \n                          n\n                        \n                      \n                      (\n                      \n                        x\n                        \n                          i\n                        \n                      \n                      \u2212\n                      \n                        \n                          \n                            x\n                            \u00af\n                          \n                        \n                      \n                      \n                        )\n                        \n                          2\n                        \n                      \n                    \n                  \n                \n                =\n                \n                  \n                    \n                      \n                        \u2211\n                        \n                          i\n                          =\n                          1\n                        \n                        \n                          n\n                        \n                      \n                      (\n                      \n                        x\n                        \n                          i\n                        \n                      \n                      \u2212\n                      \n                        \n                          \n                            x\n                            \u00af\n                          \n                        \n                      \n                      \n                        )\n                        \n                          2\n                        \n                      \n                      \n                        \n                          \n                            (\n                            \n                              y\n                              \n                                i\n                              \n                            \n                            \u2212\n                            \n                              \n                                \n                                  y\n                                  \u00af\n                                \n                              \n                            \n                            )\n                          \n                          \n                            (\n                            \n                              x\n                              \n                                i\n                              \n                            \n                            \u2212\n                            \n                              \n                                \n                                  x\n                                  \u00af\n                                \n                              \n                            \n                            )\n                          \n                        \n                      \n                    \n                    \n                      \n                        \u2211\n                        \n                          i\n                          =\n                          1\n                        \n                        \n                          n\n                        \n                      \n                      (\n                      \n                        x\n                        \n                          i\n                        \n                      \n                      \u2212\n                      \n                        \n                          \n                            x\n                            \u00af\n                          \n                        \n                      \n                      \n                        )\n                        \n                          2\n                        \n                      \n                    \n                  \n                \n                =\n                \n                  \u2211\n                  \n                    i\n                    =\n                    1\n                  \n                  \n                    n\n                  \n                \n                \n                  \n                    \n                      (\n                      \n                        x\n                        \n                          i\n                        \n                      \n                      \u2212\n                      \n                        \n                          \n                            x\n                            \u00af\n                          \n                        \n                      \n                      \n                        )\n                        \n                          2\n                        \n                      \n                    \n                    \n                      \n                        \u2211\n                        \n                          j\n                          =\n                          1\n                        \n                        \n                          n\n                        \n                      \n                      (\n                      \n                        x\n                        \n                          j\n                        \n                      \n                      \u2212\n                      \n                        \n                          \n                            x\n                            \u00af\n                          \n                        \n                      \n                      \n                        )\n                        \n                          2\n                        \n                      \n                    \n                  \n                \n                \n                  \n                    \n                      (\n                      \n                        y\n                        \n                          i\n                        \n                      \n                      \u2212\n                      \n                        \n                          \n                            y\n                            \u00af\n                          \n                        \n                      \n                      )\n                    \n                    \n                      (\n                      \n                        x\n                        \n                          i\n                        \n                      \n                      \u2212\n                      \n                        \n                          \n                            x\n                            \u00af\n                          \n                        \n                      \n                      )\n                    \n                  \n                \n              \n            \n          \n        \n      \n    \n    {\\displaystyle {\\begin{aligned}{\\widehat {\\beta }}&={\\frac {\\sum _{i=1}^{n}(x_{i}-{\\bar {x}})(y_{i}-{\\bar {y}})}{\\sum _{i=1}^{n}(x_{i}-{\\bar {x}})^{2}}}={\\frac {\\sum _{i=1}^{n}(x_{i}-{\\bar {x}})^{2}{\\frac {(y_{i}-{\\bar {y}})}{(x_{i}-{\\bar {x}})}}}{\\sum _{i=1}^{n}(x_{i}-{\\bar {x}})^{2}}}=\\sum _{i=1}^{n}{\\frac {(x_{i}-{\\bar {x}})^{2}}{\\sum _{j=1}^{n}(x_{j}-{\\bar {x}})^{2}}}{\\frac {(y_{i}-{\\bar {y}})}{(x_{i}-{\\bar {x}})}}\\\\[6pt]\\end{aligned}}}\n  We can see that the slope (tangent of angle) of the regression line is the weighted average of \n  \n    \n      \n        \n          \n            \n              (\n              \n                y\n                \n                  i\n                \n              \n              \u2212\n              \n                \n                  \n                    y\n                    \u00af\n                  \n                \n              \n              )\n            \n            \n              (\n              \n                x\n                \n                  i\n                \n              \n              \u2212\n              \n                \n                  \n                    x\n                    \u00af\n                  \n                \n              \n              )\n            \n          \n        \n      \n    \n    {\\displaystyle {\\frac {(y_{i}-{\\bar {y}})}{(x_{i}-{\\bar {x}})}}}\n   that is the slope (tangent of angle) of the line that connects the i-th point to the average of all points, weighted by \n  \n    \n      \n        (\n        \n          x\n          \n            i\n          \n        \n        \u2212\n        \n          \n            \n              x\n              \u00af\n            \n          \n        \n        \n          )\n          \n            2\n          \n        \n      \n    \n    {\\displaystyle (x_{i}-{\\bar {x}})^{2}}\n   because the further the point is the more \"important\" it is, since small errors in its position will affect the slope connecting it to the center point more.\n\n\n=== Interpretation about the intercept ===\n\n  \n    \n      \n        \n          \n            \n              \n                \n                  \n                    \n                      \u03b1\n                      ^\n                    \n                  \n                \n              \n              \n                \n                =\n                \n                  \n                    \n                      y\n                      \u00af\n                    \n                  \n                \n                \u2212\n                \n                  \n                    \n                      \u03b2\n                      ^\n                    \n                  \n                \n                \n                \n                  \n                    \n                      x\n                      \u00af\n                    \n                  \n                \n                ,\n              \n            \n          \n        \n      \n    \n    {\\displaystyle {\\begin{aligned}{\\widehat {\\alpha }}&={\\bar {y}}-{\\widehat {\\beta }}\\,{\\bar {x}},\\\\[5pt]\\end{aligned}}}\n  Given \n  \n    \n      \n        \n          \n            \n              \u03b2\n              ^\n            \n          \n        \n        =\n        tan\n        \u2061\n        (\n        \u03b8\n        )\n        =\n        d\n        y\n        \n          /\n        \n        d\n        x\n        \u2192\n        d\n        y\n        =\n        d\n        x\n        \u00d7\n        \n          \n            \n              \u03b2\n              ^\n            \n          \n        \n      \n    \n    {\\displaystyle {\\widehat {\\beta }}=\\tan(\\theta )=dy/dx\\rightarrow dy=dx\\times {\\widehat {\\beta }}}\n   with \n  \n    \n      \n        \u03b8\n      \n    \n    {\\displaystyle \\theta }\n   the angle the line makes with the positive x axis, \nwe have \n  \n    \n      \n        \n          y\n          \n            \n              i\n              n\n              t\n              e\n              r\n              s\n              e\n              c\n              t\n              i\n              o\n              n\n            \n          \n        \n        =\n        \n          \n            \n              y\n              \u00af\n            \n          \n        \n        \u2212\n        d\n        x\n        \u00d7\n        \n          \n            \n              \u03b2\n              ^\n            \n          \n        \n        =\n        \n          \n            \n              y\n              \u00af\n            \n          \n        \n        \u2212\n        d\n        y\n      \n    \n    {\\displaystyle y_{\\rm {intersection}}={\\bar {y}}-dx\\times {\\widehat {\\beta }}={\\bar {y}}-dy}\n  \n\n\n=== Interpretation about the correlation ===\nIn the above formulation, notice that each \n  \n    \n      \n        \n          x\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle x_{i}}\n   is a constant (\"known upfront\") value, while the \n  \n    \n      \n        \n          y\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle y_{i}}\n   are random variables that depend on the linear function of \n  \n    \n      \n        \n          x\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle x_{i}}\n   and the random term \n  \n    \n      \n        \n          \u03b5\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle \\varepsilon _{i}}\n  . This assumption is used when deriving the standard error of the slope and showing that it is unbiased.\nIn this framing, when \n  \n    \n      \n        \n          x\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle x_{i}}\n   is not actually a random variable, what type of parameter does the empirical correlation \n  \n    \n      \n        \n          r\n          \n            x\n            y\n          \n        \n      \n    \n    {\\displaystyle r_{xy}}\n   estimate? The issue is that for each value i we'll have: \n  \n    \n      \n        E\n        (\n        \n          x\n          \n            i\n          \n        \n        )\n        =\n        \n          x\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle E(x_{i})=x_{i}}\n   and \n  \n    \n      \n        V\n        a\n        r\n        (\n        \n          x\n          \n            i\n          \n        \n        )\n        =\n        0\n      \n    \n    {\\displaystyle Var(x_{i})=0}\n  . A possible interpretation of \n  \n    \n      \n        \n          r\n          \n            x\n            y\n          \n        \n      \n    \n    {\\displaystyle r_{xy}}\n   is to imagine that \n  \n    \n      \n        \n          x\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle x_{i}}\n   defines a random variable drawn from the empirical distribution of the x values in our sample. For example, if x had 10 values from the natural numbers: [1,2,3...,10], then we can imagine x to be a Discrete uniform distribution. Under this interpretation all \n  \n    \n      \n        \n          x\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle x_{i}}\n   have the same expectation and some positive variance. With this interpretation we can think of \n  \n    \n      \n        \n          r\n          \n            x\n            y\n          \n        \n      \n    \n    {\\displaystyle r_{xy}}\n   as the estimator of the Pearson's correlation between the random variable y and the random variable x (as we just defined it).\n\n\n== Numerical properties ==\n\n\n== Statistical properties ==\nDescription of the statistical properties of estimators from the simple linear regression estimates requires the use of a statistical model. The following is based on assuming the validity of a model under which the estimates are optimal. It is also possible to evaluate the properties under other assumptions, such as inhomogeneity, but this is discussed elsewhere.\n\n\n=== Unbiasedness ===\nThe estimators \n  \n    \n      \n        \n          \n            \n              \u03b1\n              ^\n            \n          \n        \n      \n    \n    {\\displaystyle {\\widehat {\\alpha }}}\n   and \n  \n    \n      \n        \n          \n            \n              \u03b2\n              ^\n            \n          \n        \n      \n    \n    {\\displaystyle {\\widehat {\\beta }}}\n   are unbiased.\nTo formalize this assertion we must define a framework in which these estimators are random variables. We consider the residuals \u03b5i as random variables drawn independently from some distribution with mean zero. In other words, for each value of x, the corresponding value of y is generated as a mean response  \u03b1 + \u03b2x plus an additional random variable \u03b5 called the error term, equal to zero on average. Under such interpretation, the least-squares estimators \n  \n    \n      \n        \n          \n            \n              \u03b1\n              ^\n            \n          \n        \n      \n    \n    {\\displaystyle {\\widehat {\\alpha }}}\n   and \n  \n    \n      \n        \n          \n            \n              \u03b2\n              ^\n            \n          \n        \n      \n    \n    {\\displaystyle {\\widehat {\\beta }}}\n   will themselves be random variables whose means will equal the \"true values\" \u03b1 and \u03b2. This is the definition of an unbiased estimator.\n\n\n=== Confidence intervals ===\n\nThe formulas given in the previous section allow one to calculate the point estimates of \u03b1 and \u03b2 \u2014 that is, the coefficients of the regression line for the given set of data. However, those formulas don't tell us how precise the estimates are, i.e., how much the estimators \n  \n    \n      \n        \n          \n            \n              \u03b1\n              ^\n            \n          \n        \n      \n    \n    {\\displaystyle {\\widehat {\\alpha }}}\n   and \n  \n    \n      \n        \n          \n            \n              \u03b2\n              ^\n            \n          \n        \n      \n    \n    {\\displaystyle {\\widehat {\\beta }}}\n   vary from sample to sample for the specified sample size. Confidence intervals were devised to give a plausible set of values to the estimates one might have if one repeated the experiment a very large number of times.\nThe standard method of constructing confidence intervals for linear regression coefficients relies on the normality assumption, which is justified if either:\n\nthe errors in the regression are normally distributed (the so-called classic regression assumption), or\nthe number of observations n is sufficiently large, in which case the estimator is approximately normally distributed.The latter case is justified by the central limit theorem.\n\n\n==== Normality assumption ====\nUnder the first assumption above, that of the normality of the error terms, the estimator of the slope coefficient will itself be normally distributed with mean \u03b2 and variance \n  \n    \n      \n        \n          \u03c3\n          \n            2\n          \n        \n        \n          /\n          \n            \u2211\n            (\n            \n              x\n              \n                i\n              \n            \n            \u2212\n            \n              \n                \n                  x\n                  \u00af\n                \n              \n            \n            \n              )\n              \n                2\n              \n            \n          \n          \n        \n        ,\n      \n    \n    {\\displaystyle \\sigma ^{2}\\left/\\sum (x_{i}-{\\bar {x}})^{2}\\right.,}\n   where \u03c32 is the variance of the error terms (see Proofs involving ordinary least squares).  At the same time the sum of squared residuals Q is distributed proportionally to \u03c72 with n \u2212 2 degrees of freedom, and independently from \n  \n    \n      \n        \n          \n            \n              \u03b2\n              ^\n            \n          \n        \n      \n    \n    {\\displaystyle {\\widehat {\\beta }}}\n  . This allows us to construct a t-value\n\n  \n    \n      \n        t\n        =\n        \n          \n            \n              \n                \n                  \n                    \u03b2\n                    ^\n                  \n                \n              \n              \u2212\n              \u03b2\n            \n            \n              s\n              \n                \n                  \n                    \u03b2\n                    ^\n                  \n                \n              \n            \n          \n        \n         \n        \u223c\n         \n        \n          t\n          \n            n\n            \u2212\n            2\n          \n        \n        ,\n      \n    \n    {\\displaystyle t={\\frac {{\\widehat {\\beta }}-\\beta }{s_{\\widehat {\\beta }}}}\\ \\sim \\ t_{n-2},}\n  where\n\n  \n    \n      \n        \n          s\n          \n            \n              \n                \u03b2\n                ^\n              \n            \n          \n        \n        =\n        \n          \n            \n              \n                \n                  \n                    1\n                    \n                      n\n                      \u2212\n                      2\n                    \n                  \n                \n                \n                  \u2211\n                  \n                    i\n                    =\n                    1\n                  \n                  \n                    n\n                  \n                \n                \n                  \n                    \n                      \n                        \u03b5\n                        ^\n                      \n                    \n                  \n                  \n                    i\n                  \n                  \n                    \n                    2\n                  \n                \n              \n              \n                \n                  \u2211\n                  \n                    i\n                    =\n                    1\n                  \n                  \n                    n\n                  \n                \n                (\n                \n                  x\n                  \n                    i\n                  \n                \n                \u2212\n                \n                  \n                    \n                      x\n                      \u00af\n                    \n                  \n                \n                \n                  )\n                  \n                    2\n                  \n                \n              \n            \n          \n        \n      \n    \n    {\\displaystyle s_{\\widehat {\\beta }}={\\sqrt {\\frac {{\\frac {1}{n-2}}\\sum _{i=1}^{n}{\\widehat {\\varepsilon }}_{i}^{\\,2}}{\\sum _{i=1}^{n}(x_{i}-{\\bar {x}})^{2}}}}}\n  is the unbiased standard error estimator of the estimator \n  \n    \n      \n        \n          \n            \n              \u03b2\n              ^\n            \n          \n        \n      \n    \n    {\\displaystyle {\\widehat {\\beta }}}\n  .\nThis t-value has a Student's t-distribution with n \u2212 2 degrees of freedom. Using it we can construct a confidence interval for \u03b2:\n\n  \n    \n      \n        \u03b2\n        \u2208\n        \n          [\n          \n            \n              \n                \n                  \u03b2\n                  ^\n                \n              \n            \n            \u2212\n            \n              s\n              \n                \n                  \n                    \u03b2\n                    ^\n                  \n                \n              \n            \n            \n              t\n              \n                n\n                \u2212\n                2\n              \n              \n                \u2217\n              \n            \n            ,\n             \n            \n              \n                \n                  \u03b2\n                  ^\n                \n              \n            \n            +\n            \n              s\n              \n                \n                  \n                    \u03b2\n                    ^\n                  \n                \n              \n            \n            \n              t\n              \n                n\n                \u2212\n                2\n              \n              \n                \u2217\n              \n            \n          \n          ]\n        \n        ,\n      \n    \n    {\\displaystyle \\beta \\in \\left[{\\widehat {\\beta }}-s_{\\widehat {\\beta }}t_{n-2}^{*},\\ {\\widehat {\\beta }}+s_{\\widehat {\\beta }}t_{n-2}^{*}\\right],}\n  at confidence level (1 \u2212 \u03b3), where \n  \n    \n      \n        \n          t\n          \n            n\n            \u2212\n            2\n          \n          \n            \u2217\n          \n        \n      \n    \n    {\\displaystyle t_{n-2}^{*}}\n   is the \n  \n    \n      \n        \n          \n            (\n            \n              1\n              \n              \u2212\n              \n              \n                \n                  \u03b3\n                  2\n                \n              \n            \n            )\n          \n          \n            -th\n          \n        \n      \n    \n    {\\displaystyle \\scriptstyle \\left(1\\;-\\;{\\frac {\\gamma }{2}}\\right){\\text{-th}}}\n   quantile of the tn\u22122 distribution. For example, if \u03b3 = 0.05 then the confidence level is 95%.\nSimilarly, the confidence interval for the intercept coefficient \u03b1 is given by\n\n  \n    \n      \n        \u03b1\n        \u2208\n        \n          [\n          \n            \n              \n                \n                  \u03b1\n                  ^\n                \n              \n            \n            \u2212\n            \n              s\n              \n                \n                  \n                    \u03b1\n                    ^\n                  \n                \n              \n            \n            \n              t\n              \n                n\n                \u2212\n                2\n              \n              \n                \u2217\n              \n            \n            ,\n             \n            \n              \n                \n                  \u03b1\n                  ^\n                \n              \n            \n            +\n            \n              s\n              \n                \n                  \n                    \u03b1\n                    ^\n                  \n                \n              \n            \n            \n              t\n              \n                n\n                \u2212\n                2\n              \n              \n                \u2217\n              \n            \n          \n          ]\n        \n        ,\n      \n    \n    {\\displaystyle \\alpha \\in \\left[{\\widehat {\\alpha }}-s_{\\widehat {\\alpha }}t_{n-2}^{*},\\ {\\widehat {\\alpha }}+s_{\\widehat {\\alpha }}t_{n-2}^{*}\\right],}\n  at confidence level (1 \u2212 \u03b3), where\n\n  \n    \n      \n        \n          s\n          \n            \n              \n                \u03b1\n                ^\n              \n            \n          \n        \n        =\n        \n          s\n          \n            \n              \n                \u03b2\n                ^\n              \n            \n          \n        \n        \n          \n            \n              \n                1\n                n\n              \n            \n            \n              \u2211\n              \n                i\n                =\n                1\n              \n              \n                n\n              \n            \n            \n              x\n              \n                i\n              \n              \n                2\n              \n            \n          \n        \n        =\n        \n          \n            \n              \n                1\n                \n                  n\n                  (\n                  n\n                  \u2212\n                  2\n                  )\n                \n              \n            \n            \n              (\n              \n                \n                  \u2211\n                  \n                    i\n                    =\n                    1\n                  \n                  \n                    n\n                  \n                \n                \n                  \n                    \n                      \n                        \u03b5\n                        ^\n                      \n                    \n                  \n                  \n                    i\n                  \n                  \n                    \n                    2\n                  \n                \n              \n              )\n            \n            \n              \n                \n                  \n                    \u2211\n                    \n                      i\n                      =\n                      1\n                    \n                    \n                      n\n                    \n                  \n                  \n                    x\n                    \n                      i\n                    \n                    \n                      2\n                    \n                  \n                \n                \n                  \n                    \u2211\n                    \n                      i\n                      =\n                      1\n                    \n                    \n                      n\n                    \n                  \n                  (\n                  \n                    x\n                    \n                      i\n                    \n                  \n                  \u2212\n                  \n                    \n                      \n                        x\n                        \u00af\n                      \n                    \n                  \n                  \n                    )\n                    \n                      2\n                    \n                  \n                \n              \n            \n          \n        \n      \n    \n    {\\displaystyle s_{\\widehat {\\alpha }}=s_{\\widehat {\\beta }}{\\sqrt {{\\frac {1}{n}}\\sum _{i=1}^{n}x_{i}^{2}}}={\\sqrt {{\\frac {1}{n(n-2)}}\\left(\\sum _{i=1}^{n}{\\widehat {\\varepsilon }}_{i}^{\\,2}\\right){\\frac {\\sum _{i=1}^{n}x_{i}^{2}}{\\sum _{i=1}^{n}(x_{i}-{\\bar {x}})^{2}}}}}}\n  The confidence intervals for \u03b1 and \u03b2 give us the general idea where these regression coefficients are most likely to be. For example, in the Okun's law regression shown here the point estimates are\n\n  \n    \n      \n        \n          \n            \n              \u03b1\n              ^\n            \n          \n        \n        =\n        0.859\n        ,\n        \n        \n          \n            \n              \u03b2\n              ^\n            \n          \n        \n        =\n        \u2212\n        1.817.\n      \n    \n    {\\displaystyle {\\widehat {\\alpha }}=0.859,\\qquad {\\widehat {\\beta }}=-1.817.}\n  The 95% confidence intervals for these estimates are\n\n  \n    \n      \n        \u03b1\n        \u2208\n        \n          [\n          \n            \n            0.76\n            ,\n            0.96\n          \n          ]\n        \n        ,\n        \n        \u03b2\n        \u2208\n        \n          [\n          \n            \u2212\n            2.06\n            ,\n            \u2212\n            1.58\n            \n          \n          ]\n        \n        .\n      \n    \n    {\\displaystyle \\alpha \\in \\left[\\,0.76,0.96\\right],\\qquad \\beta \\in \\left[-2.06,-1.58\\,\\right].}\n  In order to represent this information graphically, in the form of the confidence bands around the regression line, one has to proceed carefully and account for the joint distribution of the estimators. It can be shown that at confidence level (1 \u2212 \u03b3) the confidence band has hyperbolic form given by the equation\n\n  \n    \n      \n        (\n        \u03b1\n        +\n        \u03b2\n        \u03be\n        )\n        \u2208\n        \n          [\n          \n            \n            \n              \n                \n                  \u03b1\n                  ^\n                \n              \n            \n            +\n            \n              \n                \n                  \u03b2\n                  ^\n                \n              \n            \n            \u03be\n            \u00b1\n            \n              t\n              \n                n\n                \u2212\n                2\n              \n              \n                \u2217\n              \n            \n            \n              \n                \n                  (\n                  \n                    \n                      \n                        1\n                        \n                          n\n                          \u2212\n                          2\n                        \n                      \n                    \n                    \u2211\n                    \n                      \n                        \n                          \n                            \u03b5\n                            ^\n                          \n                        \n                      \n                      \n                        i\n                      \n                      \n                        \n                        2\n                      \n                    \n                  \n                  )\n                \n                \u22c5\n                \n                  (\n                  \n                    \n                      \n                        1\n                        n\n                      \n                    \n                    +\n                    \n                      \n                        \n                          (\n                          \u03be\n                          \u2212\n                          \n                            \n                              \n                                x\n                                \u00af\n                              \n                            \n                          \n                          \n                            )\n                            \n                              2\n                            \n                          \n                        \n                        \n                          \u2211\n                          (\n                          \n                            x\n                            \n                              i\n                            \n                          \n                          \u2212\n                          \n                            \n                              \n                                x\n                                \u00af\n                              \n                            \n                          \n                          \n                            )\n                            \n                              2\n                            \n                          \n                        \n                      \n                    \n                  \n                  )\n                \n              \n            \n            \n          \n          ]\n        \n        .\n      \n    \n    {\\displaystyle (\\alpha +\\beta \\xi )\\in \\left[\\,{\\widehat {\\alpha }}+{\\widehat {\\beta }}\\xi \\pm t_{n-2}^{*}{\\sqrt {\\left({\\frac {1}{n-2}}\\sum {\\widehat {\\varepsilon }}_{i}^{\\,2}\\right)\\cdot \\left({\\frac {1}{n}}+{\\frac {(\\xi -{\\bar {x}})^{2}}{\\sum (x_{i}-{\\bar {x}})^{2}}}\\right)}}\\,\\right].}\n  When the model assumed the intercept is fixed and equal to 0 (\n  \n    \n      \n        \u03b1\n        =\n        0\n      \n    \n    {\\displaystyle \\alpha =0}\n  ), the standard error of the slope turns into:\n\n  \n    \n      \n        \n          s\n          \n            \n              \n                \u03b2\n                ^\n              \n            \n          \n        \n        =\n        \n          \n            \n              \n                1\n                \n                  n\n                  \u2212\n                  1\n                \n              \n            \n            \n              \n                \n                  \n                    \u2211\n                    \n                      i\n                      =\n                      1\n                    \n                    \n                      n\n                    \n                  \n                  \n                    \n                      \n                        \n                          \u03b5\n                          ^\n                        \n                      \n                    \n                    \n                      i\n                    \n                    \n                      \n                      2\n                    \n                  \n                \n                \n                  \n                    \u2211\n                    \n                      i\n                      =\n                      1\n                    \n                    \n                      n\n                    \n                  \n                  \n                    x\n                    \n                      i\n                    \n                    \n                      2\n                    \n                  \n                \n              \n            \n          \n        \n      \n    \n    {\\displaystyle s_{\\widehat {\\beta }}={\\sqrt {{\\frac {1}{n-1}}{\\frac {\\sum _{i=1}^{n}{\\widehat {\\varepsilon }}_{i}^{\\,2}}{\\sum _{i=1}^{n}x_{i}^{2}}}}}}\n  With: \n  \n    \n      \n        \n          \n            \n              \n                \u03b5\n                ^\n              \n            \n          \n          \n            i\n          \n        \n        =\n        \n          y\n          \n            i\n          \n        \n        \u2212\n        \n          \n            \n              \n                y\n                ^\n              \n            \n          \n          \n            i\n          \n        \n      \n    \n    {\\displaystyle {\\hat {\\varepsilon }}_{i}=y_{i}-{\\hat {y}}_{i}}\n  \n\n\n==== Asymptotic assumption ====\nThe alternative second assumption states that when the number of points in the dataset is \"large enough\", the law of large numbers and the central limit theorem become applicable, and then the distribution of the estimators is approximately normal. Under this assumption all formulas derived in the previous section remain valid, with the only exception that the quantile t*n\u22122 of Student's t distribution is replaced with the quantile q* of the standard normal distribution. Occasionally the fraction 1/n\u22122 is replaced with 1/n. When n is large such a change does not alter the results appreciably.\n\n\n== Numerical example ==\n\nThis data set gives average masses for women as a function of their height in a sample of American women of age 30\u201339. Although the OLS article argues that it would be more appropriate to run a quadratic regression for this data, the simple linear regression model is applied here instead.\n\nThere are n = 15 points in this data set. Hand calculations would be started by finding the following five sums:\n\n  \n    \n      \n        \n          \n            \n              \n                \n                  S\n                  \n                    x\n                  \n                \n              \n              \n                \n                =\n                \u2211\n                \n                  x\n                  \n                    i\n                  \n                \n                \n                =\n                24.76\n                ,\n                \n                \n                  S\n                  \n                    y\n                  \n                \n                =\n                \u2211\n                \n                  y\n                  \n                    i\n                  \n                \n                \n                =\n                931.17\n                ,\n              \n            \n            \n              \n                \n                  S\n                  \n                    x\n                    x\n                  \n                \n              \n              \n                \n                =\n                \u2211\n                \n                  x\n                  \n                    i\n                  \n                  \n                    2\n                  \n                \n                =\n                41.0532\n                ,\n                \n                \n                \n                \n                  S\n                  \n                    y\n                    y\n                  \n                \n                =\n                \u2211\n                \n                  y\n                  \n                    i\n                  \n                  \n                    2\n                  \n                \n                =\n                58498.5439\n                ,\n              \n            \n            \n              \n                \n                  S\n                  \n                    x\n                    y\n                  \n                \n              \n              \n                \n                =\n                \u2211\n                \n                  x\n                  \n                    i\n                  \n                \n                \n                  y\n                  \n                    i\n                  \n                \n                =\n                1548.2453\n              \n            \n          \n        \n      \n    \n    {\\displaystyle {\\begin{aligned}S_{x}&=\\sum x_{i}\\,=24.76,\\qquad S_{y}=\\sum y_{i}\\,=931.17,\\\\[5pt]S_{xx}&=\\sum x_{i}^{2}=41.0532,\\;\\;\\,S_{yy}=\\sum y_{i}^{2}=58498.5439,\\\\[5pt]S_{xy}&=\\sum x_{i}y_{i}=1548.2453\\end{aligned}}}\n  These quantities would be used to calculate the estimates of the regression coefficients, and their standard errors.\n\n  \n    \n      \n        \n          \n            \n              \n                \n                  \n                    \n                      \u03b2\n                      ^\n                    \n                  \n                \n              \n              \n                \n                =\n                \n                  \n                    \n                      n\n                      \n                        S\n                        \n                          x\n                          y\n                        \n                      \n                      \u2212\n                      \n                        S\n                        \n                          x\n                        \n                      \n                      \n                        S\n                        \n                          y\n                        \n                      \n                    \n                    \n                      n\n                      \n                        S\n                        \n                          x\n                          x\n                        \n                      \n                      \u2212\n                      \n                        S\n                        \n                          x\n                        \n                        \n                          2\n                        \n                      \n                    \n                  \n                \n                =\n                61.272\n              \n            \n            \n              \n                \n                  \n                    \n                      \u03b1\n                      ^\n                    \n                  \n                \n              \n              \n                \n                =\n                \n                  \n                    1\n                    n\n                  \n                \n                \n                  S\n                  \n                    y\n                  \n                \n                \u2212\n                \n                  \n                    \n                      \u03b2\n                      ^\n                    \n                  \n                \n                \n                  \n                    1\n                    n\n                  \n                \n                \n                  S\n                  \n                    x\n                  \n                \n                =\n                \u2212\n                39.062\n              \n            \n            \n              \n                \n                  s\n                  \n                    \u03b5\n                  \n                  \n                    2\n                  \n                \n              \n              \n                \n                =\n                \n                  \n                    1\n                    \n                      n\n                      (\n                      n\n                      \u2212\n                      2\n                      )\n                    \n                  \n                \n                \n                  [\n                  \n                    n\n                    \n                      S\n                      \n                        y\n                        y\n                      \n                    \n                    \u2212\n                    \n                      S\n                      \n                        y\n                      \n                      \n                        2\n                      \n                    \n                    \u2212\n                    \n                      \n                        \n                          \n                            \u03b2\n                            ^\n                          \n                        \n                      \n                      \n                        2\n                      \n                    \n                    (\n                    n\n                    \n                      S\n                      \n                        x\n                        x\n                      \n                    \n                    \u2212\n                    \n                      S\n                      \n                        x\n                      \n                      \n                        2\n                      \n                    \n                    )\n                  \n                  ]\n                \n                =\n                0.5762\n              \n            \n            \n              \n                \n                  s\n                  \n                    \n                      \n                        \u03b2\n                        ^\n                      \n                    \n                  \n                  \n                    2\n                  \n                \n              \n              \n                \n                =\n                \n                  \n                    \n                      n\n                      \n                        s\n                        \n                          \u03b5\n                        \n                        \n                          2\n                        \n                      \n                    \n                    \n                      n\n                      \n                        S\n                        \n                          x\n                          x\n                        \n                      \n                      \u2212\n                      \n                        S\n                        \n                          x\n                        \n                        \n                          2\n                        \n                      \n                    \n                  \n                \n                =\n                3.1539\n              \n            \n            \n              \n                \n                  s\n                  \n                    \n                      \n                        \u03b1\n                        ^\n                      \n                    \n                  \n                  \n                    2\n                  \n                \n              \n              \n                \n                =\n                \n                  s\n                  \n                    \n                      \n                        \u03b2\n                        ^\n                      \n                    \n                  \n                  \n                    2\n                  \n                \n                \n                  \n                    1\n                    n\n                  \n                \n                \n                  S\n                  \n                    x\n                    x\n                  \n                \n                =\n                8.63185\n              \n            \n          \n        \n      \n    \n    {\\displaystyle {\\begin{aligned}{\\widehat {\\beta }}&={\\frac {nS_{xy}-S_{x}S_{y}}{nS_{xx}-S_{x}^{2}}}=61.272\\\\[8pt]{\\widehat {\\alpha }}&={\\frac {1}{n}}S_{y}-{\\widehat {\\beta }}{\\frac {1}{n}}S_{x}=-39.062\\\\[8pt]s_{\\varepsilon }^{2}&={\\frac {1}{n(n-2)}}\\left[nS_{yy}-S_{y}^{2}-{\\widehat {\\beta }}^{2}(nS_{xx}-S_{x}^{2})\\right]=0.5762\\\\[8pt]s_{\\widehat {\\beta }}^{2}&={\\frac {ns_{\\varepsilon }^{2}}{nS_{xx}-S_{x}^{2}}}=3.1539\\\\[8pt]s_{\\widehat {\\alpha }}^{2}&=s_{\\widehat {\\beta }}^{2}{\\frac {1}{n}}S_{xx}=8.63185\\end{aligned}}}\n  The 0.975 quantile of Student's t-distribution with 13 degrees of freedom is t*13 = 2.1604, and thus the 95% confidence intervals for \u03b1 and \u03b2 are\n\n  \n    \n      \n        \n          \n            \n              \n              \n                \u03b1\n                \u2208\n                [\n                \n                \n                  \n                    \n                      \u03b1\n                      ^\n                    \n                  \n                \n                \u2213\n                \n                  t\n                  \n                    13\n                  \n                  \n                    \u2217\n                  \n                \n                \n                  s\n                  \n                    \u03b1\n                  \n                \n                \n                ]\n                =\n                [\n                \n                \n                  \u2212\n                  45.4\n                \n                ,\n                 \n                \n                  \u2212\n                  32.7\n                \n                \n                ]\n              \n            \n            \n              \n              \n                \u03b2\n                \u2208\n                [\n                \n                \n                  \n                    \n                      \u03b2\n                      ^\n                    \n                  \n                \n                \u2213\n                \n                  t\n                  \n                    13\n                  \n                  \n                    \u2217\n                  \n                \n                \n                  s\n                  \n                    \u03b2\n                  \n                \n                \n                ]\n                =\n                [\n                \n                57.4\n                ,\n                 \n                65.1\n                \n                ]\n              \n            \n          \n        \n      \n    \n    {\\displaystyle {\\begin{aligned}&\\alpha \\in [\\,{\\widehat {\\alpha }}\\mp t_{13}^{*}s_{\\alpha }\\,]=[\\,{-45.4},\\ {-32.7}\\,]\\\\[5pt]&\\beta \\in [\\,{\\widehat {\\beta }}\\mp t_{13}^{*}s_{\\beta }\\,]=[\\,57.4,\\ 65.1\\,]\\end{aligned}}}\n  The product-moment correlation coefficient might also be calculated:\n\n  \n    \n      \n        \n          \n            \n              r\n              ^\n            \n          \n        \n        =\n        \n          \n            \n              n\n              \n                S\n                \n                  x\n                  y\n                \n              \n              \u2212\n              \n                S\n                \n                  x\n                \n              \n              \n                S\n                \n                  y\n                \n              \n            \n            \n              (\n              n\n              \n                S\n                \n                  x\n                  x\n                \n              \n              \u2212\n              \n                S\n                \n                  x\n                \n                \n                  2\n                \n              \n              )\n              (\n              n\n              \n                S\n                \n                  y\n                  y\n                \n              \n              \u2212\n              \n                S\n                \n                  y\n                \n                \n                  2\n                \n              \n              )\n            \n          \n        \n        =\n        0.9946\n      \n    \n    {\\displaystyle {\\widehat {r}}={\\frac {nS_{xy}-S_{x}S_{y}}{\\sqrt {(nS_{xx}-S_{x}^{2})(nS_{yy}-S_{y}^{2})}}}=0.9946}\n  \n\n\n== Alternatives ==\nIn SLR, there is an underlying assumption that only the dependent variable contains measurement error; if the explanatory variable is also measured with error, then simple regression is not appropriate for estimating the underlying relationship because it will be biased due to regression dilution. \nOther estimation methods that can be used in place of ordinary least squares include least absolute deviations (minimizing the sum of absolute values of residuals) and the Theil\u2013Sen estimator (which chooses a line whose slope is the median of the slopes determined by pairs of sample points). \nDeming regression (total least squares) also finds a line that fits a set of two-dimensional sample points, but (unlike ordinary least squares, least absolute deviations, and median slope regression) it is not really an instance of simple linear regression, because it does not separate the coordinates into one dependent and one independent variable and could potentially return a vertical line as its fit. can lead to a model that attempts to fit the outliers more than the data.\n\n\n=== Line fitting ===\n\n\n=== Simple linear regression without the intercept term (single regressor) ===\nSometimes it is appropriate to force the regression line to pass through the origin, because x and y are assumed to be proportional. For the model without the intercept term, y = \u03b2x, the OLS estimator for \u03b2 simplifies to\n\n  \n    \n      \n        \n          \n            \n              \u03b2\n              ^\n            \n          \n        \n        =\n        \n          \n            \n              \n                \u2211\n                \n                  i\n                  =\n                  1\n                \n                \n                  n\n                \n              \n              \n                x\n                \n                  i\n                \n              \n              \n                y\n                \n                  i\n                \n              \n            \n            \n              \n                \u2211\n                \n                  i\n                  =\n                  1\n                \n                \n                  n\n                \n              \n              \n                x\n                \n                  i\n                \n                \n                  2\n                \n              \n            \n          \n        \n        =\n        \n          \n            \n              \n                x\n                y\n              \n              \u00af\n            \n            \n              \n                x\n                \n                  2\n                \n              \n              \u00af\n            \n          \n        \n      \n    \n    {\\displaystyle {\\widehat {\\beta }}={\\frac {\\sum _{i=1}^{n}x_{i}y_{i}}{\\sum _{i=1}^{n}x_{i}^{2}}}={\\frac {\\overline {xy}}{\\overline {x^{2}}}}}\n  Substituting (x \u2212 h, y \u2212 k) in place of (x, y) gives the regression through (h, k):\n\n  \n    \n      \n        \n          \n            \n              \n                \n                  \n                    \n                      \u03b2\n                      ^\n                    \n                  \n                \n              \n              \n                \n                =\n                \n                  \n                    \n                      \n                        \u2211\n                        \n                          i\n                          =\n                          1\n                        \n                        \n                          n\n                        \n                      \n                      (\n                      \n                        x\n                        \n                          i\n                        \n                      \n                      \u2212\n                      h\n                      )\n                      (\n                      \n                        y\n                        \n                          i\n                        \n                      \n                      \u2212\n                      k\n                      )\n                    \n                    \n                      \n                        \u2211\n                        \n                          i\n                          =\n                          1\n                        \n                        \n                          n\n                        \n                      \n                      (\n                      \n                        x\n                        \n                          i\n                        \n                      \n                      \u2212\n                      h\n                      \n                        )\n                        \n                          2\n                        \n                      \n                    \n                  \n                \n                =\n                \n                  \n                    \n                      \n                        (\n                        x\n                        \u2212\n                        h\n                        )\n                        (\n                        y\n                        \u2212\n                        k\n                        )\n                      \n                      \u00af\n                    \n                    \n                      \n                        (\n                        x\n                        \u2212\n                        h\n                        \n                          )\n                          \n                            2\n                          \n                        \n                      \n                      \u00af\n                    \n                  \n                \n              \n            \n            \n              \n              \n                \n                =\n                \n                  \n                    \n                      \n                        \n                          \n                            x\n                            y\n                          \n                          \u00af\n                        \n                      \n                      \u2212\n                      k\n                      \n                        \n                          \n                            x\n                            \u00af\n                          \n                        \n                      \n                      \u2212\n                      h\n                      \n                        \n                          \n                            y\n                            \u00af\n                          \n                        \n                      \n                      +\n                      h\n                      k\n                    \n                    \n                      \n                        \n                          \n                            x\n                            \n                              2\n                            \n                          \n                          \u00af\n                        \n                      \n                      \u2212\n                      2\n                      h\n                      \n                        \n                          \n                            x\n                            \u00af\n                          \n                        \n                      \n                      +\n                      \n                        h\n                        \n                          2\n                        \n                      \n                    \n                  \n                \n              \n            \n            \n              \n              \n                \n                =\n                \n                  \n                    \n                      \n                        \n                          \n                            x\n                            y\n                          \n                          \u00af\n                        \n                      \n                      \u2212\n                      \n                        \n                          \n                            x\n                            \u00af\n                          \n                        \n                      \n                      \n                        \n                          \n                            y\n                            \u00af\n                          \n                        \n                      \n                      +\n                      (\n                      \n                        \n                          \n                            x\n                            \u00af\n                          \n                        \n                      \n                      \u2212\n                      h\n                      )\n                      (\n                      \n                        \n                          \n                            y\n                            \u00af\n                          \n                        \n                      \n                      \u2212\n                      k\n                      )\n                    \n                    \n                      \n                        \n                          \n                            x\n                            \n                              2\n                            \n                          \n                          \u00af\n                        \n                      \n                      \u2212\n                      \n                        \n                          \n                            \n                              x\n                              \u00af\n                            \n                          \n                        \n                        \n                          2\n                        \n                      \n                      +\n                      (\n                      \n                        \n                          \n                            x\n                            \u00af\n                          \n                        \n                      \n                      \u2212\n                      h\n                      \n                        )\n                        \n                          2\n                        \n                      \n                    \n                  \n                \n              \n            \n            \n              \n              \n                \n                =\n                \n                  \n                    \n                      Cov\n                      \u2061\n                      (\n                      x\n                      ,\n                      y\n                      )\n                      +\n                      (\n                      \n                        \n                          \n                            x\n                            \u00af\n                          \n                        \n                      \n                      \u2212\n                      h\n                      )\n                      (\n                      \n                        \n                          \n                            y\n                            \u00af\n                          \n                        \n                      \n                      \u2212\n                      k\n                      )\n                    \n                    \n                      Var\n                      \u2061\n                      (\n                      x\n                      )\n                      +\n                      (\n                      \n                        \n                          \n                            x\n                            \u00af\n                          \n                        \n                      \n                      \u2212\n                      h\n                      \n                        )\n                        \n                          2\n                        \n                      \n                    \n                  \n                \n                ,\n              \n            \n          \n        \n      \n    \n    {\\displaystyle {\\begin{aligned}{\\widehat {\\beta }}&={\\frac {\\sum _{i=1}^{n}(x_{i}-h)(y_{i}-k)}{\\sum _{i=1}^{n}(x_{i}-h)^{2}}}={\\frac {\\overline {(x-h)(y-k)}}{\\overline {(x-h)^{2}}}}\\\\[6pt]&={\\frac {{\\overline {xy}}-k{\\bar {x}}-h{\\bar {y}}+hk}{{\\overline {x^{2}}}-2h{\\bar {x}}+h^{2}}}\\\\[6pt]&={\\frac {{\\overline {xy}}-{\\bar {x}}{\\bar {y}}+({\\bar {x}}-h)({\\bar {y}}-k)}{{\\overline {x^{2}}}-{\\bar {x}}^{2}+({\\bar {x}}-h)^{2}}}\\\\[6pt]&={\\frac {\\operatorname {Cov} (x,y)+({\\bar {x}}-h)({\\bar {y}}-k)}{\\operatorname {Var} (x)+({\\bar {x}}-h)^{2}}},\\end{aligned}}}\n  where Cov and Var refer to the covariance and variance of the sample data (uncorrected for bias).\nThe last form above demonstrates how moving the line away from the center of mass of the data points affects the slope.\n\n\n\n\n\n                           Answer: \n\n"}, {"role": "assistant", "content": "\ufeffLinear regression plays an important role in the subfield of artificial intelligence known as machine learning. The linear regression algorithm is one of the fundamental supervised machine-learning algorithms due to its relative simplicity and well-known properties. Linear regression can be used to fit a predictive model to an observed data set of values of the response and explanatory variables. \n\nThis video introduces linear regression as the first learning algorithm, showcasing its process in supervised learning. In supervised learning, we are training a model using a dataset such that each example of the data is given the \u201cright answer\u201d to find the function that we want to discover. \n\nFor example, suppose your friend is looking to sell their house and looking to see how much their house is worth. What they have is a dataset consisting of labeled pairs of the sizes of houses and its associated price. A supervised learning algorithm will learn from these pairs and will try to learn a mapping from the sizes of a house to the price of a house from the dataset. The model can then be used to predict the value of your friend\u2019s house based on the size of their house.\n\nThis problem is also known as a regression problem, as the term regression refers to the fact that we are trying to predict real-valued output.\n\nIn supervised learning, we have a training set (in this example, it is the set of the prices of the house) and our job is to learn from this data how to predict the outputs (the house prices). For this, we are going to introduce some notation:\n* \u201cm\u201d will refer to the number of training examples\n* \u201cx\u201d will refer to an input variables/features\n* \u201cy\u201d will refer to the output/target variables\n* (x, y) will refer to a single training example (input/output pair)\n* (x(i), y(i)) will refer to the i-th specific training example\n\nIn supervised learning, we start off with a training set and we feed that to our learning algorithm. It is the job of the learning algorithm to then output a function which by convection is usually denoted \u201ch\u201d where \u201ch\u201d stands for hypothesis. The hypothesis is a function, in the housing example, is to take the size of the house(x) and try to output the estimated value (y). In summary, \u201ch\u201d is a function that maps x\u2019s to y\u2019s. \n\nIn linear regression, the hypothesis function is assumed to be a linear relationship between X and Y. We can represent this relationship as function h(x) = \u03980 + \u03981 * x, where \u03980 and \u03981 are parameters learned by the learning algorithm. Linear regression with one variable is also known as simple linear regression or univariate linear regression.\n"}]}
{"messages": [{"role": "system", "content": "\n                      Please write a 500 word summary on the following Transcript based on the Reading Material.\n                      Pick relevant information from the Reading Material and add it to the summary of the Transcript.\n                      The Summary should be only of the Transcript with a few information from the Reading Material.\n                      If you are not sure of the summary, say 'I don't know'.\n    "}, {"role": "user", "content": "Transcript: Hi, I'm Carrie Anne and welcome to Crash Course Computer Science. Over the last few episodes, We've talked a lot about the mechanics of how computers work. How they use complex circuits to save and retrieve values from memory, and perform operations on those values, like adding two numbers together. We've even briefly talked about sequences of operations, which is a computer program. What we haven't talked about is how a program gets into a computer. You might remember in episode 7 and 8 , when we stepped through some simple example programs for the CPU that we had created. For simplicity, we just waved our hands and said that the program was already magically in memory. But in reality, programs have to be loaded into a computer's memory. It's not magic. It's computer science. [Theme Music] The need to programme machines existed way before the development of computers. The most famous example of this was in textile manufacturing. if you just wanted to weave a big red tablecloth, you could simply feed red thread into a loom and let it run. But what about if you wanted the cloth to have a pattern like stripes or plaid? Workers would have to periodically reconfigure the loom as dictated by the pattern, but this was labor intensive which made patterned fabrics expensive. In response, Joseph Marie Jacquard developed a programmable textile loom, which he first demonstrated in 1801. The pattern for each row of the cloth was defined by a punched card. The presence or absence of a hole in the card determined if a specific threat was held high or low in the loom. Such that the cross thread called the weft passed above or below the thread. To vary the pattern across rows these punch cards were arranged in long chains, forming a sequence of commands for the loom. Sound familiar? Many consider Jacquard's loom to be one of the earliest forms of programming. Punched cards, turned out to be a cheap , reliable, fairly human readable way to store data. Nearly a century later, punch cards were use to help tabulate the 1890 newest census which we talked about in episode 1. Each card held an individual person's data. Things like race, marital status, number of children, country of birth, and so on. For each demographic question, a census worker would punch out a hole of the appropriate position. When a card was fed into the tabulating machine, a hole would cause the running total for that specific answer to be increased by one. In this way you could feed the entire county's worth of people and at the end you'd have running totals for all of the questions that you asked. It is important to note here that early tabulating machines were not truly computers as they can only do one thing-tabulate. Their operation was fixed and not programmable. Punished cards stored data, but not a program. Over the next 60 years, these business machines grew in capability, adding features to subtract, multiply, divide, and even make simple decisions about when to perform certain operations. To trigger these functions appropriately, so that different calculations could be performed, a programmer accessed a control panel. This panel was full of little sockets, into which a programmer would plug cables to pass values and signals between different parts of the machine. For this reason they were also called plug boards. Unfortunately, this meant having to rewire the machine each time a different program needed to be run. And so by the 1920s, these plug boards were made swappable. This not only made programming a lot more comfortable, but also allowed for different programs to be plugged into a machine. For example, one board might be wired to calculate sales tax, while another helps with payroll. But plug boards were fiendishly complicated to program. This tangle of wires is a program for calculating a profit loss summary, using an IBM 402 accounting machine, which were popular in the 1940s. And this style of plug board programming wasn't unique to electromechanical computers. The world's first General-Purpose electronic computer, the Eniac, completed in 1946, used a ton of them. Even after a program had been completely figured out on paper, physically wiring up the Eniac and getting the program to run could take upwards of three weeks. Given the enormous cost of these early computers, weeks of downtime simply to switch programs was unacceptable and the new, faster, more flexible way to programme machines was badly needed. Fortunately by the late 1940s and into the 50s, electronic memory was becoming feasible. As costs fell, memory size grew. Instead of storing a program as a physical plug board of wires, it became possible to store a program entirely in a computer's memory. Where it could be easily changed by programmers and quickly accessed by the CPU. These computers were called stored-program computers. With enough computer memory, you could store not only the program you wanted to run, but also any data your program would need. Including new values it created along the way, Unifying the progrmming data into a single shared memory is called the von Neumann architecture. Named after John von Neumann, a prominent mathematician and physicist, who worked on the Manhattan project and several early electronic computers. And once said, \"I'm thinking about something much more important than bombs, I'm thinking about computers\". The hallmarks of a von Neumann computer are a processing unit containing an arithmetic logic unit, data registers, an instruction register, and an instruction address register. And finally, a memory to store both data and instructions. Hopefully, this sounds familiar, because we actually built a von Neumann computer in episode 7. The very first von Neumann architecture stored program computer was constructed in 1948 by the University of Manchester, nicknamed \"Baby\". And even the computer you are watching this video right now uses the same architecture. Now electronic computer memory is great and all, but you still have to load the programming data in to the computer before it can run. And for this reason, punch cards were used. Let's get to the Thought Bubble. Well into the 1980s, almost all computers had a punch card reader. Which could suck in a single punch card at a time and write the contents of the card into the computer's memory. If you loaded in a stack of punch cards, the reader would load them all into memory sequentially, as a big block. Once the programming data were in memory, the computer would be told to execute it. Of course, even simple computer programs might have hundreds of instructions, which meant that programs were stored as stacks of punch cards. So if you ever have the misfortune of accidentally dropping your program on the floor, it could take you hours, days, or even weeks to put the code back in the right order. A common trick was to draw a diagonal line on the side of the card stack called striping, so you'd have at least some clue how to get it back into the right order. The largest program ever punched into punch cards was the US Air Force's sage air defense system, completed in 1955. At its peak, the product is said to have employed 20% of the world's programmers. Its main control program was stored on a whopping 62,500 punch cards, which is equivalent to roughly 5 megabytes of data. Pretty underwhelming by today's standards. And punch cards weren't only useful for getting data into computers, but also getting data out of them. At the end of a program, results could be written out of computer memory and onto punch cards by, well, punching cards. Then this data could be analyzed by humans or loaded into a second program for additional computation. Thanks, Thought Bubble. A close cousin to punch cards was punched paper tape, which is basically the same idea, but continuously instead of being on individual cards. And of course, we haven't talked about hard drives, CD-Roms, DVDs, USB thumb drives, and other similar goodies. We'll get to those more advanced types of data storage in a future episode. Finally, in addition to plug boards and punch paper, there was another common way to program and control computers pre-1980: panel programming. Rather than having to physically plug in cables to activate certain functions, this could also be done with huge panels full of switches and buttons. And there were indicator lights to display the status of various functions and values in memory. Computers of the 50s and 60s often featured huge control consoles that look like this. Although it was rare to input a whole program using just switches, it was possible. And early home computers made for the hobbyist market used switches extensively, because most home users couldn't afford expensive peripherals like punch card readers. The first commercially successful home computer was the Altair 8800, which sold in two versions: preassembled and as a kit. The kit, which was popular with amateur computing enthusiasts, sold for the then unprecedented low price of around $400 in 1975 or about $2,000 in 2017. To program 8800 you'd literally toggle the switches on the front panel to enter the binary Op codes for the instruction you wanted. Then you press the deposit button to write that value into memory. Then in the next location in memory, you toggle the switches again for your next instruction, deposit it and so on. When you had finally entered your whole program into memory, you would toggle the switches, move back to memory address zero, press the run button, and watch the little lights blink. That was home computing in 1975, wow. Whether it was plug board switches or punched paper Programming these early computers was the realm of experts. Either professionals who did this for a living, or technology enthusiasts. You needed intimate knowledge of the underlying hardware, So things like processor Op codes and register wits to write programs. This meant programming was hard and tedious. And even professional engineers and scientists struggle to take full advantage of what computing could offer. What was needed was a simpler way to tell computers what to do; a simpler way to write programs. And that brings us to programming languages which we'll talk about next episode. See you next week. Crash Course Computer Science is produced in association with PBS Digital Studios. At their channel you can check out a playlist of shows like Braincraft, Coma Niddy and PBS Infinite Series. This episode was filmed at the Chad and Stacey Emigholz studio in Indianapolis, Indiana And it was made with the help of all these nice people and our wonderful graphics team is Thought Cafe. Thanks for the Random Access Memories, I''ll see you next time.\n\n\n                           Reading Material: A programming language is a system of notation for writing computer programs.\nA programming language is described by its syntax (form) and semantics (meaning). It gets its basis from formal languages.A language usually has at least one implementation in the form of a compiler or interpreter, allowing programs written in the language to be executed.\nProgramming language theory is the subfield of computer science that studies the design, implementation, analysis, characterization, and classification of programming languages.\n\n\n== Definitions ==\nThere are many considerations when defining what constitutes a programming language.\n\n\n=== Computer languages vs programming languages ===\nThe term computer language is sometimes used interchangeably with programming language. However, the usage of both terms varies among authors, including the exact scope of each. One usage describes programming languages as a subset of computer languages. Similarly, languages used in computing that have a different goal than expressing computer programs are generically designated computer languages. For instance, markup languages are sometimes referred to as computer languages to emphasize that they are not meant to be used for programming.\nOne way of classifying computer languages is by the computations they are capable of expressing, as described by the theory of computation. The majority of practical programming languages are Turing complete, and all Turing complete languages can implement the same set of algorithms. ANSI/ISO SQL-92 and Charity are examples of languages that are not Turing complete, yet are often called programming languages. However, some authors restrict the term \"programming language\" to Turing complete languages.Another usage regards programming languages as theoretical constructs for programming abstract machines and computer languages as the subset thereof that runs on physical computers, which have finite hardware resources. John C. Reynolds emphasizes that formal specification languages are just as much programming languages as are the languages intended for execution. He also argues that textual and even graphical input formats that affect the behavior of a computer are programming languages, despite the fact they are commonly not Turing-complete, and remarks that ignorance of programming language concepts is the reason for many flaws in input formats.\n\n\n=== Domain and target ===\nIn most practical contexts, a programming language involves a computer; consequently, programming languages are usually defined and studied this way. Programming languages differ from natural languages in that natural languages are only used for interaction between people, while programming languages also allow humans to communicate instructions to machines.\nThe domain of the language is also worth consideration. Markup languages like XML, HTML, or troff, which define structured data, are not usually considered programming languages. Programming languages may, however, share the syntax with markup languages if a computational semantics is defined. XSLT, for example, is a Turing complete language entirely using XML syntax. Moreover, LaTeX, which is mostly used for structuring documents, also contains a Turing complete subset.\n\n\n=== Abstractions ===\nProgramming languages usually contain abstractions for defining and manipulating data structures or controlling the flow of execution. The practical necessity that a programming language supports adequate abstractions is expressed by the abstraction principle. This principle is sometimes formulated as a recommendation to the programmer to make proper use of such abstractions.\n\n\n== History ==\n\n\n=== Early developments ===\nVery early computers, such as Colossus, were programmed without the help of a stored program, by modifying their circuitry or setting banks of physical controls.\nSlightly later, programs could be written in machine language, where the programmer writes each instruction in a numeric form the hardware can execute directly. For example, the instruction to add the value in two memory locations might consist of 3 numbers: an \"opcode\" that selects the \"add\" operation, and two memory locations. The programs, in decimal or binary form, were read in from punched cards, paper tape, magnetic tape or toggled in on switches on the front panel of the computer. Machine languages were later termed first-generation programming languages (1GL).\nThe next step was the development of the so-called second-generation programming languages (2GL) or assembly languages, which were still closely tied to the instruction set architecture of the specific computer. These served to make the program much more human-readable and relieved the programmer of tedious and error-prone address calculations.\nThe first high-level programming languages, or third-generation programming languages (3GL), were written in the 1950s. An early high-level programming language to be designed for a computer was Plankalk\u00fcl, developed for the German Z3 by Konrad Zuse between 1943 and 1945. However, it was not implemented until 1998 and 2000.John Mauchly's Short Code, proposed in 1949, was one of the first high-level languages ever developed for an electronic computer. Unlike machine code, Short Code statements represented mathematical expressions in an understandable form. However, the program had to be translated into machine code every time it ran, making the process much slower than running the equivalent machine code.\nAt the University of Manchester, Alick Glennie developed Autocode in the early 1950s. As a programming language, it used a compiler to automatically convert the language into machine code. The first code and compiler was developed in 1952 for the Mark 1 computer at the University of Manchester and is considered to be the first compiled high-level programming language.The second auto code was developed for the Mark 1 by R. A. Brooker in 1954 and was called the \"Mark 1 Autocode\". Brooker also developed an auto code for the Ferranti Mercury in the 1950s in conjunction with the University of Manchester. The version for the EDSAC 2 was devised by D. F. Hartley of University of Cambridge Mathematical Laboratory in 1961. Known as EDSAC 2 Autocode, it was a straight development from Mercury Autocode adapted for local circumstances and was noted for its object code optimization and source-language diagnostics which were advanced for the time. A contemporary but separate thread of development, Atlas Autocode was developed for the University of Manchester Atlas 1 machine.\nIn 1954, FORTRAN was invented at IBM by John Backus. It was the first widely used high-level general-purpose programming language to have a functional implementation, as opposed to just a design on paper. It is still a popular language for high-performance computing and is used for programs that benchmark and rank the world's fastest supercomputers.Another early programming language was devised by Grace Hopper in the US, called FLOW-MATIC. It was developed for the UNIVAC I at Remington Rand during the period from 1955 until 1959. Hopper found that business data processing customers were uncomfortable with mathematical notation, and in early 1955, she and her team wrote a specification for an English programming language and implemented a prototype. The FLOW-MATIC compiler became publicly available in early 1958 and was substantially complete in 1959. FLOW-MATIC was a major influence in the design of COBOL, since only it and its direct descendant AIMACO were in actual use at the time.\n\n\n=== Refinement ===\nThe increased use of high-level languages introduced a requirement for low-level programming languages or system programming languages. These languages, to varying degrees, provide facilities between assembly languages and high-level languages. They can be used to perform tasks that require direct access to hardware facilities but still provide higher-level control structures and error-checking.\nThe period from the 1960s to the late 1970s brought the development of the major language paradigms now in use:\n\nAPL introduced array programming and influenced functional programming.\nALGOL refined both structured procedural programming and the discipline of language specification; the \"Revised Report on the Algorithmic Language ALGOL 60\" became a model for how later language specifications were written.\nLisp, implemented in 1958, was the first dynamically-typed functional programming language.\nIn the 1960s, Simula was the first language designed to support object-oriented programming; in the mid-1970s, Smalltalk followed with the first \"purely\" object-oriented language.\nC was developed between 1969 and 1973 as a system programming language for the Unix operating system and remains popular.\nProlog, designed in 1972, was the first logic programming language.\nIn 1978, ML built a polymorphic type system on top of Lisp, pioneering statically-typed functional programming languages.Each of these languages spawned descendants, and most modern programming languages count at least one of them in their ancestry.\nThe 1960s and 1970s also saw considerable debate over the merits of structured programming, and whether programming languages should be designed to support it. Edsger Dijkstra, in a famous 1968 letter published in the Communications of the ACM, argued that Goto statements should be eliminated from all \"higher-level\" programming languages.\n\n\n=== Consolidation and growth ===\nThe 1980s were years of relative consolidation. C++ combined object-oriented and systems programming. The United States government standardized Ada, a systems programming language derived from Pascal and intended for use by defense contractors. In Japan and elsewhere, vast sums were spent investigating the so-called \"fifth-generation\" languages that incorporated logic programming constructs. The functional languages community moved to standardize ML and Lisp. Rather than inventing new paradigms, all of these movements elaborated upon the ideas invented in the previous decades.\nOne important trend in language design for programming large-scale systems during the 1980s was an increased focus on the use of modules or large-scale organizational units of code. Modula-2, Ada, and ML all developed notable module systems in the 1980s, which were often wedded to generic programming constructs.The rapid growth of the Internet in the mid-1990s created opportunities for new languages. Perl, originally a Unix scripting tool first released in 1987, became common in dynamic websites. Java came to be used for server-side programming, and bytecode virtual machines became popular again in commercial settings with their promise of \"Write once, run anywhere\" (UCSD Pascal had been popular for a time in the early 1980s). These developments were not fundamentally novel; rather, they were refinements of many existing languages and paradigms (although their syntax was often based on the C family of programming languages).\nProgramming language evolution continues, in both industry and research. Current directions include security and reliability verification, new kinds of modularity (mixins, delegates, aspects), and database integration such as Microsoft's LINQ.\nFourth-generation programming languages (4GL) are computer programming languages that aim to provide a higher level of abstraction of the internal computer hardware details than 3GLs. Fifth-generation programming languages (5GL) are programming languages based on solving problems using constraints given to the program, rather than using an algorithm written by a programmer.\n\n\n== Elements ==\nAll programming languages have some primitive building blocks for the description of data and the processes or transformations applied to them (like the addition of two numbers or the selection of an item from a collection). These primitives are defined by syntactic and semantic rules which describe their structure and meaning respectively.\n\n\n=== Syntax ===\n\nA programming language's surface form is known as its syntax. Most programming languages are purely textual; they use sequences of text including words, numbers, and punctuation, much like written natural languages. On the other hand, some programming languages are more graphical in nature, using visual relationships between symbols to specify a program.\nThe syntax of a language describes the possible combinations of symbols that form a syntactically correct program. The meaning given to a combination of symbols is handled by semantics (either formal or hard-coded in a reference implementation). Since most languages are textual, this article discusses textual syntax.\nThe programming language syntax is usually defined using a combination of regular expressions (for lexical structure) and Backus\u2013Naur form (for grammatical structure). Below is a simple grammar, based on Lisp:\n\nThis grammar specifies the following:\n\nan expression is either an atom or a list;\nan atom is either a number or a symbol;\na number is an unbroken sequence of one or more decimal digits, optionally preceded by a plus or minus sign;\na symbol is a letter followed by zero or more of any characters (excluding whitespace); and\na list is a matched pair of parentheses, with zero or more expressions inside it.The following are examples of well-formed token sequences in this grammar: 12345, () and (a b c232 (1)).\nNot all syntactically correct programs are semantically correct. Many syntactically correct programs are nonetheless ill-formed, per the language's rules; and may (depending on the language specification and the soundness of the implementation) result in an error on translation or execution. In some cases, such programs may exhibit undefined behavior. Even when a program is well-defined within a language, it may still have a meaning that is not intended by the person who wrote it.\nUsing natural language as an example, it may not be possible to assign a meaning to a grammatically correct sentence or the sentence may be false:\n\n\"Colorless green ideas sleep furiously.\" is grammatically well-formed but has no generally accepted meaning.\n\"John is a married bachelor.\" is grammatically well-formed but expresses a meaning that cannot be true.The following C language fragment is syntactically correct, but performs operations that are not semantically defined (the operation *p >> 4 has no meaning for a value having a complex type and p->im is not defined because the value of p is the null pointer):\n\nIf the type declaration on the first line were omitted, the program would trigger an error on the undefined variable p during compilation. However, the program would still be syntactically correct since type declarations provide only semantic information.\nThe grammar needed to specify a programming language can be classified by its position in the Chomsky hierarchy. The syntax of most programming languages can be specified using a Type-2 grammar, i.e., they are context-free grammars. Some languages, including Perl and Lisp, contain constructs that allow execution during the parsing phase. Languages that have constructs that allow the programmer to alter the behavior of the parser make syntax analysis an undecidable problem, and generally blur the distinction between parsing and execution. In contrast to Lisp's macro system and Perl's BEGIN blocks, which may contain general computations, C macros are merely string replacements and do not require code execution.\n\n\n=== Semantics ===\nThe term semantics refers to the meaning of languages, as opposed to their form (syntax).\n\n\n==== Static semantics ====\nStatic semantics defines restrictions on the structure of valid texts that are hard or impossible to express in standard syntactic formalisms. For compiled languages, static semantics essentially include those semantic rules that can be checked at compile time. Examples include checking that every identifier is declared before it is used (in languages that require such declarations) or that the labels on the arms of a case statement are distinct. Many important restrictions of this type, like checking that identifiers are used in the appropriate context (e.g. not adding an integer to a function name), or that subroutine calls have the appropriate number and type of arguments, can be enforced by defining them as rules in a logic called a type system. Other forms of static analyses like data flow analysis may also be part of static semantics. Programming languages such as Java and C# have definite assignment analysis, a form of data flow analysis, as part of their respective static semantics.\n\n\n==== Dynamic semantics ====\n\nOnce data has been specified, the machine must be instructed to perform operations on the data. For example, the semantics may define the strategy by which expressions are evaluated to values, or the manner in which control structures conditionally execute statements. The dynamic semantics (also known as execution semantics) of a language defines how and when the various constructs of a language should produce a program behavior. There are many ways of defining execution semantics. Natural language is often used to specify the execution semantics of languages commonly used in practice. A significant amount of academic research goes into formal semantics of programming languages, which allows execution semantics to be specified in a formal manner. Results from this field of research have seen limited application to programming language design and implementation outside academia.\n\n\n=== Type system ===\n\nA type system defines how a programming language classifies values and expressions into types, how it can manipulate those types and how they interact. The goal of a type system is to verify and usually enforce a certain level of correctness in programs written in that language by detecting certain incorrect operations. Any decidable type system involves a trade-off: while it rejects many incorrect programs, it can also prohibit some correct, albeit unusual programs. In order to bypass this downside, a number of languages have type loopholes, usually unchecked casts that may be used by the programmer to explicitly allow a normally disallowed operation between different types. In most typed languages, the type system is used only to type check programs, but a number of languages, usually functional ones, infer types, relieving the programmer from the need to write type annotations. The formal design and study of type systems is known as type theory.\n\n\n==== Typed versus untyped languages ====\nA language is typed if the specification of every operation defines types of data to which the operation is applicable. For example, the data represented by \"this text between the quotes\" is a string, and in many programming languages, dividing a number by a string has no meaning and will not be executed. The invalid operation may be detected when the program is compiled (\"static\" type checking) and will be rejected by the compiler with a compilation error message, or it may be detected while the program is running (\"dynamic\" type checking), resulting in a run-time exception. Many languages allow a function called an exception handler to handle this exception and, for example, always return \"-1\" as the result.\nA special case of typed languages is the single-typed languages. These are often scripting or markup languages, such as REXX or SGML, and have only one data type\u2013\u2014most commonly character strings which are used for both symbolic and numeric data.\nIn contrast, an untyped language, such as most assembly languages, allows any operation to be performed on any data, generally sequences of bits of various lengths. High-level untyped languages include BCPL, Tcl, and some varieties of Forth.\nIn practice, while few languages are considered typed from the type theory (verifying or rejecting all operations), most modern languages offer a degree of typing. Many production languages provide means to bypass or subvert the type system, trading type safety for finer control over the program's execution (see casting).\n\n\n==== Static vis-\u00e0-vis dynamic typing ====\nIn static typing, all expressions have their types determined before a program executes, typically at compile-time. For example, 1 and (2+2) are integer expressions; they cannot be passed to a function that expects a string or stored in a variable that is defined to hold dates.Statically-typed languages can be either manifestly typed or type-inferred. In the first case, the programmer must explicitly write types at certain textual positions (for example, at variable declarations). In the second case, the compiler infers the types of expressions and declarations based on context. Most mainstream statically-typed languages, such as C++, C#, and Java, are manifestly typed. Complete type inference has traditionally been associated with functional languages such as Haskell and ML. However, many manifestly-typed languages support partial type inference; for example, C++, Java, and C# all infer types in certain limited cases. Additionally, some programming languages allow for some types to be automatically converted to other types; for example, an int can be used where the program expects a float.\nDynamic typing, also called latent typing, determines the type-safety of operations at run time; in other words, types are associated with run-time values rather than textual expressions. As with type-inferred languages, dynamically-typed languages do not require the programmer to write explicit type annotations on expressions. Among other things, this may permit a single variable to refer to values of different types at different points in the program execution. However, type errors cannot be automatically detected until a piece of code is actually executed, potentially making debugging more difficult. Lisp, Smalltalk, Perl, Python, JavaScript, and Ruby are all examples of dynamically-typed languages.\n\n\n==== Weak and strong typing ====\nWeak typing allows a value of one type to be treated as another, for example treating a string as a number. This can occasionally be useful, but it can also allow some kinds of program faults to go undetected at compile time and even at run time.\nStrong typing prevents these program faults. An attempt to perform an operation on the wrong type of value raises an error. Strongly-typed languages are often termed type-safe or safe.\nAn alternative definition for \"weakly typed\" refers to languages, such as Perl and JavaScript, which permit a large number of implicit type conversions. In JavaScript, for example, the expression 2 * x implicitly converts x to a number, and this conversion succeeds even if x is null, undefined, an Array, or a string of letters. Such implicit conversions are often useful, but they can mask programming errors. Strong and static are now generally considered orthogonal concepts, but usage in the literature differs. Some use the term strongly typed to mean strongly, statically typed, or, even more confusingly, to mean simply statically typed. Thus C has been called both strongly typed and weakly, statically typed.It may seem odd to some professional programmers that C could be \"weakly, statically typed\". However, the use of the generic pointer, the void* pointer, does allow casting pointers to other pointers without needing to do an explicit cast. This is extremely similar to somehow casting an array of bytes to any kind of datatype in C without using an explicit cast, such as (int) or (char).\n\n\n=== Standard library and run-time system ===\n\nMost programming languages have an associated core library (sometimes known as the \"standard library\", especially if it is included as part of the published language standard), which is conventionally made available by all implementations of the language. Core libraries typically include definitions for commonly used algorithms, data structures, and mechanisms for input and output.\nThe line between a language and its core library differs from language to language. In some cases, the language designers may treat the library as a separate entity from the language. However, a language's core library is often treated as part of the language by its users, and some language specifications even require that this library be made available in all implementations. Indeed, some languages are designed so that the meanings of certain syntactic constructs cannot even be described without referring to the core library. For example, in Java, a string literal is defined as an instance of the java.lang.String class; similarly, in Smalltalk, an anonymous function expression (a \"block\") constructs an instance of the library's BlockContext class. Conversely, Scheme contains multiple coherent subsets that suffice to construct the rest of the language as library macros, and so the language designers do not even bother to say which portions of the language must be implemented as language constructs, and which must be implemented as parts of a library.\n\n\n=== Concurrency ===\n\nIn computing, multiple instructions can be executed simultaneously. Many programming languages support instruction-level and subprogram-level concurrency. By the twenty-first century, additional processing power on computers was increasingly coming from the use of additional processors, which requires programmers to design software that makes use of multiple processors simultaneously to achieve improved performance. Interpreted languages such as Python and Ruby do not support the concurrent use of multiple processors. Other programming languages do support managing data shared between different threads by controlling the order of execution of key instructions via the use of semaphores, controlling access to shared data via monitor, or enabling message passing between threads.\n\n\n=== Exception handling ===\n\nMany programming languages include exception handlers, a section of code triggered by runtime errors that can deal with them in two main ways:\nTermination: shutting down and handing over control to the operating system. This option is considered the simplest.\nResumption: resuming the program near where the exception occurred. This can trigger a repeat of the exception, unless the exception handler is able to modify values to prevent the exception from reoccurring.Some programming languages support dedicating a block of code to run regardless of whether an exception occurs before the code is reached; this is called finalization.There is a tradeoff between increased ability to handle exceptions and reduced performance. For example, even though array index errors are common C does not check them for performance reasons.  Although programmers can write code to catch user-defined exceptions, this can clutter a program. Standard libraries in some languages, such as C, use their return values to indicate an exception. Some languages and their compilers have the option of turning on and off error handling capability, either temporarily or permanently.\n\n\n== Design and implementation ==\n\nProgramming languages share properties with natural languages related to their purpose as vehicles for communication, having a syntactic form separate from its semantics, and showing language families of related languages branching one from another. But as artificial constructs, they also differ in fundamental ways from languages that have evolved through usage. A significant difference is that a programming language can be fully described and studied in its entirety since it has a precise and finite definition. By contrast, natural languages have changing meanings given by their users in different communities. While constructed languages are also artificial languages designed from the ground up with a specific purpose, they lack the precise and complete semantic definition that a programming language has.\nMany programming languages have been designed from scratch, altered to meet new needs, and combined with other languages. Many have eventually fallen into disuse. Although there have been attempts to design one \"universal\" programming language that serves all purposes, all of them have failed to be generally accepted as filling this role. The need for diverse programming languages arises from the diversity of contexts in which languages are used:\n\nPrograms range from tiny scripts written by individual hobbyists to huge systems written by hundreds of programmers.\nProgrammers range in expertise from novices who need simplicity above all else to experts who may be comfortable with considerable complexity.\nPrograms must balance speed, size, and simplicity on systems ranging from microcontrollers to supercomputers.\nPrograms may be written once and not change for generations, or they may undergo continual modification.\nProgrammers may simply differ in their tastes: they may be accustomed to discussing problems and expressing them in a particular language.One common trend in the development of programming languages has been to add more ability to solve problems using a higher level of abstraction. The earliest programming languages were tied very closely to the underlying hardware of the computer. As new programming languages have developed, features have been added that let programmers express ideas that are more remote from simple translation into underlying hardware instructions. Because programmers are less tied to the complexity of the computer, their programs can do more computing with less effort from the programmer. This lets them write more functionality per time unit.\nNatural-language programming has been proposed as a way to eliminate the need for a specialized language for programming. However, this goal remains distant and its benefits are open to debate. Edsger W. Dijkstra took the position that the use of a formal language is essential to prevent the introduction of meaningless constructs, and dismissed natural-language programming as \"foolish\". Alan Perlis was similarly dismissive of the idea. Hybrid approaches have been taken in Structured English and SQL.\nA language's designers and users must construct a number of artifacts that govern and enable the practice of programming. The most important of these artifacts are the language specification and implementation.\n\n\n=== Specification ===\n\nThe specification of a programming language is an artifact that the language users and the implementors can use to agree upon whether a piece of source code is a valid program in that language, and if so what its behavior shall be.\nA programming language specification can take several forms, including the following:\n\nAn explicit definition of the syntax, static semantics, and execution semantics of the language. While syntax is commonly specified using a formal grammar, semantic definitions may be written in natural language (e.g., as in the C language), or a formal semantics (e.g., as in Standard ML and Scheme specifications).\nA description of the behavior of a translator for the language (e.g., the C++ and Fortran specifications). The syntax and semantics of the language have to be inferred from this description, which may be written in natural or formal language.\nA reference or model implementation, sometimes written in the language being specified (e.g., Prolog or ANSI REXX). The syntax and semantics of the language are explicit in the behavior of the reference implementation.\n\n\n=== Implementation ===\n\nAn implementation of a programming language provides a way to write programs in that language and execute them on one or more configurations of hardware and software. There are, broadly, two approaches to programming language implementation: compilation and interpretation. It is generally possible to implement a language using either technique.\nThe output of a compiler may be executed by hardware or a program called an interpreter. In some implementations that make use of the interpreter approach, there is no distinct boundary between compiling and interpreting. For instance, some implementations of BASIC compile and then execute the source one line at a time.\nPrograms that are executed directly on the hardware usually run much faster than those that are interpreted in software.One technique for improving the performance of interpreted programs is just-in-time compilation. Here the virtual machine, just before execution, translates the blocks of bytecode which are going to be used to machine code, for direct execution on the hardware.\n\n\n== Proprietary languages ==\nAlthough most of the most commonly used programming languages have fully open specifications and implementations, many programming languages exist only as proprietary programming languages with the implementation available only from a single vendor, which may claim that such a proprietary language is their intellectual property. Proprietary programming languages are commonly domain-specific languages or internal scripting languages for a single product; some proprietary languages are used only internally within a vendor, while others are available to external users.Some programming languages exist on the border between proprietary and open; for example, Oracle Corporation asserts proprietary rights to some aspects of the Java programming language, and Microsoft's C# programming language, which has open implementations of most parts of the system, also has Common Language Runtime (CLR) as a closed environment.Many proprietary languages are widely used, in spite of their proprietary nature; examples include MATLAB, VBScript, and Wolfram Language. Some languages may make the transition from closed to open; for example, Erlang was originally Ericsson's internal programming language.\n\n\n== Use ==\nThousands of different programming languages have been created, mainly in the computing field.\nIndividual software projects commonly use five programming languages or more.Programming languages differ from most other forms of human expression in that they require a greater degree of precision and completeness. When using a natural language to communicate with other people, human authors and speakers can be ambiguous and make small errors, and still expect their intent to be understood. However, figuratively speaking, computers \"do exactly what they are told to do\", and cannot \"understand\" what code the programmer intended to write. The combination of the language definition, a program, and the program's inputs must fully specify the external behavior that occurs when the program is executed, within the domain of control of that program. On the other hand, ideas about an algorithm can be communicated to humans without the precision required for execution by using pseudocode, which interleaves natural language with code written in a programming language.\nA programming language provides a structured mechanism for defining pieces of data, and the operations or transformations that may be carried out automatically on that data. A programmer uses the abstractions present in the language to represent the concepts involved in a computation. These concepts are represented as a collection of the simplest elements available (called primitives). Programming is the process by which programmers combine these primitives to compose new programs, or adapt existing ones to new uses or a changing environment.\nPrograms for a computer might be executed in a batch process without human interaction, or a user might type commands in an interactive session of an interpreter. In this case the \"commands\" are simply programs, whose execution is chained together. When a language can run its commands through an interpreter (such as a Unix shell or other command-line interface), without compiling, it is called a scripting language.\n\n\n=== Measuring language usage ===\nDetermining which is the most widely used programming language is difficult since the definition of usage varies by context. One language may occupy the greater number of programmer hours, a different one has more lines of code, and a third may consume the most CPU time. Some languages are very popular for particular kinds of applications. For example, COBOL is still strong in the corporate data center, often on large mainframes; Fortran in scientific and engineering applications; Ada in aerospace, transportation, military, real-time, and embedded applications; and C in embedded applications and operating systems. Other languages are regularly used to write many different kinds of applications.\nVarious methods of measuring language popularity, each subject to a different bias over what is measured, have been proposed:\n\ncounting the number of job advertisements that mention the language\nthe number of books sold that teach or describe the language\nestimates of the number of existing lines of code written in the language \u2013  which may underestimate languages not often found in public searches\ncounts of language references (i.e., to the name of the language) found using a web search engine.Combining and averaging information from various internet sites, stackify.com reported the ten most popular programming languages (in descending order by overall popularity): Java, C, C++, Python, C#, JavaScript, VB .NET, R, PHP, and MATLAB.\n\n\n== Dialects, flavors and implementations ==\nA dialect of a programming language or a data exchange language is a (relatively small) variation or extension of the language that does not change its intrinsic nature. With languages such as Scheme and Forth, standards may be considered insufficient, inadequate, or illegitimate by implementors, so often they will deviate from the standard, making a new dialect. In other cases, a dialect is created for use in a domain-specific language, often a subset. In the Lisp world, most languages that use basic S-expression syntax and Lisp-like semantics are considered Lisp dialects, although they vary wildly as do, say, Racket and Clojure. As it is common for one language to have several dialects, it can become quite difficult for an inexperienced programmer to find the right documentation. The BASIC language has many dialects.\n\n\n== Classifications ==\n\nProgramming languages are often placed into four main categories: imperative, functional, logic, and object oriented.\nImperative languages are designed to implement an algorithm in a specified order; they include visual programming languages such as .NET for generating graphical user interfaces. Scripting languages, which are partly or fully interpreted rather than compiled, are sometimes considered a separate category but meet the definition of imperative languages.\nFunctional programming languages work by successively applying functions to the given parameters. Although appreciated by many researchers for their simplicity and elegance, problems with efficiency have prevented them from being widely adopted.\nLogic languages are designed so that the software, rather than the programmer, decides what order in which the instructions are executed.\nObject-oriented programming\u2014whose characteristic features are data abstraction, inheritance, and dynamic dispatch\u2014is supported by most popular imperative languages and some functional languages.Although markup languages are not programming languages, some have extensions that support limited programming. Additionally, there are special-purpose languages that are not easily compared to other programming languages.\n\n\n\n\n\n                           Answer: \n\n"}, {"role": "assistant", "content": "\ufeffComputers today use complex circuits in order to perform all sorts of tasks, such as storing and retrieving values, performing operations and processing a series of instructions within a program. In order for the computer to be able to do all the operations, they require the programs that call the operations be loaded into computer memory to be executed. \n\nThe need to program machines existed way before the development of computers. One of the first implementations of programming actually begins with the Jacquard\u2019s programmable textile loom that utilizes punch cards to determine if a specific thread was held high or low in the loom, such that the cross thread passed above or below the thread. To apply variations to the design, these punch cards were arranged in long chains, forming a sequence of commands for the loom, which matches the ideas of the computer programming we know today. Punched cards turned out to be a cheap, reliable and fairly human-readable way to store data. Punched cards would also be used later on to help tabulate the 1890 US Census. The only problem with this system is that it only serves one purpose which is to tabulate.\n\nOver time, these business machines grew in capability, adding arithmetic features as well as becoming capable of making simple decisions about when to perform certain operations. These operations were asked by the programmer through the control paneer, which in that time were called the plug boards. Using plug boards, programmers can plug cable to different sockets in order to pass values and signals between different parts of the machines, however, this requires the programmer to rewire the system every time a different operation wants to be done. To relieve this issue, swappable plug boards were created in order to ease the changing of operations without rewiring.\n\nStored-program computers emerged in the late 1940s, storing programs and data in memory for easy access and modification. Electronic memory enabled the von Neumann architecture, combining data and instructions in a single shared memory. The von Neumann architecture standardized a unified structure of these computers, including a central processing unit containing an ALU, data registers, instruction register, instruction address registers and memory to store data and instructions.\n\nEven with electronic memory, punch cards remained a common way to load programs until the 1980s. Around 1960, the first mainframes\u2014general purpose computers\u2014were developed, although they could only be operated by professionals and the cost was extreme. The data and instructions were input by punch cards, meaning that no input could be added while the program was running. Other methods like punched paper tape and control panels with switches and buttons were also used. Another common way to control computers was through panel programming. In panel programming, switches and buttons were used to input data and programs, common on home computers of the 1950s and 60s.\n\nProgramming these early computers was difficult and time-consuming, requiring expertise in hardware and machine code. The need for a simpler way to program computers led to the development of programming languages. Programming languages differ from natural languages in that natural languages are only used for interaction between people, while programming languages also allow humans to communicate instructions to machines. After the invention of the microprocessor, computers in the 1970s became dramatically cheaper. New computers also allowed more user interaction, which was supported by newer programming languages.\n"}]}
{"messages": [{"role": "system", "content": "\n                      Please write a 500 word summary on the following Transcript based on the Reading Material.\n                      Pick relevant information from the Reading Material and add it to the summary of the Transcript.\n                      The Summary should be only of the Transcript with a few information from the Reading Material.\n                      If you are not sure of the summary, say 'I don't know'.\n    "}, {"role": "user", "content": "Transcript: Hi I\u2019m Carrie Anne, this is Crash Course Computer Science and today we\u2019re going to talk about how computers store and represent numerical data. Which means we\u2019ve got to talk about Math! But don\u2019t worry. Every single one of you already knows exactly what you need to know to follow along. So, last episode we talked about how transistors can be used to build logic gates, which can evaluate boolean statements. And in boolean algebra, there are only two, binary values: true and false. But if we only have two values, how in the world do we represent information beyond just these two values? That\u2019s where the Math comes in. INTRO So, as we mentioned last episode, a single binary value can be used to represent a number. Instead of true and false, we can call these two states 1 and 0 which is actually incredibly useful. And if we want to represent larger things we just need to add more binary digits. This works exactly the same way as the decimal numbers that we\u2019re all familiar with. With decimal numbers there are \"only\" 10 possible values a single digit can be; 0 through 9, and to get numbers larger than 9 we just start adding more digits to the front. We can do the same with binary. For example, let\u2019s take the number two hundred and sixty three. What does this number actually represent? Well, it means we\u2019ve got 2 one-hundreds, 6 tens, and 3 ones. If you add those all together, we\u2019ve got 263. Notice how each column has a different multiplier. In this case, it\u2019s 100, 10, and 1. Each multiplier is ten times larger than the one to the right. That's because each column has ten possible digits to work with, 0 through 9, after which you have to carry one to the next column. For this reason, it\u2019s called base-ten notation, also called decimal since deci means ten. AND Binary works exactly the same way, it\u2019s just base-two. That\u2019s because there are only two possible digits in binary \u2013 1 and 0. This means that each multiplier has to be two times larger than the column to its right. Instead of hundreds, tens, and ones, we now have fours, twos and ones. Take for example the binary number: 101. This means we have 1 four, 0 twos, and 1 one. Add those all together and we\u2019ve got the number 5 in base ten. But to represent larger numbers, binary needs a lot more digits. Take this number in binary 10110111. We can convert it to decimal in the same way. We have 1 x 128, 0 x 64, 1 x 32, 1 x 16, 0 x 8, 1 x 4, 1 x 2, and 1 x 1. Which all adds up to 183. Math with binary numbers isn\u2019t hard either. Take for example decimal addition of 183 plus 19. First we add 3 + 9, that\u2019s 12, so we put 2 as the sum and carry 1 to the ten\u2019s column. Now we add 8 plus 1 plus the 1 we carried, thats 10, so the sum is 0 carry 1. Finally we add 1 plus the 1 we carried, which equals 2. So the total sum is 202. Here\u2019s the same sum but in binary. Just as before, we start with the ones column. Adding 1+1 results in 2, even in binary. But, there is no symbol \"2\" so we use 10 and put 0 as our sum and carry the 1. Just like in our decimal example. 1 plus 1, plus the 1 carried, equals 3 or 11 in binary, so we put the sum as 1 and we carry 1 again, and so on. We end up with 11001010, which is the same as the number 202 in base ten. Each of these binary digits, 1 or 0, is called a \u201cbit\u201d. So in these last few examples, we were using 8-bit numbers with their lowest value of zero and highest value is 255, which requires all 8 bits to be set to 1. Thats 256 different values, or 2 to the 8th power. You might have heard of 8-bit computers, or 8-bit graphics or audio. These were computers that did most of their operations in chunks of 8 bits. But 256 different values isn\u2019t a lot to work with, so it meant things like 8-bit games were limited to 256 different colors for their graphics. And 8-bits is such a common size in computing, it has a special word: a byte. A byte is 8 bits. If you\u2019ve got 10 bytes, it means you\u2019ve really got 80 bits. You\u2019ve heard of kilobytes, megabytes, gigabytes and so on. These prefixes denote different scales of data. Just like one kilogram is a thousand grams, 1 kilobyte is a thousand bytes\u2026. or really 8000 bits. Mega is a million bytes (MB), and giga is a billion bytes (GB). Today you might even have a hard drive that has 1 terabyte (TB) of storage. That's 8 trillion ones and zeros. But hold on! That\u2019s not always true. In binary, a kilobyte has two to the power of 10 bytes, or 1024. 1000 is also right when talking about kilobytes, but we should acknowledge it isn\u2019t the only correct definition. You\u2019ve probably also heard the term 32-bit or 64-bit computers \u2013 you\u2019re almost certainly using one right now. What this means is that they operate in chunks of 32 or 64 bits. That\u2019s a lot of bits! The largest number you can represent with 32 bits is just under 4.3 billion. Which is thirty-two 1's in binary. This is why our Instagram photos are so smooth and pretty \u2013 they are composed of millions of colors, because computers today use 32-bit color graphics Of course, not everything is a positive number - like my bank account in college. So we need a way to represent positive and negative numbers. Most computers use the first bit for the sign: 1 for negative, 0 for positive numbers, and then use the remaining 31 bits for the number itself. That gives us a range of roughly plus or minus two billion. While this is a pretty big range of numbers, it\u2019s not enough for many tasks. There are 7 billion people on the earth, and the US national debt is almost 20 trillion dollars after all. This is why 64-bit numbers are useful. The largest value a 64-bit number can represent is around 9.2 quintillion! That\u2019s a lot of possible numbers and will hopefully stay above the US national debt for a while! Most importantly, as we\u2019ll discuss in a later episode, computers must label locations in their memory, known as addresses, in order to store and retrieve values. As computer memory has grown to gigabytes and terabytes \u2013 that\u2019s trillions of bytes \u2013 it was necessary to have 64-bit memory addresses as well. In addition to negative and positive numbers, computers must deal with numbers that are not whole numbers, like 12.7 and 3.14, or maybe even stardate: 43989.1. These are called \u201cfloating point\u201d numbers, because the decimal point can float around in the middle of number. Several methods have been developed to represent floating point numbers. The most common of which is the IEEE 754 standard. And you thought historians were the only people bad at naming things! In essence, this standard stores decimal values sort of like scientific notation. For example, 625.9 can be written as 0.6259 x 10^3. There are two important numbers here: the .6259 is called the significand. And 3 is the exponent. In a 32-bit floating point number, the first bit is used for the sign of the number -- positive or negative. The next 8 bits are used to store the exponent and the remaining 23 bits are used to store the significand. Ok, we\u2019ve talked a lot about numbers, but your name is probably composed of letters, so it\u2019s really useful for computers to also have a way to represent text. However, rather than have a special form of storage for letters, computers simply use numbers to represent letters. The most straightforward approach might be to simply number the letters of the alphabet: A being 1, B being 2, C 3, and so on. In fact, Francis Bacon, the famous English writer, used five-bit sequences to encode all 26 letters of the English alphabet to send secret messages back in the 1600s. And five bits can store 32 possible values \u2013 so that\u2019s enough for the 26 letters, but not enough for punctuation, digits, and upper and lower case letters. Enter ASCII, the American Standard Code for Information Interchange. Invented in 1963, ASCII was a 7-bit code, enough to store 128 different values. With this expanded range, it could encode capital letters, lowercase letters, digits 0 through 9, and symbols like the @ sign and punctuation marks. For example, a lowercase \u2018a\u2019 is represented by the number 97, while a capital \u2018A\u2019 is 65. A colon is 58 and a closed parenthesis is 41. ASCII even had a selection of special command codes, such as a newline character to tell the computer where to wrap a line to the next row. In older computer systems, the line of text would literally continue off the edge of the screen if you didn\u2019t include a new line character! Because ASCII was such an early standard, it became widely used, and critically, allowed different computers built by different companies to exchange data. This ability to universally exchange information is called \u201cinteroperability\u201d. However, it did have a major limitation: it was really only designed for English. Fortunately, there are 8 bits in a byte, not 7, and it soon became popular to use codes 128 through 255, previously unused, for \"national\" characters. In the US, those extra numbers were largely used to encode additional symbols, like mathematical notation, graphical elements, and common accented characters. On the other hand, while the Latin characters were used universally, Russian computers used the extra codes to encode Cyrillic characters, and Greek computers, Greek letters, and so on. And national character codes worked pretty well for most countries. The problem was, if you opened an email written in Latvian on a Turkish computer, the result was completely incomprehensible. And things totally broke with the rise of computing in Asia, as languages like Chinese and Japanese have thousands of characters. There was no way to encode all those characters in 8-bits! In response, each country invented multi-byte encoding schemes, all of which were mutually incompatible. The Japanese were so familiar with this encoding problem that they had a special name for it: \"mojibake\", which means \"scrambled text\". And so it was born \u2013 Unicode \u2013 one format to rule them all. Devised in 1992 to finally do away with all of the different international schemes it replaced them with one universal encoding scheme. The most common version of Unicode uses 16 bits with space for over a million codes - enough for every single character from every language ever used \u2013 more than 120,000 of them in over 100 types of script plus space for mathematical symbols and even graphical characters like Emoji. And in the same way that ASCII defines a scheme for encoding letters as binary numbers, other file formats \u2013 like MP3s or GIFs \u2013 use binary numbers to encode sounds or colors of a pixel in our photos, movies, and music. Most importantly, under the hood it all comes down to long sequences of bits. Text messages, this YouTube video, every webpage on the internet, and even your computer\u2019s operating system, are nothing but long sequences of 1s and 0s. So next week, we\u2019ll start talking about how your computer starts manipulating those binary sequences, for our first true taste of computation. Thanks for watching. See you next week.\n\n\n                           Reading Material: A computer number format is the internal representation of numeric values in digital device hardware and software, such as in programmable computers and calculators.  Numerical values are stored as groupings of bits, such as bytes and words. The encoding between numerical values and bit patterns is chosen for convenience of the operation of the computer; the encoding used by the computer's instruction set generally requires conversion for external use, such as for printing and display. Different types of processors may have different internal representations of numerical values and different conventions are used for integer and real numbers. Most calculations are carried out with number formats that fit into a processor register, but some software systems allow representation of arbitrarily large numbers using multiple words of memory.\n\n\n== Binary number representation ==\n\nComputers represent data in sets of binary digits.  The representation is composed of bits, which in turn are grouped into larger sets such as bytes.\n\nA bit is a binary digit that represents one of two states.  The concept of a bit can be understood as a value of either 1 or 0, on or off, yes or no, true or false, or encoded by a switch or toggle of some kind.\nWhile a single bit, on its own, is able to represent only two values, a string of bits may be used to represent larger values.  For example, a string of three bits can represent up to eight distinct values as illustrated in Table 1.\nAs the number of bits composing a string increases, the number of possible 0 and 1 combinations increases exponentially.  A single bit allows only two value-combinations, two bits combined can make four separate values, three bits for eight, and so on, increasing with the formula 2n.  The amount of possible combinations doubles with each binary digit added as illustrated in Table 2.\nGroupings with a specific number of bits are used to represent varying things and have specific names.\nA byte is a bit string containing the number of bits needed to represent a character.  On most modern computers, this is an eight bit string.  Because the definition of a byte is related to the number of bits composing a character, some older computers have used a different bit length for their byte.  In many computer architectures, the byte is the smallest addressable unit, the atom of addressability, say.  For example, even though 64-bit processors may address memory sixty-four bits at a time, they may still split that memory into eight-bit pieces.  This is called byte-addressable memory.  Historically, many CPUs read data in some multiple of eight bits.  Because the byte size of eight bits is so common, but the definition is not standardized, the term octet is sometimes used to explicitly describe an eight bit sequence.\nA nibble (sometimes nybble), is a number composed of four bits.  Being a half-byte, the nibble was named as a play on words.  A person may need several nibbles for one bite from something; similarly, a nybble is a part of a byte.  Because four bits allow for sixteen values, a nibble is sometimes known as a hexadecimal digit.\n\n\n== Octal and hexadecimal number display ==\n\nOctal and hexadecimal encoding are convenient ways to represent binary numbers, as used by computers. Computer engineers often need to write out binary quantities, but in practice writing out a binary number such as 1001001101010001 is tedious and prone to errors. Therefore, binary quantities are written in a base-8, or \"octal\", or, much more commonly, a base-16, \"hexadecimal\" (hex), number format.  In the decimal system, there are 10 digits, 0 through 9, which combine to form numbers. In an octal system, there are only 8 digits, 0 through 7.  That is, the value of an octal \"10\" is the same as a decimal \"8\", an octal \"20\" is a decimal \"16\", and so on.   In a hexadecimal system, there are 16 digits, 0 through 9 followed, by convention, with A through F.  That is, a hexadecimal \"10\" is the same as a decimal \"16\" and a hexadecimal \"20\" is the same as a decimal \"32\".  An example and comparison of numbers in different bases is described in the chart below.\nWhen typing numbers, formatting characters are used to describe the number system, for example 000_0000B or 0b000_00000 for binary and 0F8H or 0xf8 for hexadecimal numbers.\n\n\n=== Converting between bases ===\n\nEach of these number systems is a positional system, but while decimal weights are powers of 10, the octal weights are powers of 8 and the hexadecimal weights are powers of 16. To convert from hexadecimal or octal to decimal, for each digit one multiplies the value of the digit by the value of its position and then adds the results. For example:\n\n  \n    \n      \n        \n          \n            \n              \n              \n                \n                  octal \n                \n                756\n              \n            \n            \n              \n                =\n                \n\n                \n              \n              \n                \n                (\n                7\n                \u00d7\n                \n                  8\n                  \n                    2\n                  \n                \n                )\n                +\n                (\n                5\n                \u00d7\n                \n                  8\n                  \n                    1\n                  \n                \n                )\n                +\n                (\n                6\n                \u00d7\n                \n                  8\n                  \n                    0\n                  \n                \n                )\n              \n            \n            \n              \n                =\n                \n\n                \n              \n              \n                \n                (\n                7\n                \u00d7\n                64\n                )\n                +\n                (\n                5\n                \u00d7\n                8\n                )\n                +\n                (\n                6\n                \u00d7\n                1\n                )\n              \n            \n            \n              \n                =\n                \n\n                \n              \n              \n                448\n                +\n                40\n                +\n                6\n              \n            \n            \n              \n                =\n                \n\n                \n              \n              \n                \n                  decimal \n                \n                494\n              \n            \n          \n        \n        \n        \n          \n            \n              \n              \n                \n                  hex \n                \n                \n                  3\n                  b\n                  2\n                \n              \n            \n            \n              \n                =\n                \n\n                \n              \n              \n                \n                (\n                3\n                \u00d7\n                \n                  16\n                  \n                    2\n                  \n                \n                )\n                +\n                (\n                11\n                \u00d7\n                \n                  16\n                  \n                    1\n                  \n                \n                )\n                +\n                (\n                2\n                \u00d7\n                \n                  16\n                  \n                    0\n                  \n                \n                )\n              \n            \n            \n              \n                =\n                \n\n                \n              \n              \n                \n                (\n                3\n                \u00d7\n                256\n                )\n                +\n                (\n                11\n                \u00d7\n                16\n                )\n                +\n                (\n                2\n                \u00d7\n                1\n                )\n              \n            \n            \n              \n                =\n                \n\n                \n              \n              \n                768\n                +\n                176\n                +\n                2\n              \n            \n            \n              \n                =\n                \n\n                \n              \n              \n                \n                  decimal \n                \n                946\n              \n            \n          \n        \n      \n    \n    {\\displaystyle {\\begin{aligned}&{\\text{octal }}756\\\\[5pt]={}&(7\\times 8^{2})+(5\\times 8^{1})+(6\\times 8^{0})\\\\[5pt]={}&(7\\times 64)+(5\\times 8)+(6\\times 1)\\\\[5pt]={}&448+40+6\\\\[5pt]={}&{\\text{decimal }}494\\end{aligned}}\\qquad {\\begin{aligned}&{\\text{hex }}\\mathrm {3b2} \\\\[5pt]={}&(3\\times 16^{2})+(11\\times 16^{1})+(2\\times 16^{0})\\\\[5pt]={}&(3\\times 256)+(11\\times 16)+(2\\times 1)\\\\[5pt]={}&768+176+2\\\\[5pt]={}&{\\text{decimal }}946\\end{aligned}}}\n  \n\n\n== Representing fractions in binary ==\n\n\n=== Fixed-point numbers ===\nFixed-point formatting can be useful to represent fractions in binary.\nThe number of bits needed for the precision and range desired must be chosen to store the fractional and integer parts of a number. For instance, using a 32-bit format, 16 bits may be used for the integer and 16 for the fraction.\nThe eight's bit is followed by the four's bit, then the two's bit, then the one's bit.  The fractional bits continue the pattern set by the integer bits.  The next bit is the half's bit, then the quarter's bit, then the \u215b's bit, and so on.  For example:\n\nThis form of encoding cannot represent some values in binary. For example, the fraction 1/5, 0.2 in decimal, the closest approximations would be as follows:\n\nEven if more digits are used, an exact representation is impossible. The number 1/3, written in decimal as 0.333333333..., continues indefinitely. If prematurely terminated, the value would not represent 1/3 precisely.\n\n\n=== Floating-point numbers ===\nWhile both unsigned and signed integers are used in digital systems, even a 32-bit integer is not enough to handle all the range of numbers a calculator can handle, and that's not even including fractions. To approximate the greater range and precision of real numbers, we have to abandon signed integers and fixed-point numbers and go to a \"floating-point\" format.\nIn the decimal system, we are familiar with floating-point numbers of the form (scientific notation):\n\n1.1030402 \u00d7 105 = 1.1030402 \u00d7 100000 = 110304.02or, more compactly:\n\n1.1030402E5which means \"1.1030402 times 1 followed by 5 zeroes\". We have a certain numeric value (1.1030402) known as a \"significand\", multiplied by a power of 10 (E5, meaning 105 or 100,000), known as an \"exponent\". If we have a negative exponent, that means the number is multiplied by a 1 that many places to the right of the decimal point. For example:\n\n2.3434E\u22126 = 2.3434 \u00d7 10\u22126 = 2.3434 \u00d7 0.000001 = 0.0000023434The advantage of this scheme is that by using the exponent we can get a much wider range of numbers, even if the number of digits in the significand, or the \"numeric precision\", is much smaller than the range. Similar binary floating-point formats can be defined for computers. There is a number of such schemes, the most popular has been defined by Institute of Electrical and Electronics Engineers (IEEE). The IEEE 754-2008 standard specification defines a 64 bit floating-point format with:\n\nan 11-bit binary exponent, using \"excess-1023\" format. Excess-1023 means the exponent appears as an unsigned binary integer from 0 to 2047; subtracting 1023 gives the actual signed value\na 52-bit significand, also an unsigned binary number, defining a fractional value with a leading implied \"1\"\na sign bit, giving the sign of the number.Let's see what this format looks like by showing how such a number would be stored in 8 bytes of memory:\n\nwhere \"S\" denotes the sign bit, \"x\" denotes an exponent bit, and \"m\" denotes a significand bit. Once the bits here have been extracted, they are converted with the computation:\n\n<sign> \u00d7 (1 + <fractional significand>) \u00d7 2<exponent> \u2212 1023This scheme provides numbers valid out to about 15 decimal digits, with the following range of numbers:\n\nThe specification also defines several special values that are not defined numbers, and are known as NaNs, for \"Not A Number\". These are used by programs to designate invalid operations and the like. \nSome programs also use 32-bit floating-point numbers. The most common scheme uses a 23-bit significand with a sign bit, plus an 8-bit exponent in \"excess-127\" format, giving seven valid decimal digits.\n\nThe bits are converted to a numeric value with the computation:\n\n<sign> \u00d7 (1 + <fractional significand>) \u00d7 2<exponent>  \u2212 127leading to the following range of numbers:\n\nSuch floating-point numbers are known as \"reals\" or \"floats\" in general, but with a number of  variations:\nA 32-bit float value is sometimes called a \"real32\" or a \"single\", meaning \"single-precision floating-point value\".\nA 64-bit float is sometimes called a \"real64\" or a \"double\", meaning \"double-precision floating-point value\".\nThe relation between numbers and bit patterns is chosen for convenience in computer manipulation; eight bytes stored in computer memory may represent a 64-bit real, two 32-bit reals, or four signed or unsigned integers, or some other kind of data that fits into eight bytes. The only difference is how the computer interprets them. If the computer stored four unsigned integers and then read them back from memory as a 64-bit real, it almost always would be a perfectly valid real number, though it would be junk data.\nOnly a finite range of real numbers can be represented with a given number of bits. Arithmetic operations can overflow or underflow, producing a value too large or too small to be represented.\nThe representation has a limited precision. For example, only 15 decimal digits can be represented with a 64-bit real. If a very small floating-point number is added to a large one, the result is just the large one. The small number was too small to even show up in 15 or 16 digits of resolution, and the computer effectively discards it. Analyzing the effect of limited precision is a well-studied problem. Estimates of the magnitude of round-off errors and methods to limit their effect on large calculations are part of any large computation project. The precision limit is different from the range limit, as it affects the significand, not the exponent.\nThe significand is a binary fraction that doesn't necessarily perfectly match a decimal fraction. In many cases a sum of reciprocal powers of 2 does not match a specific decimal fraction, and the results of computations will be slightly off. For example, the decimal fraction \"0.1\" is equivalent to an infinitely repeating binary fraction: 0.000110011 ...\n\n\n== Numbers in programming languages ==\nProgramming in assembly language requires the programmer to keep track of the representation of numbers. Where the processor does not support a required mathematical operation, the programmer must work out a suitable algorithm and instruction sequence to carry out the operation; on some microprocessors, even integer multiplication must be done in software.\nHigh-level programming languages such as Ruby and Python offer an abstract number that may be an expanded type such as rational, bignum, or complex. Mathematical operations are carried out by library routines provided by the implementation of the language. A given mathematical symbol in the source code, by operator overloading,  will invoke different object code appropriate to the representation of the numerical type; mathematical operations on any number\u2014whether signed, unsigned, rational, floating-point, fixed-point, integral, or complex\u2014are written exactly the same way.\nSome languages, such as REXX and Java, provide decimal floating-points operations, which provide rounding errors of a different form.\n\n\n\n\n\n                           Answer: \n\n"}, {"role": "assistant", "content": "Computers are complex systems which require methods of representing values and letters. Computers do this by representing numeric value as a group of bits, such as bytes or words. The encoding of numerical value to bit patterns is chosen for convenience of the operation of the computer. \n\nSingle binary values represent numbers; 0 and 1 can be used to represent \"true\" and \"false,\" allowing for information beyond these two values. Binary numbers work similarly to decimal numbers, using a base-two system with multipliers that are powers of two to represent larger numbers. For example, 73 is equal to seven 10's and three 1's in decimal, hence 73 in decimal form. For the binary representation, 73 is equal to one 64's, one 8's, and one 1's, hence 01001001 in binary form\n\nIn the past, 8-bit systems were very commonly used, where each binary digit (bit) represents a certain value, with a range of 0-255. In fact, 8-bits is such a common size in computing, it is known as a byte. As the amount of data gets larger, we require larger numerical representations leading to numbers using larger bit sizes. The amount of possible combinations of bits doubles with each added bit, leading to numbers of possible combinations to be 2^b where b is the number of bits in the representation. Along with a larger range of numbers, there also comes a need to represent negative values and decimal values. Here are some of the ways that computers do that:\n\n* Representing negative numbers - Computers using 32 bit numbers represent negative numbers using the first bit, typically reserving 31 bits for the number itself.\n* Representing more numbers - 64-bit numbers expand the range of representable values to around 9.2 quintillion.\n* Representing non-whole numbers - Computers use floating-point numbers to represent non-whole numbers, with a significand and exponent.\n    * Example: 625.9 = 0.6259 * 10^3, where 0.6529 is the significand, and 3 is the exponent\n    * In 32 bit floating point numbers, often referred to as a float, the first bit is used for sign, 8 bits are used for exponent, last 23 are for significand.\n    * In 64 bit floating point numbers, often referred to as a double, the first bit is used for sign, 11 bits are used for exponent, last 52 are for significand.\n    * The advantage of this scheme is that by using the exponent we can get a much wider range of numbers, even if the number of digits in the significand, or the \"numeric precision\", is much smaller than the range.\n\nAside from numbers, text is also represented in computers using encoding schemes like ASCII, which assigns binary numbers to letters. Using a 7-bit representation, we can encode 128 symbols that can be mapped to lowercase letters, uppercase letters, digits 0 - 9 and symbols such as @ and punctuation marks. ASCII also includes a selection of special command codes, corresponding to things like the new-line character.\n\nWith this encoding scheme, we are able to universally exchange information, however, only designed for the English alphabet. Other countries could have other language characters encoded by using 8-bit representations, though this caused problems when exchanging information across different languages. For this reason, Unicode was devised to provide a universal encoding scheme for characters from multiple languages, using a 16-bit representation to represent every single character in every language ever used. \n"}]}
{"messages": [{"role": "system", "content": "\n                      Please write a 500 word summary on the following Transcript based on the Reading Material.\n                      Pick relevant information from the Reading Material and add it to the summary of the Transcript.\n                      The Summary should be only of the Transcript with a few information from the Reading Material.\n                      If you are not sure of the summary, say 'I don't know'.\n    "}, {"role": "user", "content": "Transcript: >> Classical machine learning can take you so far, but all the cool kids are getting into so-called deep learning. So let's take a look at that. As you know, machine learning is fundamentally about defining a function that produces a label value, y, from a set of features, x. Now the features are usually numeric values, like the measurements of an iris flower's petals and sepals, and in classification, the label is a probability vector that identifies the most likely class to which the item described by the features belongs. Classical machine learning techniques use algorithms like logistic regression, to determine coefficients for the function. We're going to look at a different approach that tries to mimic the human brain. In your brain, you have neurons, and attached to these neurons are nerve tissues called dendrites that contain synapses that capture input signals for the neuron. As you learn to respond to specific stimuli, these nerve impulses are strengthened or weakened. If the input signal is strong enough, the neuron fires, passing the signal onto other neurons in the neural network that forms your central nervous system. Then conceptually, you can think of this biological arrangement is being like a mathematical function. The impulses received by the neurons are input values which we'll call x. In this case there's a vector of 2x values that we'll call x1 and x2. Whether or not the neuron fires, is our output value or y. We can also view the strength or weakness of the input signal as being something that's used to assign weight to each input value, so we will call this w. All of that gives us a function that operates on x and w to produce y. Because this is an artificial neuron, we want to have some additional control over whether or not the neuron fires. So we actually add an additional input that we call bias or b. So our function now operates on x, w, and b, to produce y. But what does it actually do? Well, at the core, it calculates a weighted sum of each x input multiplied by its corresponding weight, and adds the bias value. This can produce theoretically any numerical value for y. We want to simulate a neuron which fires or doesn't, depending on whether or not a specific threshold is reached. So we wrap the weighted sum in a function that squashes the output value within a specific range, often a sigmoid function that yields a value between between zero and one. We call this function and activation function, and it's what determines whether or not our artificial neuron fires. So how does this artificial neuron function work in a machine learning model? Well, let's take some input values, in this case a vector containing the sepal and petal, width and height measurements for an iris, and we'll create a neuron for each input. So we're passing 1x value, with a randomly generated weight and bias value into each neuron. We're calculating a weighted sum, and we're using an activation function to squeeze the result between zero and one. Then the neurons in this input layer pass their outputs onto another layer of neurons, with each neuron in the first layer being connected to every neuron in the second layer. Again, the weights and bias values are randomly initialized. We can have as many of these layers as we like, we call them hidden layers, until finally we connect the outputs to an output layer, that has the same number of neurons as we have classes to which we are trying to assign the observed features. In this case, three classes representing the three possible species of virus. The output from the final output layer contains a probability value for each class, which we can interpret as a vector. Now this whole network of fully-connected layers is called a neural network or sometimes a multilayer perceptron. Now, the clever bit is that because we're training this network with some iris data where we already know the correct classes, we can compare the probability values that are generated by the network to the actual known values. In this case, the features in the input layer are measurements of a Virginica iris, which is the second of our three classes. So the correct probability should be zero, one, and zero. Now we can measure how far off each of our predicted probabilities are from the actual grown truth label. Then we'll take the mean of that, and we'll square it. That gives us a metric that indicates the amount of error in the model, which we call as loss. So now that we know how to calculate the loss in the model, what can we do with it? Well, the calculation for the loss is a function which takes as input the output layer of the neural network, which in turn can be thought of as a function that operates on its weights and biases that it gets from the output of the layer before, and so on, all the way back to the original input layers, values, weights, and biases. In effect, the neural network and its lost function just form one big nested function. Like any function, we can plot its output for any combination of its inputs. So to keep things simple, let's for a moment pretend that the lost function is only one input value, a weight value named w_1, and it produces an output which measures the loss in our network. Here's the point on the plot that shows the loss generated for w_1, value of two. Using differential calculus, we can calculate the derivative of the function at this point. In other words, we can figure out the direction of the slope or gradient of the function line when w_1 is two. In this case, the derivative is negative. So we know that if we increase the value of w_2, then the gradient of the function will go down reducing the loss. Now of course, our function is a little more complex. It has many input variables, but the same principle applies to a multivariate function. It's just that the plot becomes multidimensional, and we need to calculate a partial derivative for each input variable. This tells us which direction we need to adjust each variable in order to move the loss down, in effect descending the gradient of the function to reduce the loss. The amount we adjust each variable by is called the learning rate. A low value for the learning rate results in small adjustments. So we might need to adjust the variables many times to minimize the loss. A high learning rate results in large adjustments. So we might step too far, and not find the minimum part of the gradient. In practice, setting the learning rate require some trial and error, and you can use advanced techniques to change the learning rate as we get closer to minimizing the loss. We can calculate derivatives for any of the variables in the functions. Thanks to a feature of calculus called the chain rule, we can work recursively back through any number of nested functions to calculate derivatives for every variable that affects the final outcome, in this case the loss. So if we apply this to our neural network, we can work backwards to determine how best to adjust every weight and bias value in the network in order to reduce the amount of loss in the model, we call this backpropagation. With the weights and biases adjusted, when we feed the same input values into the network, we get a different output which should hopefully result in a lower loss. Which means our network is improving, it's learning. To train our network, we just feed through a bunch of feature vectors for which we already know the class labels. Then our loss function calculates the loss averaged for all of the training data, and we backpropagate, to adjust the weights and bias values based on our chosen learning rate. Then we can feed through some more feature vectors with known labels to validate the new weights and biases. Each cycle of training backpropagation and validation is called an epoch, and we go through several of these to train the model. Within each epoch, we don't feed the feature vectors through one at a time. We actually combine them into multiple batches. So actually, we're processing a matrix of feature values. The weights and biases are vectors. So this process is actually just some linear algebra calculations. Now that kind of math is heavily used in computer graphics. Graphical processing units or GPUs are optimized for this type of operation. That's why when we're training deep learning models, we tend to use computers with GPUs. It's generally much faster than using just CPUs.\n\n\n                           Reading Material: Deep learning is the subset of machine learning methods based on artificial neural networks (ANNs) with representation learning. The adjective \"deep\" refers to the use of multiple layers in the network. Methods used can be either supervised, semi-supervised or unsupervised.Deep-learning architectures such as deep neural networks, deep belief networks, recurrent neural networks, convolutional neural networks and transformers have been applied to fields including computer vision, speech recognition, natural language processing, machine translation, bioinformatics, drug design, medical image analysis, climate science, material inspection and board game programs, where they have produced results comparable to and in some cases surpassing human expert performance.Artificial neural networks were inspired by information processing and distributed communication nodes in biological systems. ANNs have various differences from biological brains. Specifically, artificial neural networks tend to be static and symbolic, while the biological brain of most living organisms is dynamic (plastic) and analog. ANNs are generally seen as low quality models for brain function.\n\n\n== Definition ==\nDeep learning is a class of machine learning algorithms that:\u200a199\u2013200\u200a uses multiple layers to progressively extract higher-level features from the raw input. For example, in image processing, lower layers may identify edges, while higher layers may identify the concepts relevant to a human such as digits or letters or faces.\nFrom another angle to view deep learning, deep learning refers to \"computer-simulate\" or \"automate\" human learning processes from a source (e.g., an image of dogs) to a learned object (dogs). Therefore, a notion coined as \"deeper\" learning or \"deepest\" learning makes sense. The deepest learning refers to the fully automatic learning from a source to a final learned object. A deeper learning thus refers to a mixed learning process: a human learning process from a source to a learned semi-object, followed by a computer learning process from the human learned semi-object to a final learned object.\n\n\n== Overview ==\nMost modern deep learning models are based on multi-layered artificial neural networks such as convolutional neural networks and transformers, although they can also include propositional formulas or latent variables organized layer-wise in deep generative models such as the nodes in deep belief networks and deep Boltzmann machines.In deep learning, each level learns to transform its input data into a slightly more abstract and composite representation. In an image recognition application, the raw input may be a matrix of pixels; the first representational layer may abstract the pixels and encode edges; the second layer may compose and encode arrangements of edges; the third layer may encode a nose and eyes; and the fourth layer may recognize that the image contains a face. Importantly, a deep learning process can learn which features to optimally place in which level on its own. This does not eliminate the need for hand-tuning; for example, varying numbers of layers and layer sizes can provide different degrees of abstraction.The word \"deep\" in \"deep learning\" refers to the number of layers through which the data is transformed. More precisely, deep learning systems have a substantial credit assignment path (CAP) depth. The CAP is the chain of transformations from input to output. CAPs describe potentially causal connections between input and output. For a feedforward neural network, the depth of the CAPs is that of the network and is the number of hidden layers plus one (as the output layer is also parameterized). For recurrent neural networks, in which a signal may propagate through a layer more than once, the CAP depth is potentially unlimited. No universally agreed-upon threshold of depth divides shallow learning from deep learning, but most researchers agree that deep learning involves CAP depth higher than 2. CAP of depth 2 has been shown to be a universal approximator in the sense that it can emulate any function. Beyond that, more layers do not add to the function approximator ability of the network. Deep models (CAP > 2) are able to extract better features than shallow models and hence, extra layers help in learning the features effectively.\nDeep learning architectures can be constructed with a greedy layer-by-layer method. Deep learning helps to disentangle these abstractions and pick out which features improve performance.For supervised learning tasks, deep learning methods enable elimination of feature engineering, by translating the data into compact intermediate representations akin to principal components, and derive layered structures that remove redundancy in representation.\nDeep learning algorithms can be applied to unsupervised learning tasks. This is an important benefit because unlabeled data are more abundant than the labeled data. Examples of deep structures that can be trained in an unsupervised manner are deep belief networks.Machine learning models are now adept at identifying complex patterns in financial market data. Due to the benefits of artificial intelligence, investors are increasingly utilizing deep learning techniques to forecast and analyze trends in stock and foreign exchange markets.\n\n\n== Interpretations ==\nDeep neural networks are generally interpreted in terms of the universal approximation theorem or probabilistic inference.The classic universal approximation theorem concerns the capacity of feedforward neural networks with a single hidden layer of finite size to approximate continuous functions. In 1989, the first proof was published by George Cybenko for sigmoid activation functions and was generalised to feed-forward multi-layer architectures in 1991 by Kurt Hornik. Recent work also showed that universal approximation also holds for non-bounded activation functions such as Kunihiko Fukushima's rectified linear unit.The universal approximation theorem for deep neural networks concerns the capacity of networks with bounded width but the depth is allowed to grow. Lu et al. proved that if the width of a deep neural network with ReLU activation is strictly larger than the input dimension, then the network can approximate any Lebesgue integrable function; if the width is smaller or equal to the input dimension, then a deep neural network is not a universal approximator.\nThe probabilistic interpretation derives from the field of machine learning. It features inference, as well as the optimization concepts of training and testing, related to fitting and generalization, respectively. More specifically, the probabilistic interpretation considers the activation nonlinearity as a cumulative distribution function. The probabilistic interpretation led to the introduction of dropout as regularizer in neural networks. The probabilistic interpretation was introduced by researchers including Hopfield, Widrow and Narendra and popularized in surveys such as the one by Bishop.\n\n\n== History ==\nThere are two types of artificial neural network (ANN): feedforward neural networks (FNNs) and recurrent neural networks (RNNs). RNNs have cycles in their connectivity structure, FNNs don't. In the 1920s, Wilhelm Lenz and Ernst Ising created and analyzed the Ising model which is essentially a non-learning RNN architecture consisting of neuron-like threshold elements. In 1972, Shun'ichi Amari made this architecture adaptive. His learning RNN was popularised by John Hopfield in 1982. RNNs have become central for speech recognition and language processing.\nCharles Tappert writes that Frank Rosenblatt developed and explored all of the basic ingredients of the deep learning systems of today, referring to Rosenblatt's 1962 book which introduced multilayer perceptron (MLP) with 3 layers: an input layer, a hidden layer with randomized weights that did not learn, and an output layer. It also introduced variants, including a version with four-layer perceptrons where the last two layers have learned weights (and thus a proper multilayer perceptron).:\u200asection 16\u200a In addition, term deep learning was proposed in 1986 by Rina Dechter although the history of its appearance is apparently more complicated.The first general, working learning algorithm for supervised, deep, feedforward, multilayer perceptrons was published by Alexey Ivakhnenko and Lapa in 1967. A 1971 paper described a deep network with eight layers trained by the group method of data handling.The first deep learning multilayer perceptron trained by stochastic gradient descent was published in 1967 by Shun'ichi Amari. In computer experiments conducted by Amari's student Saito, a five layer MLP with two modifiable layers learned  internal representations to classify non-linearily separable pattern classes. In 1987 Matthew Brand reported that wide 12-layer nonlinear perceptrons could be fully end-to-end trained to reproduce logic functions of nontrivial circuit depth via gradient descent on small batches of random input/output samples, but concluded that training time on contemporary hardware (sub-megaflop computers) made the technique impractical, and proposed using fixed random early layers as an input hash for a single modifiable layer.  Instead, subsequent developments in hardware and hyperparameter tunings have made end-to-end stochastic gradient descent the currently dominant training technique.\nIn 1970, Seppo Linnainmaa published the reverse mode of automatic differentiation of discrete connected networks of nested differentiable functions. This became known as backpropagation. It is an efficient application of the chain rule derived by Gottfried Wilhelm Leibniz in 1673 to networks of differentiable nodes. \nThe terminology \"back-propagating errors\" was actually introduced in 1962 by Rosenblatt, but he did not know how to implement this, although Henry J. Kelley had a continuous precursor of backpropagation already in 1960 in the context of control theory. In 1982, Paul Werbos applied backpropagation to MLPs in the way that has become standard. In 1985, David E. Rumelhart et al. published an experimental analysis of the technique.Deep learning architectures for convolutional neural networks (CNNs) with convolutional layers and downsampling layers began with the Neocognitron introduced by Kunihiko Fukushima in 1980. In 1969, he also introduced the ReLU (rectified linear unit) activation function. The rectifier has become the most popular activation function for CNNs and deep learning in general. CNNs have become an essential tool for computer vision.\nThe term Deep Learning was introduced to the machine learning community by Rina Dechter in 1986, and to artificial neural networks by Igor Aizenberg and colleagues in 2000, in the context of Boolean threshold neurons.In 1988, Wei Zhang et al. applied the backpropagation algorithm \nto a convolutional neural network (a simplified Neocognitron with convolutional interconnections between the image feature layers and the last fully connected layer) for alphabet recognition. They also proposed an implementation of the CNN with an optical computing system. \nIn 1989, Yann LeCun et al. applied backpropagation to a CNN with the purpose of recognizing handwritten ZIP codes on mail. While the algorithm worked, training required 3 days. Subsequently, Wei Zhang, et al. modified their model by removing the last fully connected layer and applied it for medical image object segmentation in 1991 and breast cancer detection in mammograms in 1994. LeNet-5 (1998), a 7-level CNN by Yann LeCun et al., that classifies digits, was applied by several banks to recognize hand-written numbers on checks  digitized in 32x32 pixel images.\nIn the 1980s, backpropagation did not work well for deep learning with long credit assignment paths. To overcome this problem, J\u00fcrgen Schmidhuber (1992) proposed a hierarchy of RNNs pre-trained one level at a time by self-supervised learning. It uses predictive coding  to learn internal representations at multiple self-organizing time scales. This can substantially facilitate downstream deep learning. The RNN hierarchy can be collapsed into a single RNN, by distilling a higher level chunker network into a lower level automatizer network. In 1993, a chunker solved a deep learning task whose depth exceeded 1000.In 1992, J\u00fcrgen Schmidhuber also published an alternative to RNNs which is now called a linear Transformer or a  Transformer with linearized self-attention (save for a normalization operator). It learns internal spotlights of attention: a slow feedforward neural network learns by gradient descent to control the fast weights of another neural network through outer products of self-generated activation patterns FROM and TO (which are now called key and value for self-attention). This fast weight attention mapping is applied to a query pattern.\nThe modern Transformer was introduced by Ashish Vaswani et al. in their 2017 paper \"Attention Is All You Need\". \nIt combines this with a softmax operator and a projection matrix.\nTransformers have increasingly become the model of choice for natural language processing. Many modern large language models such as ChatGPT, GPT-4, and BERT use it. Transformers are also increasingly being used in computer vision.In 1991, J\u00fcrgen Schmidhuber also published adversarial neural networks that contest with each other in the form of a zero-sum game, where one network's gain is the other network's loss. The first network is a generative model that models a probability distribution over output patterns. The second network learns by gradient descent to predict the reactions of the environment to these patterns. This was called \"artificial curiosity\". In 2014, this principle was used in a generative adversarial network (GAN) by Ian Goodfellow et al. Here the environmental reaction is 1 or 0 depending on whether the first network's output is in a given set. This can be used to create realistic deepfakes. Excellent image quality is achieved by Nvidia's StyleGAN (2018) based on the Progressive GAN by Tero Karras et al. Here the GAN generator is grown from small to large scale in a pyramidal fashion.\nSepp Hochreiter's diploma thesis (1991) was called \"one of the most important documents in the history of machine learning\" by his supervisor Schmidhuber. It not only tested the neural history compressor, but also identified and analyzed the vanishing gradient problem. Hochreiter proposed recurrent residual connections to solve this problem. This led to the deep learning method called long short-term memory (LSTM), published in 1997. LSTM recurrent neural networks can learn \"very deep learning\" tasks with long credit assignment paths that require memories of events that happened thousands of discrete time steps before. The \"vanilla LSTM\" with forget gate was introduced in 1999 by Felix Gers, Schmidhuber and Fred Cummins. LSTM has become the  most cited neural network of the 20th century.\nIn 2015, Rupesh Kumar Srivastava, Klaus Greff, and Schmidhuber used LSTM principles to create the Highway network, a feedforward neural network with hundreds of layers, much deeper than previous networks. 7 months later, Kaiming He, Xiangyu Zhang;  Shaoqing Ren, and Jian Sun won the ImageNet 2015 competition with an open-gated or gateless Highway network variant called Residual neural network. This has become the most cited neural network of the 21st century.In 1994, Andr\u00e9 de Carvalho, together with Mike Fairhurst and David Bisset, published experimental results of a multi-layer boolean neural network, also known as a weightless neural network, composed of a 3-layers self-organising feature extraction neural network module (SOFT) followed by a multi-layer classification neural network module (GSN), which were independently trained. Each layer in the feature extraction module extracted features with growing complexity regarding the previous layer.In 1995, Brendan Frey demonstrated that it was possible to train (over two days) a network containing six fully connected layers and several hundred hidden units using the wake-sleep algorithm, co-developed with Peter Dayan and Hinton.Since 1997, Sven Behnke extended the feed-forward hierarchical convolutional approach in the Neural Abstraction Pyramid by lateral and backward connections in order to flexibly incorporate context into decisions and iteratively resolve local ambiguities.\nSimpler models that use task-specific handcrafted features such as Gabor filters and support vector machines (SVMs) were a popular choice in the 1990s and 2000s, because of artificial neural networks' computational cost and a lack of understanding of how the brain wires its biological networks.\nBoth shallow and deep learning (e.g., recurrent nets) of ANNs for speech recognition have been explored for many years. These methods never outperformed non-uniform internal-handcrafting Gaussian mixture model/Hidden Markov model (GMM-HMM) technology based on generative models of speech trained discriminatively. Key difficulties have been analyzed, including gradient diminishing and weak temporal correlation structure in neural predictive models. Additional difficulties were the lack of training data and limited computing power. Most speech recognition researchers moved away from neural nets to pursue generative modeling. An exception was at SRI International in the late 1990s. Funded by the US government's NSA and DARPA, SRI studied deep neural networks (DNNs) in speech and speaker recognition. The speaker recognition team led by Larry Heck reported significant success with deep neural networks in speech processing in the 1998 National Institute of Standards and Technology Speaker Recognition evaluation. The SRI deep neural network was then deployed in the Nuance Verifier, representing the first major industrial application of deep learning. The principle of elevating \"raw\" features over hand-crafted optimization was first explored successfully in the architecture of deep autoencoder on the \"raw\" spectrogram or linear filter-bank features in the late 1990s, showing its superiority over the Mel-Cepstral features that contain stages of fixed transformation from spectrograms. The raw features of speech, waveforms, later produced excellent larger-scale results.Speech recognition was taken over by LSTM. In 2003, LSTM started to become competitive with traditional speech recognizers on certain tasks. In 2006, Alex Graves, Santiago Fern\u00e1ndez, Faustino Gomez, and Schmidhuber combined it with connectionist temporal classification (CTC) in stacks of LSTM RNNs. In 2015, Google's speech recognition reportedly experienced a dramatic performance jump of 49% through CTC-trained LSTM, which they made available through Google Voice Search.The impact of deep learning in industry began in the early 2000s, when CNNs already processed an estimated 10% to 20% of all the checks written in the US, according to Yann LeCun. Industrial applications of deep learning to large-scale speech recognition started around 2010.\nIn 2006, publications by Geoff Hinton, Ruslan Salakhutdinov, Osindero and Teh showed how a many-layered feedforward neural network could be effectively pre-trained one layer at a time, treating each layer in turn as an unsupervised restricted Boltzmann machine, then fine-tuning it using supervised backpropagation. The papers referred to learning for deep belief nets.\nThe 2009 NIPS Workshop on Deep Learning for Speech Recognition was motivated by the limitations of deep generative models of speech, and the possibility that given more capable hardware and large-scale data sets that deep neural nets might become practical. It was believed that pre-training DNNs using generative models of deep belief nets (DBN) would overcome the main difficulties of neural nets. However, it was discovered that replacing pre-training with large amounts of training data for straightforward backpropagation when using DNNs with large, context-dependent output layers produced error rates dramatically lower than then-state-of-the-art Gaussian mixture model (GMM)/Hidden Markov Model (HMM) and also than more-advanced generative model-based systems. The nature of the recognition errors produced by the two types of systems was characteristically different, offering technical insights into how to integrate deep learning into the existing highly efficient, run-time speech decoding system deployed by all major speech recognition systems. Analysis around 2009\u20132010, contrasting the GMM (and other generative speech models) vs. DNN models, stimulated early industrial investment in deep learning for speech recognition.  That analysis was done with comparable performance (less than 1.5% in error rate) between discriminative DNNs and generative models.\nIn 2010, researchers extended deep learning from TIMIT to large vocabulary speech recognition, by adopting large output layers of the DNN based on context-dependent HMM states constructed by decision trees.Deep learning is part of state-of-the-art systems in various disciplines, particularly computer vision and automatic speech recognition (ASR). Results on commonly used evaluation sets such as TIMIT (ASR) and MNIST (image classification), as well as a range of large-vocabulary speech recognition tasks have steadily improved. Convolutional neural networks were superseded for ASR by CTC for LSTM. but are more successful in computer vision.\nAdvances in hardware have driven renewed interest in deep learning. In 2009, Nvidia was involved in what was called the \"big bang\" of deep learning, \"as deep-learning neural networks were trained with Nvidia graphics processing units (GPUs)\". That year, Andrew Ng determined that GPUs could increase the speed of deep-learning systems by about 100 times. In particular, GPUs are well-suited for the matrix/vector computations involved in machine learning. GPUs speed up training algorithms by orders of magnitude, reducing running times from weeks to days. Further, specialized hardware and algorithm optimizations can be used for efficient processing of deep learning models.\n\n\n=== Deep learning revolution ===\nIn the late 2000s, deep learning started to outperform other methods in machine learning competitions.\nIn 2009, a long short-term memory trained by connectionist temporal classification (Alex Graves, Santiago Fern\u00e1ndez, Faustino Gomez, and J\u00fcrgen Schmidhuber, 2006) was the first RNN to win pattern recognition contests, winning three competitions in connected handwriting recognition. Google later used CTC-trained LSTM for speech recognition on the smartphone.Significant impacts in image or object recognition were felt from 2011 to 2012. Although CNNs trained by backpropagation had been around for decades, and GPU implementations of NNs for years, including CNNs, faster implementations of CNNs on GPUs were needed to progress on computer vision. In 2011, the DanNet by Dan Ciresan, Ueli Meier, Jonathan Masci, Luca Maria Gambardella, and J\u00fcrgen Schmidhuber achieved for the first time superhuman performance in a visual pattern recognition contest, outperforming traditional methods by a factor of 3. Also in 2011, DanNet won the ICDAR Chinese handwriting contest, and in May 2012, it won the ISBI image segmentation contest. Until 2011, CNNs did not play a major role at computer vision conferences, but in June 2012, a paper by Ciresan et al. at the leading conference CVPR showed how max-pooling CNNs on GPU can dramatically improve many vision benchmark records.  In September 2012, DanNet also won the ICPR contest on analysis of large medical images for cancer detection, and in the following year also the MICCAI Grand Challenge on the same topic. In October 2012, the similar AlexNet by Alex Krizhevsky, Ilya Sutskever, and Geoffrey Hinton won the large-scale ImageNet competition by a significant margin over shallow machine learning methods. \nThe VGG-16 network by Karen Simonyan and Andrew Zisserman further reduced the error rate and\nwon the ImageNet 2014 competition, following a similar trend in large-scale speech recognition.\nImage classification was then extended to the more challenging task of generating descriptions (captions) for images, often as a combination of CNNs and LSTMs.In 2012, a team led by George E. Dahl won the \"Merck Molecular Activity Challenge\" using multi-task deep neural networks to predict the biomolecular target of one drug. In 2014, Sepp Hochreiter's group used deep learning to detect off-target and toxic effects of environmental chemicals in nutrients, household products and drugs and won the \"Tox21 Data Challenge\" of NIH, FDA and NCATS.In 2016, Roger Parloff mentioned a \"deep learning revolution\" that has transformed the AI industry.In March 2019, Yoshua Bengio, Geoffrey Hinton and Yann LeCun were awarded the Turing Award for conceptual and engineering breakthroughs that have made deep neural networks a critical component of computing.\n\n\n== Neural networks ==\n\nArtificial neural networks (ANNs) or connectionist systems are computing systems inspired by the biological neural networks that constitute animal brains. Such systems learn (progressively improve their ability) to do tasks by considering examples, generally without task-specific programming. For example, in image recognition, they might learn to identify images that contain cats by analyzing example images that have been manually labeled as \"cat\" or \"no cat\" and using the analytic results to identify cats in other images. They have found most use in applications difficult to express with a traditional computer algorithm using rule-based programming.\nAn ANN is based on a collection of connected units called artificial neurons, (analogous to biological neurons in a biological brain). Each connection (synapse) between neurons can transmit a signal to another neuron. The receiving (postsynaptic) neuron can process the signal(s) and then signal downstream neurons connected to it. Neurons may have state, generally represented by real numbers, typically between 0 and 1. Neurons and synapses may also have a weight that varies as learning proceeds, which can increase or decrease the strength of the signal that it sends downstream.\nTypically, neurons are organized in layers. Different layers may perform different kinds of transformations on their inputs. Signals travel from the first (input), to the last (output) layer, possibly after traversing the layers multiple times.\nThe original goal of the neural network approach was to solve problems in the same way that a human brain would. Over time, attention focused on matching specific mental abilities, leading to deviations from biology such as backpropagation, or passing information in the reverse direction and adjusting the network to reflect that information.\nNeural networks have been used on a variety of tasks, including computer vision, speech recognition, machine translation, social network filtering, playing board and video games and medical diagnosis.\nAs of 2017, neural networks typically have a few thousand to a few million units and millions of connections. Despite this number being several order of magnitude less than the number of neurons on a human brain, these networks can perform many tasks at a level beyond that of humans (e.g., recognizing faces, or playing \"Go\").\n\n\n=== Deep neural networks ===\nA deep neural network (DNN) is an artificial neural network with multiple layers between the input and output layers. There are different types of neural networks but they always consist of the same components: neurons, synapses, weights, biases, and functions. These components as a whole function in a way that mimics functions of the human brain, and can be trained like any other ML algorithm.For example, a DNN that is trained to recognize dog breeds will go over the given image and calculate the probability that the dog in the image is a certain breed. The user can review the results and select which probabilities the network should display (above a certain threshold, etc.) and return the proposed label. Each mathematical manipulation as such is considered a layer, and complex DNN have many layers, hence the name \"deep\" networks.\nDNNs can model complex non-linear relationships. DNN architectures generate compositional models where the object is expressed as a layered composition of primitives. The extra layers enable composition of features from lower layers, potentially modeling complex data with fewer units than a similarly performing shallow network. For instance, it was proved that sparse multivariate polynomials are exponentially easier to approximate with DNNs than with shallow networks.Deep architectures include many variants of a few basic approaches. Each architecture has found success in specific domains. It is not always possible to compare the performance of multiple architectures, unless they have been evaluated on the same data sets.\nDNNs are typically feedforward networks in which data flows from the input layer to the output layer without looping back. At first, the DNN creates a map of virtual neurons and assigns random numerical values, or \"weights\", to connections between them. The weights and inputs are multiplied and return an output between 0 and 1. If the network did not accurately recognize a particular pattern, an algorithm would adjust the weights. That way the algorithm can make certain parameters more influential, until it determines the correct mathematical manipulation to fully process the data.\nRecurrent neural networks, in which data can flow in any direction, are used for applications such as language modeling. Long short-term memory is particularly effective for this use.Convolutional neural networks (CNNs) are used in computer vision. CNNs also have been applied to acoustic modeling for automatic speech recognition (ASR).\n\n\n==== Challenges ====\nAs with ANNs, many issues can arise with naively trained DNNs. Two common issues are overfitting and computation time.\nDNNs are prone to overfitting because of the added layers of abstraction, which allow them to model rare dependencies in the training data. Regularization methods such as Ivakhnenko's unit pruning or weight decay (\n  \n    \n      \n        \n          \u2113\n          \n            2\n          \n        \n      \n    \n    {\\displaystyle \\ell _{2}}\n  -regularization) or sparsity (\n  \n    \n      \n        \n          \u2113\n          \n            1\n          \n        \n      \n    \n    {\\displaystyle \\ell _{1}}\n  -regularization) can be applied during training to combat overfitting. Alternatively dropout regularization randomly omits units from the hidden layers during training. This helps to exclude rare dependencies. Finally, data can be augmented via methods such as cropping and rotating such that smaller training sets can be increased in size to reduce the chances of overfitting.DNNs must consider many training parameters, such as the size (number of layers and number of units per layer), the learning rate, and initial weights. Sweeping through the parameter space for optimal parameters may not be feasible due to the cost in time and computational resources. Various tricks, such as batching (computing the gradient on several training examples at once rather than individual examples) speed up computation. Large processing capabilities of many-core architectures (such as GPUs or the Intel Xeon Phi) have produced significant speedups in training, because of the suitability of such processing architectures for the matrix and vector computations.Alternatively, engineers may look for other types of neural networks with more straightforward and convergent training algorithms. CMAC (cerebellar model articulation controller) is one such kind of neural network. It doesn't require learning rates or randomized initial weights. The training process can be guaranteed to converge in one step with a new batch of data, and the computational complexity of the training algorithm is linear with respect to the number of neurons involved.\n\n\n== Hardware ==\nSince the 2010s, advances in both machine learning algorithms and computer hardware have led to more efficient methods for training deep neural networks that contain many layers of non-linear hidden units and a very large output layer. By 2019, graphic processing units (GPUs), often with AI-specific enhancements, had displaced CPUs as the dominant method of training large-scale commercial cloud AI. OpenAI estimated the hardware computation used in the largest deep learning projects from AlexNet (2012) to AlphaZero (2017), and found a 300,000-fold increase in the amount of computation required, with a doubling-time trendline of 3.4 months.Special electronic circuits called deep learning processors were designed to speed up deep learning algorithms. Deep learning processors include neural processing units (NPUs) in Huawei cellphones and cloud computing servers such as tensor processing units (TPU) in the Google Cloud Platform. Cerebras Systems has also built a dedicated system to handle large deep learning models, the CS-2, based on the largest processor in the industry, the second-generation Wafer Scale Engine (WSE-2).Atomically thin semiconductors are considered promising for energy-efficient deep learning hardware where the same basic device structure is used for both logic operations and data storage.\nIn 2020, Marega et al. published experiments with a large-area active channel material for developing logic-in-memory devices and circuits based on floating-gate field-effect transistors (FGFETs).In 2021, J. Feldmann et al. proposed an integrated photonic hardware accelerator for parallel convolutional processing. The authors identify two key advantages of integrated photonics over its electronic counterparts: (1) massively parallel data transfer through wavelength division multiplexing in conjunction with frequency combs, and (2) extremely high data modulation speeds. Their system can execute trillions of multiply-accumulate operations per second, indicating the potential of integrated photonics in data-heavy AI applications.\n\n\n== Applications ==\n\n\n=== Automatic speech recognition ===\n\nLarge-scale automatic speech recognition is the first and most convincing successful case of deep learning. LSTM RNNs can learn \"Very Deep Learning\" tasks that involve multi-second intervals containing speech events separated by thousands of discrete time steps, where one time step corresponds to about 10 ms. LSTM with forget gates is competitive with traditional speech recognizers on certain tasks.The initial success in speech recognition was based on small-scale recognition tasks based on TIMIT. The data set contains 630 speakers from eight major dialects of American English, where each speaker reads 10 sentences. Its small size lets many configurations be tried. More importantly, the TIMIT task concerns phone-sequence recognition, which, unlike word-sequence recognition, allows weak phone bigram language models. This lets the strength of the acoustic modeling aspects of speech recognition be more easily analyzed. The error rates listed below, including these early results and measured as percent phone error rates (PER), have been summarized since 1991.\n\nThe debut of DNNs for speaker recognition in the late 1990s and speech recognition around 2009-2011 and of LSTM around 2003\u20132007, accelerated progress in eight major areas:\nScale-up/out and accelerated DNN training and decoding\nSequence discriminative training\nFeature processing by deep models with solid understanding of the underlying mechanisms\nAdaptation of DNNs and related deep models\nMulti-task and transfer learning by DNNs and related deep models\nCNNs and how to design them to best exploit domain knowledge of speech\nRNN and its rich LSTM variants\nOther types of deep models including tensor-based models and integrated deep generative/discriminative models.All major commercial speech recognition systems (e.g., Microsoft Cortana, Xbox, Skype Translator, Amazon Alexa, Google Now, Apple Siri, Baidu and iFlyTek voice search, and a range of Nuance speech products, etc.) are based on deep learning.\n\n\n=== Image recognition ===\n\nA common evaluation set for image classification is the MNIST database data set. MNIST is composed of handwritten digits and includes 60,000 training examples and 10,000 test examples. As with TIMIT, its small size lets users test multiple configurations. A comprehensive list of results on this set is available.Deep learning-based image recognition has become \"superhuman\", producing more accurate results than human contestants. This first occurred in 2011 in recognition of traffic signs, and in 2014, with recognition of human faces.Deep learning-trained vehicles now interpret 360\u00b0 camera views. Another example is Facial Dysmorphology Novel Analysis (FDNA) used to analyze cases of human malformation connected to a large database of genetic syndromes.\n\n\n=== Visual art processing ===\nClosely related to the progress that has been made in image recognition is the increasing application of deep learning techniques to various visual art tasks. DNNs have proven themselves capable, for example, of\n\nidentifying the style period of a given painting\nNeural Style Transfer \u2013  capturing the style of a given artwork and applying it in a visually pleasing manner to an arbitrary photograph or video\ngenerating striking imagery based on random visual input fields.\n\n\n=== Natural language processing ===\n\nNeural networks have been used for implementing language models since the early 2000s. LSTM helped to improve machine translation and language modeling.Other key techniques in this field are negative sampling and word embedding. Word embedding, such as word2vec, can be thought of as a representational layer in a deep learning architecture that transforms an atomic word into a positional representation of the word relative to other words in the dataset; the position is represented as a point in a vector space. Using word embedding as an RNN input layer allows the network to parse sentences and phrases using an effective compositional vector grammar. A compositional vector grammar can be thought of as probabilistic context free grammar (PCFG) implemented by an RNN. Recursive auto-encoders built atop word embeddings can assess sentence similarity and detect paraphrasing. Deep neural architectures provide the best results for constituency parsing, sentiment analysis, information retrieval, spoken language understanding, machine translation, contextual entity linking, writing style recognition, named-entity recognition (token classification), text classification, and others.Recent developments generalize word embedding to sentence embedding.\nGoogle Translate (GT) uses a large end-to-end long short-term memory (LSTM) network. Google Neural Machine Translation (GNMT) uses an example-based machine translation method in which the system \"learns from millions of examples\". It translates \"whole sentences at a time, rather than pieces\". Google Translate supports over one hundred languages. The network encodes the \"semantics of the sentence rather than simply memorizing phrase-to-phrase translations\". GT uses English as an intermediate between most language pairs.\n\n\n=== Drug discovery and toxicology ===\n\nA large percentage of candidate drugs fail to win regulatory approval. These failures are caused by insufficient efficacy (on-target effect), undesired interactions (off-target effects), or unanticipated toxic effects. Research has explored use of deep learning to predict the biomolecular targets, off-targets, and toxic effects of environmental chemicals in nutrients, household products and drugs.AtomNet is a deep learning system for structure-based rational drug design. AtomNet was used to predict novel candidate biomolecules for disease targets such as the Ebola virus and multiple sclerosis.In 2017 graph neural networks were used for the first time to predict various properties of molecules in a large toxicology data set. In 2019, generative neural networks were used to produce molecules that were validated experimentally all the way into mice.\n\n\n=== Customer relationship management ===\n\nDeep reinforcement learning has been used to approximate the value of possible direct marketing actions, defined in terms of RFM variables. The estimated value function was shown to have a natural interpretation as customer lifetime value.\n\n\n=== Recommendation systems ===\n\nRecommendation systems have used deep learning to extract meaningful features for a latent factor model for content-based music and journal recommendations. Multi-view deep learning has been applied for learning user preferences from multiple domains. The model uses a hybrid collaborative and content-based approach and enhances recommendations in multiple tasks.\n\n\n=== Bioinformatics ===\n\nAn autoencoder ANN was used in bioinformatics, to predict gene ontology annotations and gene-function relationships.In medical informatics, deep learning was used to predict sleep quality based on data from wearables and predictions of health complications from electronic health record data.\n\n\n=== Deep Neural Network Estimations ===\nDeep neural networks can be used to estimate the entropy of a stochastic process and called Neural Joint Entropy Estimator (NJEE). Such an estimation provides insights on the effects of input random variables on an independent random variable. Practically, the DNN is trained as a classifier that maps an input vector or matrix X to an output probability distribution over the possible classes of random variable Y, given input X. For example, in image classification tasks, the NJEE maps a vector of pixels' color values to probabilities over possible image classes. In practice, the probability distribution of Y is obtained by a Softmax layer with number of nodes that is equal to the alphabet size of Y. NJEE uses continuously differentiable activation functions, such that the conditions for the universal approximation theorem holds. It is shown that this method provides a strongly consistent estimator and outperforms other methods in case of large alphabet sizes.\n\n\n=== Medical image analysis ===\nDeep learning has been shown to produce competitive results in medical application such as cancer cell classification, lesion detection, organ segmentation and image enhancement. Modern deep learning tools demonstrate the high accuracy of detecting various diseases and the helpfulness of their use by specialists to improve the diagnosis efficiency.\n\n\n=== Mobile advertising ===\nFinding the appropriate mobile audience for mobile advertising is always challenging, since many data points must be considered and analyzed before a target segment can be created and used in ad serving by any ad server. Deep learning has been used to interpret large, many-dimensioned advertising datasets. Many data points are collected during the request/serve/click internet advertising cycle. This information can form the basis of machine learning to improve ad selection.\n\n\n=== Image restoration ===\nDeep learning has been successfully applied to inverse problems such as denoising, super-resolution, inpainting, and film colorization. These applications include learning methods such as \"Shrinkage Fields for Effective Image Restoration\" which trains on an image dataset, and Deep Image Prior, which trains on the image that needs restoration.\n\n\n=== Financial fraud detection ===\nDeep learning is being successfully applied to financial fraud detection, tax evasion detection, and anti-money laundering.\n\n\n=== Materials science ===\nIn November 2023, researchers at Google DeepMind and Lawrence Berkeley National Laboratory announced that they had developed an AI system known as GNoME. This system has contributed to materials science by discovering over 2 million new materials within a relatively short timeframe. GNoME employs deep learning techniques to efficiently explore potential material structures, achieving a significant increase in the identification of stable inorganic crystal structures. The system's predictions were validated through autonomous robotic experiments, demonstrating a noteworthy success rate of 71%. The data of newly discovered materials is publicly available through the Materials Project database, offering researchers the opportunity to identify materials with desired properties for various applications. This development has implications for the future of scientific discovery and the integration of AI in material science research, potentially expediting material innovation and reducing costs in product development. The use of AI and deep learning suggests the possibility of minimizing or eliminating manual lab experiments and allowing scientists to focus more on the design and analysis of unique compounds.\n\n\n=== Military ===\nThe United States Department of Defense applied deep learning to train robots in new tasks through observation.\n\n\n=== Partial differential equations ===\nPhysics informed neural networks have been used to solve partial differential equations in both forward and inverse problems in a data driven manner. One example is the reconstructing fluid flow governed by the Navier-Stokes equations. Using physics informed neural networks does not require the often expensive mesh generation that conventional CFD methods relies on.\n\n\n=== Image reconstruction ===\nImage reconstruction is the reconstruction of the underlying images from the image-related measurements. Several works showed the better and superior performance of the deep learning methods compared to analytical methods for various applications, e.g., spectral imaging  and ultrasound imaging.\n\n\n=== Epigenetic clock ===\n\nAn epigenetic clock is a biochemical test that can be used to measure age. Galkin et al. used deep neural networks to train an epigenetic aging clock of unprecedented accuracy using >6,000 blood samples. The clock uses information from 1000 CpG sites and predicts people with certain conditions older than healthy controls: IBD, frontotemporal dementia, ovarian cancer, obesity. The aging clock was planned to be released for public use in 2021 by an Insilico Medicine spinoff company Deep Longevity.\n\n\n== Relation to human cognitive and brain development ==\nDeep learning is closely related to a class of theories of brain development (specifically, neocortical development) proposed by cognitive neuroscientists in the early 1990s. These developmental theories were instantiated in computational models, making them predecessors of deep learning systems. These developmental models share the property that various proposed learning dynamics in the brain (e.g., a wave of nerve growth factor) support the self-organization somewhat analogous to the neural networks utilized in deep learning models. Like the neocortex, neural networks employ a hierarchy of layered filters in which each layer considers information from a prior layer (or the operating environment), and then passes its output (and possibly the original input), to other layers. This process yields a self-organizing stack of transducers, well-tuned to their operating environment. A 1995 description stated, \"...the infant's brain seems to organize itself under the influence of waves of so-called trophic-factors ... different regions of the brain become connected sequentially, with one layer of tissue maturing before another and so on until the whole brain is mature\".A variety of approaches have been used to investigate the plausibility of deep learning models from a neurobiological perspective. On the one hand, several variants of the backpropagation algorithm have been proposed in order to increase its processing realism. Other researchers have argued that unsupervised forms of deep learning, such as those based on hierarchical generative models and deep belief networks, may be closer to biological reality. In this respect, generative neural network models have been related to neurobiological evidence about sampling-based processing in the cerebral cortex.Although a systematic comparison between the human brain organization and the neuronal encoding in deep networks has not yet been established, several analogies have been reported. For example, the computations performed by deep learning units could be similar to those of actual neurons and neural populations. Similarly, the representations developed by deep learning models are similar to those measured in the primate visual system both at the single-unit and at the population levels.\n\n\n== Commercial activity ==\nFacebook's AI lab performs tasks such as automatically tagging uploaded pictures with the names of the people in them.Google's DeepMind Technologies developed a system capable of learning how to play Atari video games using only pixels as data input. In 2015 they demonstrated their AlphaGo system, which learned the game of Go well enough to beat a professional Go player. Google Translate uses a neural network to translate between more than 100 languages.\nIn 2017, Covariant.ai was launched, which focuses on integrating deep learning into factories.As of 2008, researchers at The University of Texas at Austin (UT) developed a machine learning framework called Training an Agent Manually via Evaluative Reinforcement, or TAMER, which proposed new methods for robots or computer programs to learn how to perform tasks by interacting with a human instructor. First developed as TAMER, a new algorithm called Deep TAMER was later introduced in 2018 during a collaboration between U.S. Army Research Laboratory (ARL) and UT researchers. Deep TAMER used deep learning to provide a robot with the ability to learn new tasks through observation. Using Deep TAMER, a robot learned a task with a human trainer, watching video streams or observing a human perform a task in-person. The robot later practiced the task with the help of some coaching from the trainer, who provided feedback such as \"good job\" and \"bad job\".\n\n\n== Criticism and comment ==\nDeep learning has attracted both criticism and comment, in some cases from outside the field of computer science.\n\n\n=== Theory ===\n\nA main criticism concerns the lack of theory surrounding some methods. Learning in the most common deep architectures is implemented using well-understood gradient descent. However, the theory surrounding other algorithms, such as contrastive divergence is less clear. (e.g., Does it converge? If so, how fast? What is it approximating?) Deep learning methods are often looked at as a black box, with most confirmations done empirically, rather than theoretically.Others point out that deep learning should be looked at as a step towards realizing strong AI, not as an all-encompassing solution. Despite the power of deep learning methods, they still lack much of the functionality needed to realize this goal entirely. Research psychologist Gary Marcus noted:\n\nRealistically, deep learning is only part of the larger challenge of building intelligent machines. Such techniques lack ways of representing causal relationships (...) have no obvious ways of performing logical inferences, and they are also still a long way from integrating abstract knowledge, such as information about what objects are, what they are for, and how they are typically used. The most powerful A.I. systems, like Watson (...) use techniques like deep learning as just one element in a very complicated ensemble of techniques, ranging from the statistical technique of Bayesian inference to deductive reasoning.\n\nIn further reference to the idea that artistic sensitivity might be inherent in relatively low levels of the cognitive hierarchy, a published series of graphic representations of the internal states of deep (20-30 layers) neural networks attempting to discern within essentially random data the images on which they were trained demonstrate a visual appeal: the original research notice received well over 1,000 comments, and was the subject of what was for a time the most frequently accessed article on The Guardian's website.\n\n\n=== Errors ===\nSome deep learning architectures display problematic behaviors, such as confidently classifying unrecognizable images as belonging to a familiar category of ordinary images (2014) and misclassifying minuscule perturbations of correctly classified images (2013). Goertzel hypothesized that these behaviors are due to limitations in their internal representations and that these limitations would inhibit integration into heterogeneous multi-component artificial general intelligence (AGI) architectures. These issues may possibly be addressed by deep learning architectures that internally form states homologous to image-grammar decompositions of observed entities and events. Learning a grammar (visual or linguistic) from training data would be equivalent to restricting the system to commonsense reasoning that operates on concepts in terms of grammatical production rules and is a basic goal of both human language acquisition and artificial intelligence (AI).\n\n\n=== Cyber threat ===\nAs deep learning moves from the lab into the world, research and experience show that artificial neural networks are vulnerable to hacks and deception. By identifying patterns that these systems use to function, attackers can modify inputs to ANNs in such a way that the ANN finds a match that human observers would not recognize. For example, an attacker can make subtle changes to an image such that the ANN finds a match even though the image looks to a human nothing like the search target. Such manipulation is termed an \"adversarial attack\".In 2016 researchers used one ANN to doctor images in trial and error fashion, identify another's focal points, and thereby generate images that deceived it. The modified images looked no different to human eyes. Another group showed that printouts of doctored images then photographed successfully tricked an image classification system. One defense is reverse image search, in which a possible fake image is submitted to a site such as TinEye that can then find other instances of it. A refinement is to search using only parts of the image, to identify images from which that piece may have been taken.Another group showed that certain psychedelic spectacles could fool a facial recognition system into thinking ordinary people were celebrities, potentially allowing one person to impersonate another. In 2017 researchers added stickers to stop signs and caused an ANN to misclassify them.ANNs can however be further trained to detect attempts at deception, potentially leading attackers and defenders into an arms race similar to the kind that already defines the malware defense industry. ANNs have been trained to defeat ANN-based anti-malware software by repeatedly attacking a defense with malware that was continually altered by a genetic algorithm until it tricked the anti-malware while retaining its ability to damage the target.In 2016, another group demonstrated that certain sounds could make the Google Now voice command system open a particular web address, and hypothesized that this could \"serve as a stepping stone for further attacks (e.g., opening a web page hosting drive-by malware)\".In \"data poisoning\", false data is continually smuggled into a machine learning system's training set to prevent it from achieving mastery.\n\n\n=== Data collection ethics ===\nMost Deep Learning systems rely on training and verification data that is generated and/or annotated by humans. It has been argued in media philosophy that not only low-paid clickwork (e.g. on Amazon Mechanical Turk) is regularly deployed for this purpose, but also implicit forms of human microwork that are often not recognized as such. The philosopher Rainer M\u00fchlhoff distinguishes five types of \"machinic capture\" of human microwork to generate training data: (1) gamification (the embedding of annotation or computation tasks in the flow of a game), (2) \"trapping and tracking\" (e.g. CAPTCHAs for image recognition or click-tracking on Google search results pages), (3) exploitation of social motivations (e.g. tagging faces on Facebook to obtain labeled facial images), (4) information mining (e.g. by leveraging quantified-self devices such as activity trackers) and (5) clickwork.M\u00fchlhoff argues that in most commercial end-user applications of Deep Learning such as Facebook's face recognition system, the need for training data does not stop once an ANN is trained. Rather, there is a continued demand for human-generated verification data to constantly calibrate and update the ANN. For this purpose, Facebook introduced the feature that once a user is automatically recognized in an image, they receive a notification. They can choose whether or not they like to be publicly labeled on the image, or tell Facebook that it is not them in the picture. This user interface is a mechanism to generate \"a constant stream of verification data\" to further train the network in real-time. As M\u00fchlhoff argues, the involvement of human users to generate training and verification data is so typical for most commercial end-user applications of Deep Learning that such systems may be referred to as \"human-aided artificial intelligence\".\n\n\n\n\n\n                           Answer: \n\n"}, {"role": "assistant", "content": "Classical machine learning involves defining functions to predict a label value (y) based on input features (x), typically using algorithms like logistic regression to determine coefficients. Deep learning is a class of machine learning algorithms that uses multiple layers to progressively extract higher-level features from the raw input.\n\nDeep learning mimics the human brain by using artificial neurons with weighted inputs (x), bias (b), and an activation function to determine firing or non-firing (y). This can be represented by the equation, y = f(x, w, b), where:\n* Activation function: Some function f(x, w, b) that outputs some value y to determine fire/non-firing. Often use a function that maps y to a value between 0 and 1.\n* x: Inputs of the neurons\n* w: Weights that is applied to input\n* b: Bias \n* y: Whether or not the neuron fires.\n\nThese artificial neurons are interconnected in layers, with weighted connections between neurons allowing for complex function approximation. A deep learning neural network has many interconnected layers, known as hidden layers, until the output is connected to an output layer, where the number of neurons is the same as the number of classes.\n\nIn deep learning, each level learns to transform its input data into a slightly more abstract and composite representation. In an image recognition application, the raw input may be a matrix of pixels; the first representational layer may abstract the pixels and encode edges; the second layer may compose and encode arrangements of edges; the third layer may encode a nose and eyes; and the fourth layer may recognize that the image contains a face. Importantly, a deep learning process can learn which features to optimally place in which level on its own. This does not eliminate the need for hand-tuning; for example, varying numbers of layers and layer sizes can provide different degrees of abstraction.\n\nThe loss function measures the difference between predicted probabilities and known labels, indicating the amount of error in the model. We want to use this loss function to collect the gradient in order to calculate how much you need to adjust the model's weight and biases to reduce the amount of loss. The amount you adjust each variable by is called the learning rate. A low learning rate results in small adjustments, meaning we might have to do a lot of iterations to minimize the error. Too large of a learning rate results in large adjustments, so we might step too far and not find the minimum part of the gradient\n\nThe gradient of the loss function guides adjustments to weights and biases to reduce loss through a process known as backpropagation. Backpropagation is a gradient estimation method that utilizes the chain rule to determine how best to adjust the weights and biases to minimize the loss function which involves. Training a neural network involves feeding input data with known labels and iteratively performing backpropagation to adjust weights and biases to minimize loss through epochs (cycles of training and validation). Since GPUs are optimized for the linear algebra calculations used in training deep learning models, it makes them commonly used for this purpose.\n\n\n"}]}
{"messages": [{"role": "system", "content": "\n                      Please write a 500 word summary on the following Transcript based on the Reading Material.\n                      Pick relevant information from the Reading Material and add it to the summary of the Transcript.\n                      The Summary should be only of the Transcript with a few information from the Reading Material.\n                      If you are not sure of the summary, say 'I don't know'.\n    "}, {"role": "user", "content": "Transcript: in this video I'm going to define whether it's probably the most common type of machine learning problem which is supervised learning I'll define supervised learning more formally later but it's probably best to explain I'll start with an example of what it is and we'll do the formal definition later let's say you want to predict housing prices a while back a student collected data sets from the city of Portland Oregon and let's say you plot the data set and it looks like this here on the horizontal axis the size of different houses and square feet and on the vertical axis the practice of different houses in thousands of dollars so given this data let's say you have a friend who owns a house that is saying 750 square feet and they're hoping to sell the house and they want to know how much they can get for the house so how can the learning algorithm help you one thing a learning algorithm might be able to do is put a straight line through the date arrow so the fit a straight line to the data and based on that it looks like maybe their holes can be so full maybe about 150 thousand dollars but maybe this isn't the only learning algorithm you can use and it might be a better one for example instead of fitting a straight line to the data we might decide that it's better to fill a quadratic function or a second-order polynomial to this data and if you do that to make a prediction here then it looks like well maybe they can sell the house well closer to $200,000 one of the things we'll talk about later is how to choose and how to decide do you want to fit a straight line to the data or do you want to fit a quadratic function the data and there's no fair picking whichever one gives your friend the better house to sell but each of these would be a fine example of a learning algorithm so this is an example of a supervised learning algorithm and the term supervised learning refers to the fact that we gave the algorithm a data set in which the right answers were given that is we gave it a data set of houses in which for every exam all in this data set we told it what is the right price what was the actual price that that holds so for and the TAS of the algorithm was to just produce more of these right answers such as for this new house you know that your friend may be trying to sell to define a bit more terminology this is also called a regression problem and by regression problem I mean we're trying to predict a continuous value output namely the price so technically against prices can be rounded off to the nearest cent so maybe prices are actually discrete value but usually we think of the price of a house as a roll number was a scalar value as a continuous value number and the term regression refers to the fact that we're trying to predict this sort of a continuous value to attribute here's another supervised learning examples some friends and I were actually working on this earlier let's say you want to look at medical records and try to predictive a breast cancer as malignant or benign if someone discovers a breast tumor a lump in their breast a malignant tumor is a tumor that is harmful and dangerous and a benign tumor is a tumor this is harmless so obviously people care a lot about this let's see collect the data set and suppose you're in your data set you have on your horizontal axis the size of the tumor and on the vertical axis I'm going to plot 1 or 0 yes or no whether or not these are examples of tumors we've seen before are malignant which is 1 or 0 of not malignant or benign so let's say your data set looks like this where we saw a tumor of this size that turned out to be benign one of this size one of this size and so on and sadly we also saw a few malignant tumors so one of that size one of that size one of that size so on so in this example I have 5 examples of benign tumors shown down here and 5 examples of malignant tumors shown with a vertical axis value of 1 and let's name a friend who tragically has a breast tumor and let's say her breast tumor size maybe somewhere around this value the machine learning question is can you estimate what is the probability what's the chance that the tumor is malignant versus benign to introduce a bit more terminology this is an example of a classification problem the term classification refers to the fact that here we're trying to predict a discrete value output zero or one malignant or benign and it turns out that in classification problem sometimes you can have more than two values for the two possible values for the output as a complete example maybe there are three types of breast cancers and so you may try to predict the discrete value output 0 1 2 or 3 where 0 may mean benign benign tumor so no cancer and one may mean a type 1 cancer I give three types of cancer whatever type one means and two may mean the second type of cancer and 3 may mean a third type of cancer but this would also be a classification problem because this other discrete value set of outputs corresponding to no cancer or cancer type 1 or cancer type 2 or type 3 in classification problems there is another way to plot this data let me show you what I mean I'm going to use a slightly different set of symbols to plot this data so if tumor science is going to be the attribute that I'm going to use to predict malignancy or benign Ness I can also draw my data like this I'm going to use different symbols to denote my benign and malignant or my a negative and positive examples so instead of drawing crosses I'm now going to draw holes for the benign tumors like so and I'm going to keep using X's to denote my malignant tumors ok I hope this make it make sense all I did was I took you know these my data set on top and I just mapped it down to this real line like so and started to use different symbol circles and crosses to denote malignant versus benign examples now in this example we use only one feature or one attribute namely the tumor size in order to predict whether tumor is malignant or benign in other machine learning problems we may have more than one feature or more than one attribute here's an example let's say that instead of just knowing the tumor size we know about the age of the patient and the tumor size in that case maybe your data set would look like this where I may have a set of patients with those ages in that tumor size and look like this and different set of patients that look a little different whose tumors turn out to be malignant as denoted by the crosses so let's say you have a friend who tragically has a tumor and maybe their tumor size and age falls around there so given the data set like this what the learning algorithm may do is for the straight line to the data to try to separate out the malignant tumors from the benign ones and so the learning algorithm may decide to for the straight line like that to separate out the two classes of tumors and you know with this hopefully we can decide that your friend's tumor is more likely so if it was over there then hopefully in the learning algorithm will say that your friend's tumor falls on this benign side and is therefore more likely to be benign than malignant in this example we had two features namely the age of the patient and the size of the tumor in other machine learning problems we will often have more features and my friends that work on this problem they actually use other features like these which is clump thickness clump thickness of the breast tumor uniformity of cell size of the tumor uniformity of cell shape of the tumor and so on and other features as well and it turns out one of the interests most interesting learning algorithms that we'll see in this false as a learning algorithm they can deal with not just two or three or five features but an infinite features on this slide I've listed a total of five different features right - on the axes and three more up here but it turns out that for some learning problems what you really want is not to use like three or five features but instead you want to use an infinite number of features an infinite number of attributes so that your learning algorithm has lots of attributes or features or cues with which to make those predictions so how do you deal with an infinite number of features and so how do you even store an infinite number of things on a computer and your computer can run on the memory well it turns out that when we talk about an algorithm called the support vector machine there will be a neat mathematical trick that will allow a computer to deal with an infinite number of features imagine that I didn't just write down you know two features here and three features on the right but imagine that I wrote down an infinitely long list I just kept writing more and more and more feature that's like an infinitely long list of features turns out we'll be able to come up with an algorithm that can deal with that so just to recap in this class we'll talk about supervised learning and the idea is that in supervised learning in every example in our dataset we are told what is the correct answer that we would have quite like the algorithms are predicted on that example such as the price of the house or whether a tumor is malignant or benign we also talked about the regression problem and by regression that means that our goal is to predict a continuous valued output and we talked about the classification problem where the goal is to predict a discrete value output just a quick wrap-up question suppose you're running a company and you want to develop learning algorithms to address each of two problems in the first problem you have a large inventory of identical items so imagine that you have thousands of copies of some identical item to sell and you want to predict how many of these items you sell over the next three months in the second problem problem to you you light you you have lots of users and you want to write software to examine each individual of your customers accounts so each one of your customers account and for each account decide whether or not the account has been hacked or compromised so for each of these problems should they be treated as a classification problem or as a regression problem when the video pauses please use your mouse to select whichever of these four options on the left you think is the correct answer so hopefully you got that this is the answer for problem 1 I would treat this as a regression problem because if I have you know thousands of items well I would probably just treat this as a real value as a continuous value and treat therefore the number of items I sell as a continuous value and for the second problem I would treat that as a classification problem because I might say set the value I want to predict to be 0 to denote the account has not been hacked and set the value 1 to denote an account that has been hacked into so just like your breast cancers right 0 or benign 1 is malignant so I might set this be 0 or 1 depending whether it's been hacked and have an algorithm try to predict each one of these two discrete values and because that's a small number of discrete values I would therefore treat it as a classification problem so that's it for supervised learning and in the next video I will talk about unsupervised learning which is the other major category of learning algorithm\n\n\n                           Reading Material: Supervised learning (SL) is a paradigm in machine learning where input objects (for example, a vector of predictor variables) and a desired output value (also known as human-labeled supervisory signal) train a model. The training data is processed, building a function that maps new data on expected output values.  An optimal scenario will allow for the algorithm to correctly determine output values for unseen instances. This requires the learning algorithm to generalize from the training data to unseen situations in a \"reasonable\" way (see inductive bias). This statistical quality of an algorithm is measured through the so-called generalization error.\n\n\n== Steps to follow ==\nTo solve a given problem of supervised learning, one has to perform the following steps:\n\nDetermine the type of training examples. Before doing anything else, the user should decide what kind of data is to be used as a training set. In the case of handwriting analysis, for example, this might be a single handwritten character, an entire handwritten word, an entire sentence of handwriting or perhaps a full paragraph of handwriting.\nGather a training set. The training set needs to be representative of the real-world use of the function. Thus, a set of input objects is gathered and corresponding outputs are also gathered, either from human experts or from measurements.\nDetermine the input feature representation of the learned function. The accuracy of the learned function depends strongly on how the input object is represented. Typically, the input object is transformed into a feature vector, which contains a number of features that are descriptive of the object. The number of features should not be too large, because of the curse of dimensionality; but should contain enough information to accurately predict the output.\nDetermine the structure of the learned function and corresponding learning algorithm. For example, the engineer may choose to use support-vector machines or decision trees.\nComplete the design. Run the learning algorithm on the gathered training set. Some supervised learning algorithms require the user to determine certain control parameters. These parameters may be adjusted by optimizing performance on a subset (called a validation set) of the training set, or via cross-validation.\nEvaluate the accuracy of the learned function. After parameter adjustment and learning, the performance of the resulting function should be measured on a test set that is separate from the training set.\n\n\n== Algorithm choice ==\nA wide range of supervised learning algorithms are available, each with its strengths and weaknesses. There is no single learning algorithm that works best on all supervised learning problems (see the No free lunch theorem).\nThere are four major issues to consider in supervised learning:\n\n\n=== Bias-variance tradeoff ===\n\nA first issue is the tradeoff between bias and variance. Imagine that we have available several different, but equally good, training data sets. A learning algorithm is biased for a particular input \n  \n    \n      \n        x\n      \n    \n    {\\displaystyle x}\n   if, when trained on each of these data sets, it is systematically incorrect when predicting the correct output for \n  \n    \n      \n        x\n      \n    \n    {\\displaystyle x}\n  . A learning algorithm has high variance for a particular input \n  \n    \n      \n        x\n      \n    \n    {\\displaystyle x}\n   if it predicts different output values when trained on different training sets. The prediction error of a learned classifier is related to the sum of the bias and the variance of the learning algorithm. Generally, there is a tradeoff between bias and variance. A learning algorithm with low bias must be \"flexible\" so that it can fit the data well. But if the learning algorithm is too flexible, it will fit each training data set differently, and hence have high variance. A key aspect of many supervised learning methods is that they are able to adjust this tradeoff between bias and variance (either automatically or by providing a bias/variance parameter that the user can adjust).\n\n\n=== Function complexity and amount of training data ===\nThe second issue is of the amount of training data available relative to the complexity of the \"true\" function (classifier or regression function). If the true function is simple, then an \"inflexible\" learning algorithm with high bias and low variance will be able to learn it from a small amount of data. But if the true function is highly complex (e.g., because it involves complex interactions among many different input features and behaves differently in different parts of the input space), then the function will only be able to learn with a large amount of training data paired with a \"flexible\" learning algorithm with low bias and high variance.\n\n\n=== Dimensionality of the input space ===\nA third issue is the dimensionality of the input space. If the input feature vectors have large dimensions, learning the function can be difficult even if the true function only depends on a small number of those features. This is because the many \"extra\" dimensions can confuse the learning algorithm and cause it to have high variance. Hence, input data of large dimensions typically requires tuning the classifier to have low variance and high bias. In practice, if the engineer can manually remove irrelevant features from the input data, it will likely improve the accuracy of the learned function. In addition, there are many algorithms for feature selection that seek to identify the relevant features and discard the irrelevant ones. This is an instance of the more general strategy of dimensionality reduction, which seeks to map the input data into a lower-dimensional space prior to running the supervised learning algorithm.\n\n\n=== Noise in the output values ===\nA fourth issue is the degree of noise in the desired output values (the supervisory target variables). If the desired output values are often incorrect (because of human error or sensor errors), then the learning algorithm should not attempt to find a function that exactly matches the training examples. Attempting to fit the data too carefully leads to overfitting. You can overfit even when there are no measurement errors (stochastic noise) if the function you are trying to learn is too complex for your learning model. In such a situation, the part of the target function that cannot be modeled \"corrupts\" your training data - this phenomenon has been called deterministic noise. When either type of noise is present, it is better to go with a higher bias, lower variance estimator.\nIn practice, there are several approaches to alleviate noise in the output values such as early stopping to prevent overfitting as well as detecting and removing the noisy training examples prior to training the supervised learning algorithm. There are several algorithms that identify noisy training examples and removing the suspected noisy training examples prior to training has decreased generalization error with statistical significance.\n\n\n=== Other factors to consider ===\nOther factors to consider when choosing and applying a learning algorithm include the following:\n\nHeterogeneity of the data. If the feature vectors include features of many different kinds (discrete, discrete ordered, counts, continuous values), some algorithms are easier to apply than others. Many algorithms, including support-vector machines, linear regression, logistic regression, neural networks, and nearest neighbor methods, require that the input features be numerical and scaled to similar ranges (e.g., to the [-1,1] interval). Methods that employ a distance function, such as nearest neighbor methods and support-vector machines with Gaussian kernels, are particularly sensitive to this. An advantage of decision trees is that they easily handle heterogeneous data.\nRedundancy in the data. If the input features contain redundant information (e.g., highly correlated features), some learning algorithms (e.g., linear regression, logistic regression, and distance based methods) will perform poorly because of numerical instabilities. These problems can often be solved by imposing some form of regularization.\nPresence of interactions and non-linearities. If each of the features makes an independent contribution to the output, then algorithms based on linear functions (e.g., linear regression, logistic regression, support-vector machines, naive Bayes) and distance functions (e.g., nearest neighbor methods, support-vector machines with Gaussian kernels) generally perform well. However, if there are complex interactions among features, then algorithms such as decision trees and neural networks work better, because they are specifically designed to discover these interactions. Linear methods can also be applied, but the engineer must manually specify the interactions when using them.When considering a new application, the engineer can compare multiple learning algorithms and experimentally determine which one works best on the problem at hand (see cross validation). Tuning the performance of a learning algorithm can be very time-consuming. Given fixed resources, it is often better to spend more time collecting additional training data and more informative features than it is to spend extra time tuning the learning algorithms.\n\n\n=== Algorithms ===\nThe most widely used learning algorithms are: \n\nSupport-vector machines\nLinear regression\nLogistic regression\nNaive Bayes\nLinear discriminant analysis\nDecision trees\nK-nearest neighbor algorithm\nNeural networks (Multilayer perceptron)\nSimilarity learning\n\n\n== How supervised learning algorithms work ==\nGiven a set of \n  \n    \n      \n        N\n      \n    \n    {\\displaystyle N}\n   training examples of the form \n  \n    \n      \n        {\n        (\n        \n          x\n          \n            1\n          \n        \n        ,\n        \n          y\n          \n            1\n          \n        \n        )\n        ,\n        .\n        .\n        .\n        ,\n        (\n        \n          x\n          \n            N\n          \n        \n        ,\n        \n        \n          y\n          \n            N\n          \n        \n        )\n        }\n      \n    \n    {\\displaystyle \\{(x_{1},y_{1}),...,(x_{N},\\;y_{N})\\}}\n   such that \n  \n    \n      \n        \n          x\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle x_{i}}\n   is the feature vector of the \n  \n    \n      \n        i\n      \n    \n    {\\displaystyle i}\n  -th example and \n  \n    \n      \n        \n          y\n          \n            i\n          \n        \n      \n    \n    {\\displaystyle y_{i}}\n   is its label (i.e., class), a learning algorithm seeks a function \n  \n    \n      \n        g\n        :\n        X\n        \u2192\n        Y\n      \n    \n    {\\displaystyle g:X\\to Y}\n  , where \n  \n    \n      \n        X\n      \n    \n    {\\displaystyle X}\n   is the input space and \n  \n    \n      \n        Y\n      \n    \n    {\\displaystyle Y}\n   is the output space. The function \n  \n    \n      \n        g\n      \n    \n    {\\displaystyle g}\n   is an element of some space of possible functions \n  \n    \n      \n        G\n      \n    \n    {\\displaystyle G}\n  , usually called the hypothesis space. It is sometimes convenient to represent \n  \n    \n      \n        g\n      \n    \n    {\\displaystyle g}\n   using a scoring function \n  \n    \n      \n        f\n        :\n        X\n        \u00d7\n        Y\n        \u2192\n        \n          R\n        \n      \n    \n    {\\displaystyle f:X\\times Y\\to \\mathbb {R} }\n   such that \n  \n    \n      \n        g\n      \n    \n    {\\displaystyle g}\n   is defined as returning the \n  \n    \n      \n        y\n      \n    \n    {\\displaystyle y}\n   value that gives the highest score: \n  \n    \n      \n        g\n        (\n        x\n        )\n        =\n        \n          \n            \n              arg\n              \u2061\n              max\n            \n            y\n          \n        \n        \n        f\n        (\n        x\n        ,\n        y\n        )\n      \n    \n    {\\displaystyle g(x)={\\underset {y}{\\arg \\max }}\\;f(x,y)}\n  . Let \n  \n    \n      \n        F\n      \n    \n    {\\displaystyle F}\n   denote the space of scoring functions.\nAlthough \n  \n    \n      \n        G\n      \n    \n    {\\displaystyle G}\n   and \n  \n    \n      \n        F\n      \n    \n    {\\displaystyle F}\n   can be any space of functions, many learning algorithms are probabilistic models where \n  \n    \n      \n        g\n      \n    \n    {\\displaystyle g}\n   takes the form of a conditional probability model \n  \n    \n      \n        g\n        (\n        x\n        )\n        =\n        \n          \n            \n              arg\n              \u2061\n              max\n            \n            y\n          \n        \n        \n        P\n        (\n        y\n        \n          |\n        \n        x\n        )\n      \n    \n    {\\displaystyle g(x)={\\underset {y}{\\arg \\max }}\\;P(y|x)}\n  , or \n  \n    \n      \n        f\n      \n    \n    {\\displaystyle f}\n   takes the form of a joint probability model \n  \n    \n      \n        f\n        (\n        x\n        ,\n        y\n        )\n        =\n        P\n        (\n        x\n        ,\n        y\n        )\n      \n    \n    {\\displaystyle f(x,y)=P(x,y)}\n  . For example, naive Bayes and linear discriminant analysis are joint probability models, whereas logistic regression is a conditional probability model.\nThere are two basic approaches to choosing \n  \n    \n      \n        f\n      \n    \n    {\\displaystyle f}\n   or \n  \n    \n      \n        g\n      \n    \n    {\\displaystyle g}\n  : empirical risk minimization and structural risk minimization. Empirical risk minimization seeks the function that best fits the training data. Structural risk minimization includes a penalty function that controls the bias/variance tradeoff.\nIn both cases, it is assumed that the training set consists of a sample of independent and identically distributed pairs, \n  \n    \n      \n        (\n        \n          x\n          \n            i\n          \n        \n        ,\n        \n        \n          y\n          \n            i\n          \n        \n        )\n      \n    \n    {\\displaystyle (x_{i},\\;y_{i})}\n  . In order to measure how well a function fits the training data, a loss function \n  \n    \n      \n        L\n        :\n        Y\n        \u00d7\n        Y\n        \u2192\n        \n          \n            R\n          \n          \n            \u2265\n            0\n          \n        \n      \n    \n    {\\displaystyle L:Y\\times Y\\to \\mathbb {R} ^{\\geq 0}}\n   is defined. For training example \n  \n    \n      \n        (\n        \n          x\n          \n            i\n          \n        \n        ,\n        \n        \n          y\n          \n            i\n          \n        \n        )\n      \n    \n    {\\displaystyle (x_{i},\\;y_{i})}\n  , the loss of predicting the value \n  \n    \n      \n        \n          \n            \n              y\n              ^\n            \n          \n        \n      \n    \n    {\\displaystyle {\\hat {y}}}\n   is \n  \n    \n      \n        L\n        (\n        \n          y\n          \n            i\n          \n        \n        ,\n        \n          \n            \n              y\n              ^\n            \n          \n        \n        )\n      \n    \n    {\\displaystyle L(y_{i},{\\hat {y}})}\n  .\nThe risk \n  \n    \n      \n        R\n        (\n        g\n        )\n      \n    \n    {\\displaystyle R(g)}\n   of function \n  \n    \n      \n        g\n      \n    \n    {\\displaystyle g}\n   is defined as the expected loss of \n  \n    \n      \n        g\n      \n    \n    {\\displaystyle g}\n  . This can be estimated from the training data as\n\n  \n    \n      \n        \n          R\n          \n            e\n            m\n            p\n          \n        \n        (\n        g\n        )\n        =\n        \n          \n            1\n            N\n          \n        \n        \n          \u2211\n          \n            i\n          \n        \n        L\n        (\n        \n          y\n          \n            i\n          \n        \n        ,\n        g\n        (\n        \n          x\n          \n            i\n          \n        \n        )\n        )\n      \n    \n    {\\displaystyle R_{emp}(g)={\\frac {1}{N}}\\sum _{i}L(y_{i},g(x_{i}))}\n  .\n\n\n=== Empirical risk minimization ===\n\nIn empirical risk minimization, the supervised learning algorithm seeks the function \n  \n    \n      \n        g\n      \n    \n    {\\displaystyle g}\n   that minimizes \n  \n    \n      \n        R\n        (\n        g\n        )\n      \n    \n    {\\displaystyle R(g)}\n  . Hence, a supervised learning algorithm can be constructed by applying an optimization algorithm to find \n  \n    \n      \n        g\n      \n    \n    {\\displaystyle g}\n  .\nWhen \n  \n    \n      \n        g\n      \n    \n    {\\displaystyle g}\n   is a conditional probability distribution \n  \n    \n      \n        P\n        (\n        y\n        \n          |\n        \n        x\n        )\n      \n    \n    {\\displaystyle P(y|x)}\n   and the loss function is the negative log likelihood: \n  \n    \n      \n        L\n        (\n        y\n        ,\n        \n          \n            \n              y\n              ^\n            \n          \n        \n        )\n        =\n        \u2212\n        log\n        \u2061\n        P\n        (\n        y\n        \n          |\n        \n        x\n        )\n      \n    \n    {\\displaystyle L(y,{\\hat {y}})=-\\log P(y|x)}\n  , then empirical risk minimization is equivalent to maximum likelihood estimation.\nWhen \n  \n    \n      \n        G\n      \n    \n    {\\displaystyle G}\n   contains many candidate functions or the training set is not sufficiently large, empirical risk minimization leads to high variance and poor generalization. The learning algorithm is able to memorize the training examples without generalizing well. This is called overfitting.\n\n\n=== Structural risk minimization ===\nStructural risk minimization seeks to prevent overfitting by incorporating a regularization penalty into the optimization. The regularization penalty can be viewed as implementing a form of Occam's razor that prefers simpler functions over more complex ones.\nA wide variety of penalties have been employed that correspond to different definitions of complexity. For example, consider the case where the function \n  \n    \n      \n        g\n      \n    \n    {\\displaystyle g}\n   is a linear function of the form\n\n  \n    \n      \n        g\n        (\n        x\n        )\n        =\n        \n          \u2211\n          \n            j\n            =\n            1\n          \n          \n            d\n          \n        \n        \n          \u03b2\n          \n            j\n          \n        \n        \n          x\n          \n            j\n          \n        \n      \n    \n    {\\displaystyle g(x)=\\sum _{j=1}^{d}\\beta _{j}x_{j}}\n  .A popular regularization penalty is \n  \n    \n      \n        \n          \u2211\n          \n            j\n          \n        \n        \n          \u03b2\n          \n            j\n          \n          \n            2\n          \n        \n      \n    \n    {\\displaystyle \\sum _{j}\\beta _{j}^{2}}\n  , which is the squared Euclidean norm of the weights, also known as the \n  \n    \n      \n        \n          L\n          \n            2\n          \n        \n      \n    \n    {\\displaystyle L_{2}}\n   norm. Other norms include the \n  \n    \n      \n        \n          L\n          \n            1\n          \n        \n      \n    \n    {\\displaystyle L_{1}}\n   norm, \n  \n    \n      \n        \n          \u2211\n          \n            j\n          \n        \n        \n          |\n        \n        \n          \u03b2\n          \n            j\n          \n        \n        \n          |\n        \n      \n    \n    {\\displaystyle \\sum _{j}|\\beta _{j}|}\n  , and the \n  \n    \n      \n        \n          L\n          \n            0\n          \n        \n      \n    \n    {\\displaystyle L_{0}}\n   \"norm\", which is the number of non-zero \n  \n    \n      \n        \n          \u03b2\n          \n            j\n          \n        \n      \n    \n    {\\displaystyle \\beta _{j}}\n  s. The penalty will be denoted by \n  \n    \n      \n        C\n        (\n        g\n        )\n      \n    \n    {\\displaystyle C(g)}\n  .\nThe supervised learning optimization problem is to find the function \n  \n    \n      \n        g\n      \n    \n    {\\displaystyle g}\n   that minimizes\n\n  \n    \n      \n        J\n        (\n        g\n        )\n        =\n        \n          R\n          \n            e\n            m\n            p\n          \n        \n        (\n        g\n        )\n        +\n        \u03bb\n        C\n        (\n        g\n        )\n        .\n      \n    \n    {\\displaystyle J(g)=R_{emp}(g)+\\lambda C(g).}\n  The parameter \n  \n    \n      \n        \u03bb\n      \n    \n    {\\displaystyle \\lambda }\n   controls the bias-variance tradeoff. When \n  \n    \n      \n        \u03bb\n        =\n        0\n      \n    \n    {\\displaystyle \\lambda =0}\n  , this gives empirical risk minimization with low bias and high variance. When \n  \n    \n      \n        \u03bb\n      \n    \n    {\\displaystyle \\lambda }\n   is large, the learning algorithm will have high bias and low variance. The value of \n  \n    \n      \n        \u03bb\n      \n    \n    {\\displaystyle \\lambda }\n   can be chosen empirically via cross validation.\nThe complexity penalty has a Bayesian interpretation as the negative log prior probability of \n  \n    \n      \n        g\n      \n    \n    {\\displaystyle g}\n  , \n  \n    \n      \n        \u2212\n        log\n        \u2061\n        P\n        (\n        g\n        )\n      \n    \n    {\\displaystyle -\\log P(g)}\n  , in which case \n  \n    \n      \n        J\n        (\n        g\n        )\n      \n    \n    {\\displaystyle J(g)}\n   is the posterior probability of \n  \n    \n      \n        g\n      \n    \n    {\\displaystyle g}\n  .\n\n\n== Generative training ==\nThe training methods described above are discriminative training methods, because they seek to find a function \n  \n    \n      \n        g\n      \n    \n    {\\displaystyle g}\n   that discriminates well between the different output values (see discriminative model). For the special case where \n  \n    \n      \n        f\n        (\n        x\n        ,\n        y\n        )\n        =\n        P\n        (\n        x\n        ,\n        y\n        )\n      \n    \n    {\\displaystyle f(x,y)=P(x,y)}\n   is a joint probability distribution and the loss function is the negative log likelihood \n  \n    \n      \n        \u2212\n        \n          \u2211\n          \n            i\n          \n        \n        log\n        \u2061\n        P\n        (\n        \n          x\n          \n            i\n          \n        \n        ,\n        \n          y\n          \n            i\n          \n        \n        )\n        ,\n      \n    \n    {\\displaystyle -\\sum _{i}\\log P(x_{i},y_{i}),}\n   a risk minimization algorithm is said to perform generative training, because \n  \n    \n      \n        f\n      \n    \n    {\\displaystyle f}\n   can be regarded as a generative model that explains how the data were generated. Generative training algorithms are often simpler and more computationally efficient than discriminative training algorithms. In some cases, the solution can be computed in closed form as in naive Bayes and linear discriminant analysis.\n\n\n== Generalizations ==\nThere are several ways in which the standard supervised learning problem can be generalized:\n\nSemi-supervised learning or weak supervision: the desired output values are provided only for a subset of the training data. The remaining data is unlabeled or imprecisely labeled.\nActive learning: Instead of assuming that all of the training examples are given at the start, active learning algorithms interactively collect new examples, typically by making queries to a human user. Often, the queries are based on unlabeled data, which is a scenario that combines semi-supervised learning with active learning.\nStructured prediction: When the desired output value is a complex object, such as a parse tree or a labeled graph, then standard methods must be extended.\nLearning to rank: When the input is a set of objects and the desired output is a ranking of those objects, then again the standard methods must be extended.\n\n\n== Approaches and algorithms ==\nAnalytical learning\nArtificial neural network\nBackpropagation\nBoosting (meta-algorithm)\nBayesian statistics\nCase-based reasoning\nDecision tree learning\nInductive logic programming\nGaussian process regression\nGenetic programming\nGroup method of data handling\nKernel estimators\nLearning automata\nLearning classifier systems\nLearning vector quantization\nMinimum message length (decision trees, decision graphs, etc.)\nMultilinear subspace learning\nNaive Bayes classifier\nMaximum entropy classifier\nConditional random field\nNearest neighbor algorithm\nProbably approximately correct learning (PAC) learning\nRipple down rules, a knowledge acquisition methodology\nSymbolic machine learning algorithms\nSubsymbolic machine learning algorithms\nSupport vector machines\nMinimum complexity machines (MCM)\nRandom forests\nEnsembles of classifiers\nOrdinal classification\nData pre-processing\nHandling imbalanced datasets\nStatistical relational learning\nProaftn, a multicriteria classification algorithm\n\n\n== Applications ==\nBioinformatics\nCheminformatics\nQuantitative structure\u2013activity relationship\nDatabase marketing\nHandwriting recognition\nInformation retrieval\nLearning to rank\nInformation extraction\nObject recognition in computer vision\nOptical character recognition\nSpam detection\nPattern recognition\nSpeech recognition\nSupervised learning is a special case of downward causation in biological systems\nLandform classification using satellite imagery\nSpend classification in procurement processes\n\n\n== General issues ==\nComputational learning theory\nInductive bias\nOverfitting (machine learning)\n(Uncalibrated) class membership probabilities\nUnsupervised learning\nVersion spaces\n\n\n\n\n\n                           Answer: \n\n"}, {"role": "assistant", "content": "\ufeffSupervised learning, formally, is a machine learning approach where input feature objects are paired with labeled desired output in order to train a model. When this training data is processed, the model builds a function that maps new data to expected output values based on parameters that were learned through training. Essentially, we are giving the algorithm a dataset where each data point has \u201cright answers\u201d given, and the task of the algorithm is to produce more of these right answers.\n\nOne popular use case for this algorithm is for a regression problem, where you are trying to predict a continuous valued output based on the given inputs. For example, suppose your friend is looking to sell their house and looking to see how much their house is worth. What they have is a dataset consisting of labeled pairs of the sizes of houses and its associated price. A supervised learning algorithm will learn from these pairs and will try to learn a mapping from the sizes of a house to the price of a house from the dataset. The model can then be used to predict the value of your friend\u2019s house based on the size of their house.\n\nAnother use case of supervised learning is for classification problems, where you are trying to predict a discrete value output. For example, they give a breast cancer diagnosis problem where you are trying to classify whether a tumor is malignant or benign. Given the size of the tumor and the age of the patient labeled with true answers, the model will learn a mapping that separates between classes and determine whether or not a new patient has a malignant or benign tumor.\n\nMachine learning algorithms can utilize multiple features or attributes to make predictions, and for some problems, you want an \u201cinfinite\u201d number of features or cues in order to make more accurate predictions. One of the ways you can achieve this is through the support vector machine mechanism, however, it is important to keep in mind that this might not be the case for other problems. You should have a number of features that are descriptive of the object. The number of features should not be too large, because of the curse of dimensionality; but should contain enough information to accurately predict the output.\n"}]}
{"messages": [{"role": "system", "content": "\n                      Please write a 500 word summary on the following Transcript based on the Reading Material.\n                      Pick relevant information from the Reading Material and add it to the summary of the Transcript.\n                      The Summary should be only of the Transcript with a few information from the Reading Material.\n                      If you are not sure of the summary, say 'I don't know'.\n    "}, {"role": "user", "content": "Transcript: Hi, I\u2019m Carrie Anne and welcome to Crash Course Computer Science! Today we start our journey up the ladder of abstraction, where we leave behind the simplicity of being able to see every switch and gear, but gain the ability to assemble increasingly complex systems. INTRO Last episode, we talked about how computers evolved from electromechanical devices, that often had decimal representations of numbers \u2013 like those represented by teeth on a gear \u2013 to electronic computers with transistors that can turn the flow of electricity on or off. And fortunately, even with just two states of electricity, we can represent important information. We call this representation Binary -- which literally means \u201cof two states\u201d, in the same way a bicycle has two wheels or a biped has two legs. You might think two states isn\u2019t a lot to work with, and you\u2019d be right! But, it\u2019s exactly what you need for representing the values \u201ctrue\u201d and \u201cfalse\u201d. In computers, an \u201con\u201d state, when electricity is flowing, represents true. The off state, no electricity flowing, represents false. We can also write binary as 1\u2019s and 0\u2019s instead of true\u2019s and false\u2019s \u2013 they are just different expressions of the same signal \u2013 but we\u2019ll talk more about that in the next episode. Now it is actually possible to use transistors for more than just turning electrical current on and off, and to allow for different levels of current. Some early electronic computers were ternary, that's three states, and even quinary, using 5 states. The problem is, the more intermediate states there are, the harder it is to keep them all seperate -- if your smartphone battery starts running low or there\u2019s electrical noise because someone's running a microwave nearby, the signals can get mixed up... and this problem only gets worse with transistors changing states millions of times per second! So, placing two signals as far apart as possible - using just \u2018on and off\u2019 - gives us the most distinct signal to minimize these issues. Another reason computers use binary is that an entire branch of mathematics already existed that dealt exclusively with true and false values. And it had figured out all of the necessary rules and operations for manipulating them. It's called Boolean Algebra! George Boole, from which Boolean Algebra later got its name, was a self-taught English mathematician in the 1800s. He was interested in representing logical statements that went \u201cunder, over, and beyond\u201d Aristotle\u2019s approach to logic, which was, unsurprisingly, grounded in philosophy. Boole\u2019s approach allowed truth to be systematically and formally proven, through logic equations which he introduced in his first book, \u201cThe Mathematical Analysis of Logic\u201d in 1847. In \u201cregular\u201d algebra -- the type you probably learned in high school -- the values of variables are numbers, and operations on those numbers are things like addition and multiplication. But in Boolean Algebra, the values of variables are true and false, and the operations are logical. There are three fundamental operations in Boolean Algebra: a NOT, an AND, and an OR operation. And these operations turn out to be really useful so we\u2019re going to look at them individually. A NOT takes a single boolean value, either true or false, and negates it. It flips true to false, and false to true. We can write out a little logic table that shows the original value under Input, and the outcome after applying the operation under Output. Now here\u2019s the cool part -- we can easily build boolean logic out of transistors. As we discussed last episode, transistors are really just little electrically controlled switches. They have three wires: two electrodes and one control wire. When you apply electricity to the control wire, it lets current flow through from one electrode, through the transistor, to the other electrode. This is a lot like a spigot on a pipe -- open the tap, water flows, close the tap, water shuts off. You can think of the control wire as an input, and the wire coming from the bottom electrode as the output. So with a single transistor, we have one input and one output. If we turn the input on, the output is also on because the current can flow through it. If we turn the input off, the output is also off and the current can no longer pass through. Or in boolean terms, when the input is true, the output is true. And when the input is false, the output is also false. Which again we can show on a logic table. This isn\u2019t a very exciting circuit though because its not doing anything -- the input and output are the same. But, we can modify this circuit just a little bit to create a NOT. Instead of having the output wire at the end of the transistor, we can move it before. If we turn the input on, the transistor allows current to pass through it to the \u201cground\u201d, and the output wire won\u2019t receive that current - so it will be off. In our water metaphor grounding would be like if all the water in your house was flowing out of a huge hose so there wasn\u2019t any water pressure left for your shower. So in this case if the input is on, output is off. When we turn off the transistor, though, current is prevented from flowing down it to the ground, so instead, current flows through the output wire. So the input will be off and the output will be on. And this matches our logic table for NOT, so congrats, we just built a circuit that computes NOT! We call them NOT gates - we call them gates because they\u2019re controlling the path of our current. The AND Boolean operation takes two inputs, but still has a single output. In this case the output is only true if both inputs are true. Think about it like telling the truth. You\u2019re only being completely honest if you don\u2019t lie even a little. For example, let\u2019s take the statement, \u201cMy name is Carrie Anne AND I\u2019m wearing a blue dress\". Both of those facts are true, so the whole statement is true. But if I said, \u201cMy name is Carrie Anne AND I\u2019m wearing pants\u201d that would be false, because I\u2019m not wearing pants. Or trousers. If you\u2019re in England. The Carrie Anne part is true, but a true AND a false, is still false. If I were to reverse that statement it would still obviously be false, and if I were to tell you two complete lies that is also false, and again we can write all of these combinations out in a table. To build an AND gate, we need two transistors connected together so we have our two inputs and one output. If we turn on just transistor A, current won\u2019t flow because the current is stopped by transistor B. Alternatively, if transistor B is on, but the transistor A is off, the same thing, the current can\u2019t get through. Only if transistor A AND transistor B are on does the output wire have current. The last boolean operation is OR -- where only one input has to be true for the output to be true. For example, my name is Margaret Hamilton OR I\u2019m wearing a blue dress. This is a true statement because although I\u2019m not Margaret Hamilton unfortunately, I am wearing a blue dress, so the overall statement is true. An OR statement is also true if both facts are true. The only time an OR statement is false is if both inputs are false. Building an OR gate from transistors needs a few extra wires. Instead of having two transistors in series -- one after the other -- we have them in parallel. We run wires from the current source to both transistors. We use this little arc to note that the wires jump over one another and aren\u2019t connected, even though they look like they cross. If both transistors are turned off, the current is prevented from flowing to the output, so the output is also off. Now, if we turn on just Transistor A, current can flow to the output. Same thing if transistor A is off, but Transistor B in on. Basically if A OR B is on, the output is also on. Also, if both transistors are on, the output is still on. Ok, now that we\u2019ve got NOT, AND, and OR gates, and we can leave behind the constituent transistors and move up a layer of abstraction. The standard engineers use for these gates are a triangle with a dot for a NOT, a D for the AND, and a spaceship for the OR. Those aren\u2019t the official names, but that's howI like to think of them. Representing them and thinking about them this way allows us to build even bigger components while keeping the overall complexity relatively the same - just remember that that mess of transistors and wires is still there. For example, another useful boolean operation in computation is called an Exclusive OR - or XOR for short. XOR is like a regular OR, but with one difference: if both inputs are true, the XOR is false. The only time an XOR is true is when one input is true and the other input is false. It\u2019s like when you go out to dinner and your meal comes with a side salad OR a soup \u2013 sadly, you can\u2019t have both! And building this from transistors is pretty confusing, but we can show how an XOR is created from our three basic boolean gates. We know we have two inputs again -- A and B -- and one output. Let\u2019s start with an OR gate, since the logic table looks almost identical to an OR. There\u2019s only one problem - when A and B are true, the logic is different from OR, and we need to output \u201cfalse\u201d. To do this we need to add some additional gates. If we add an AND gate, and the input is true and true, the output will be true. This isn\u2019t what we want. But if we add a NOT immediately after this will flip it to false. Okay, now if we add a final AND gate and send it that value along with the output of our original OR gate, the AND will take in \u201cfalse\u201d and \u201ctrue\u201d, and since AND needs both values to be true, its output is false. That\u2019s the first row of our logic table. If we work through the remaining input combinations, we can see this boolean logic circuit does implement an Exclusive OR. And XOR turns out to be a very useful component, and we\u2019ll get to it in another episode, so useful in fact engineers gave it its own symbol too -- an OR gate with a smile :) But most importantly, we can now put XOR into our metaphorical toolbox and not have to worry about the individual logic gates that make it up, or the transistors that make up those gates, or how electrons are flowing through a semiconductor. Moving up another layer of abstraction. When computer engineers are designing processors, they rarely work at the transistor level, and instead work with much larger blocks, like logic gates, and even larger components made up of logic gates, which we\u2019ll discuss in future episodes. And even if you are a professional computer programmer, it\u2019s not often that you think about how the logic that you are programming is actually implemented in the physical world by these teeny tiny components. We\u2019ve also moved from thinking about raw electrical signals to our first representation of data - true and false - and we\u2019ve even gotten a little taste of computation. With just the logic gates in this episode, we could build a machine that evaluates complex logic statements, like if \u201cName is John Green AND after 5pm OR is Weekend AND near Pizza Hut\u201d, then \u201cJohn will want pizza\u201d equals true. And with that, I'm starving, I'll see you next week.\n\n\n                           Reading Material: In mathematics and mathematical logic, Boolean algebra is a branch of algebra. It differs from elementary algebra in two ways. First, the values of the variables are the truth values true and false, usually denoted 1 and 0, whereas in elementary algebra the values of the variables are numbers. Second, Boolean algebra uses logical operators such as conjunction (and) denoted as \u2227, disjunction (or) denoted as \u2228, and the negation (not) denoted as \u00ac. Elementary algebra, on the other hand, uses arithmetic operators such as addition, multiplication, subtraction, and division. Boolean algebra is therefore a formal way of describing logical operations, in the same way that elementary algebra describes numerical operations.\nBoolean algebra was introduced by George Boole in his first book The Mathematical Analysis of Logic (1847), and set forth more fully in his An Investigation of the Laws of Thought (1854).\nAccording to Huntington, the term \"Boolean algebra\" was first suggested by Henry M. Sheffer in 1913, although Charles Sanders Peirce gave the title \"A Boolian [sic] Algebra with One Constant\" to the first chapter of his \"The Simplest Mathematics\" in 1880. Boolean algebra has been fundamental in the development of digital electronics, and is provided for in all modern programming languages. It is also used in set theory and statistics.\n\n\nA logic gate is a device that performs a Boolean function, a logical operation performed on one or more binary inputs that produces a single binary output. Depending on the context, the term may refer to an ideal logic gate, one that has, for instance, zero rise time and unlimited fan-out, or it may refer to a non-ideal physical device (see ideal and real op-amps for comparison).\nThe primary way of building logic gates uses diodes or transistors acting as electronic switches. Today, most logic gates are made from MOSFETs (metal\u2013oxide\u2013semiconductor field-effect transistors). They can also be constructed using vacuum tubes, electromagnetic relays with relay logic, fluidic logic, pneumatic logic, optics, molecules, acoustics, or even mechanical or thermal elements.\nLogic gates can be cascaded in the same way that Boolean functions can be composed, allowing the construction of a physical model of all of Boolean logic, and therefore, all of the algorithms and mathematics that can be described with Boolean logic. Logic circuits include such devices as multiplexers, registers, arithmetic logic units (ALUs), and computer memory, all the way up through complete microprocessors, which may contain more than 100 million logic gates.\nCompound logic gates AND-OR-Invert (AOI) and OR-AND-Invert (OAI) are often employed in circuit design because their construction using MOSFETs is simpler and more efficient than the sum of the individual gates.\n\n\n== Electronic gates ==\n\nA functionally complete logic system may be composed of relays, valves (vacuum tubes), or transistors. The simplest family of logic gates uses bipolar transistors, and is called resistor\u2013transistor logic (RTL). Unlike simple diode logic gates (which do not have a gain element), RTL gates can be cascaded indefinitely to produce more complex logic functions. RTL gates were used in early integrated circuits. For higher speed and better density, the resistors used in RTL were replaced by diodes resulting in diode\u2013transistor logic (DTL). Transistor\u2013transistor logic (TTL) then supplanted DTL. As integrated circuits became more complex, bipolar transistors were replaced with smaller field-effect transistors (MOSFETs); see PMOS and NMOS. To reduce power consumption still further, most contemporary chip implementations of digital systems now use CMOS logic.  CMOS uses complementary (both n-channel and p-channel) MOSFET devices to achieve a high speed with low power dissipation.\nFor small-scale logic, designers now use prefabricated logic gates from families of devices such as the TTL 7400 series by Texas Instruments, the CMOS 4000 series by RCA, and their more recent descendants. Increasingly, these fixed-function logic gates are being replaced by programmable logic devices, which allow designers to pack many mixed logic gates into a single integrated circuit. The field-programmable nature of programmable logic devices such as FPGAs has reduced the 'hard' property of hardware; it is now possible to change the logic design of a hardware system by reprogramming some of its components, thus allowing the features or function of a hardware implementation of a logic system to be changed. Other types of logic gates include, but are not limited to:\nElectronic logic gates differ significantly from their relay-and-switch equivalents. They are much faster, consume much less power, and are much smaller (all by a factor of a million or more in most cases). Also, there is a fundamental structural difference. The switch circuit creates a continuous metallic path for current to flow (in either direction) between its input and its output. The semiconductor logic gate, on the other hand, acts as a high-gain voltage amplifier, which sinks a tiny current at its input and produces a low-impedance voltage at its output. It is not possible for current to flow between the output and the input of a semiconductor logic gate.\nAnother important advantage of standardized integrated circuit logic families, such as the 7400 and 4000 families, is that they can be cascaded. This means that the output of one gate can be wired to the inputs of one or several other gates, and so on. Systems with varying degrees of complexity can be built without great concern of the designer for the internal workings of the gates, provided the limitations of each integrated circuit are considered. \nThe output of one gate can only drive a finite number of inputs to other gates, a number called the 'fan-out limit'. Also, there is always a delay, called the 'propagation delay', from a change in input of a gate to the corresponding change in its output. When gates are cascaded, the total propagation delay is approximately the sum of the individual delays, an effect which can become a problem in high-speed synchronous circuits. Additional delay can be caused when many inputs are connected to an output, due to the distributed capacitance of all the inputs and wiring and the finite amount of current that each output can provide.\n\n\n== History and development ==\nThe binary number system was refined by Gottfried Wilhelm Leibniz (published in 1705), influenced by the ancient I Ching's binary system. Leibniz established that using the binary system combined the principles of arithmetic and logic.\nIn an 1886 letter, Charles Sanders Peirce described how logical operations could be carried out by electrical switching circuits. Early electro-mechanical computers were constructed from switches and relay logic rather than the later innovations of vacuum tubes (thermionic valves) or transistors (from which later electronic computers were constructed). Ludwig Wittgenstein introduced a version of the 16-row truth table as proposition 5.101 of Tractatus Logico-Philosophicus (1921). Walther Bothe, inventor of the coincidence circuit, got part of the 1954 Nobel Prize in physics, for the first modern electronic AND gate in 1924. Konrad Zuse designed and built electromechanical logic gates for his computer Z1 (from 1935 to 1938).\nFrom 1934 to 1936, NEC engineer Akira Nakashima, Claude Shannon and Victor Shestakov introduced switching circuit theory in a series of papers showing that two-valued Boolean algebra, which they discovered independently, can describe the operation of switching circuits. Using this property of electrical switches to implement logic is the fundamental concept that underlies all electronic digital computers. Switching circuit theory became the foundation of digital circuit design, as it became widely known in the electrical engineering community during and after World War II, with theoretical rigor superseding the ad hoc methods that had prevailed previously.Metal\u2013oxide\u2013semiconductor (MOS) devices in the forms of PMOS and NMOS were demonstrated by Bell Labs engineers Mohamed M. Atalla and Dawon Kahng in 1960. Both types were later combined and adapted into complementary MOS (CMOS) logic by Chih-Tang Sah and Frank Wanlass at Fairchild Semiconductor in 1963.Active research is taking place in molecular logic gates.\n\n\n== Symbols ==\nThere are two sets of symbols for elementary logic gates in common use, both defined in ANSI/IEEE Std 91-1984 and its supplement ANSI/IEEE Std 91a-1991. The \"distinctive shape\" set, based on traditional schematics, is used for simple drawings and derives from United States Military Standard MIL-STD-806 of the 1950s and 1960s. It is sometimes unofficially described as \"military\", reflecting its origin. The \"rectangular shape\" set, based on ANSI Y32.14 and other early industry standards as later refined by IEEE and IEC, has rectangular outlines for all types of gate and allows representation of a much wider range of devices than is possible with the traditional symbols. The IEC standard, IEC 60617-12, has been adopted by other standards, such as EN 60617-12:1999 in Europe, BS EN 60617-12:1999 in the United Kingdom, and DIN EN 60617-12:1998 in Germany.\nThe mutual goal of IEEE Std 91-1984 and IEC 617-12 was to provide a uniform method of describing the complex logic functions of digital circuits with schematic symbols. These functions were more complex than simple AND and OR gates. They could be medium-scale circuits such as a 4-bit counter to a large-scale circuit such as a microprocessor.\nIEC 617-12 and its renumbered successor IEC 60617-12 do not explicitly show the \"distinctive shape\" symbols, but do not prohibit them. These are, however, shown in ANSI/IEEE Std 91 (and 91a) with this note: \"The distinctive-shape symbol is, according to IEC Publication 617, Part 12, not preferred, but is not considered to be in contradiction to that standard.\" IEC 60617-12 correspondingly contains the note (Section 2.1) \"Although non-preferred, the use of other symbols recognized by official national standards, that is distinctive shapes in place of symbols [list of basic gates], shall not be considered to be in contradiction with this standard. Usage of these other symbols in combination to form complex symbols (for example, use as embedded symbols) is discouraged.\" This compromise was reached between the respective IEEE and IEC working groups to permit the IEEE and IEC standards to be in mutual compliance with one another.\nIn the 1980s, schematics were the predominant method to design both circuit boards and custom ICs known as gate arrays. Today custom ICs and the field-programmable gate array are typically designed with Hardware Description Languages (HDL) such as Verilog or VHDL.\n\n\n== Truth tables ==\n\n\n== Universal logic gates ==\n\nCharles Sanders Peirce (during 1880\u20131881) showed that NOR gates alone (or alternatively NAND gates alone) can be used to reproduce the functions of all the other logic gates, but his work on it was unpublished until 1933. The first published proof was by Henry M. Sheffer in 1913, so the NAND logical operation is sometimes called Sheffer stroke; the logical NOR is sometimes called Peirce's arrow. Consequently, these gates are sometimes called universal logic gates.\n\n\n== De Morgan equivalent symbols ==\nBy use of De Morgan's laws, an AND function is identical to an OR function with negated inputs and outputs. Likewise, an OR function is identical to an AND function with negated inputs and outputs. A NAND gate is equivalent to an OR gate with negated inputs, and a NOR gate is equivalent to an AND gate with negated inputs.\nThis leads to an alternative set of symbols for basic gates that use the opposite core symbol (AND or OR) but with the inputs and outputs negated. Use of these alternative symbols can make logic circuit diagrams much clearer and help to show accidental connection of an active high output to an active low input or vice versa. Any connection that has logic negations at both ends can be replaced by a negationless connection and a suitable change of gate or vice versa. Any connection that has a negation at one end and no negation at the other can be made easier to interpret by instead using the De Morgan equivalent symbol at either of the two ends. When negation or polarity indicators on both ends of a connection match, there is no logic negation in that path (effectively, bubbles \"cancel\"), making it easier to follow logic states from one symbol to the next. This is commonly seen in real logic diagrams \u2013 thus the reader must not get into the habit of associating the shapes exclusively as OR or AND shapes, but also take into account the bubbles at both inputs and outputs in order to determine the \"true\" logic function indicated.\nA De Morgan symbol can show more clearly a gate's primary logical purpose and the polarity of its nodes that are considered in the \"signaled\" (active, on) state. Consider the simplified case where a two-input NAND gate is used to drive a motor when either of its inputs are brought low by a switch. The \"signaled\" state (motor on) occurs when either one OR the other switch is on. Unlike a regular NAND symbol, which suggests AND logic, the De Morgan version, a two negative-input OR gate, correctly shows that OR is of interest. The regular NAND symbol has a bubble at the output and none at the inputs (the opposite of the states that will turn the motor on), but the De Morgan symbol shows both inputs and output in the polarity that will drive the motor.\nDe Morgan's theorem is most commonly used to implement logic gates as combinations of only NAND gates, or as combinations of only NOR gates, for economic reasons.\n\n\n== Data storage and sequential logic ==\n\nLogic gates can also be used to hold a state, allowing data storage. A storage element can be constructed by connecting several gates in a \"latch\" circuit. Latching circuitry is used in static random-access memory. More complicated designs that use clock signals and that change only on a rising or falling edge of the clock are called edge-triggered \"flip-flops\". Formally, a flip-flop is called a bistable circuit, because it has two stable states which it can maintain indefinitely. The combination of multiple flip-flops in parallel, to store a multiple-bit value, is known as a register. When using any of these gate setups the overall system has memory; it is then called a sequential logic system since its output can be influenced by its previous state(s), i.e. by the sequence of input states.  In contrast, the output from combinational logic is purely a combination of its present inputs, unaffected by the previous input and output states.\nThese logic circuits are used in computer memory. They vary in performance, based on factors of speed, complexity, and reliability of storage, and many different types of designs are used based on the application.\n\n\n== Three-state logic gates ==\n\nA three-state logic gate is a type of logic gate that can have three different outputs: high (H), low (L) and high-impedance (Z). The high-impedance state plays no role in the logic, which is strictly binary. These devices are used on buses of the CPU to allow multiple chips to send data. A group of three-states driving a line with a suitable control circuit is basically equivalent to a multiplexer, which may be physically distributed over separate devices or plug-in cards.\nIn electronics, a high output would mean the output is sourcing current from the positive power terminal (positive voltage). A low output would mean the output is sinking current to the negative power terminal (zero voltage). High impedance would mean that the output is effectively disconnected from the circuit.\n\n\n== Manufacturing ==\n\nSince the 1990s, most logic gates are made in CMOS (complementary metal oxide semiconductor) technology that uses both NMOS and PMOS transistors. Often millions of logic gates are packaged in a single integrated circuit.\n\n\n=== Non-electronic logic gates ===\nNon-electronic implementations are varied, though few of them are used in practical applications. Many early electromechanical digital computers, such as the Harvard Mark I, were built from relay logic gates, using electro-mechanical relays. Logic gates can be made using pneumatic devices, such as the Sorteberg relay or mechanical logic gates, including on a molecular scale. Various types of fundamental logic gates have been constructed using molecules (molecular logic gates), which are based on chemical inputs and spectroscopic outputs. Logic gates have been made out of DNA (see DNA nanotechnology) and used to create a computer called MAYA (see MAYA-II). Logic gates can be made from quantum mechanical effects, see quantum logic gate. Photonic logic gates use nonlinear optical effects.\nIn principle any method that leads to a gate that is functionally complete (for example, either a NOR or a NAND gate) can be used to make any kind of digital logic circuit. Note that the use of 3-state logic for bus systems is not needed, and can be replaced by digital multiplexers, which can be built using only simple logic gates (such as NAND gates, NOR gates, or AND and OR gates).\n\n\n=== Logic families ===\nThere are several logic families with different characteristics (power consumption, speed, cost, size) such as: RDL (resistor\u2013diode logic), RTL (resistor-transistor logic), DTL (diode\u2013transistor logic), TTL (transistor\u2013transistor logic) and CMOS. There are also sub-variants, e.g. standard CMOS logic vs. advanced types using still CMOS technology, but with some optimizations for avoiding loss of speed due to slower PMOS transistors.\n\n\n\n\n\n                           Answer: \n\n"}, {"role": "assistant", "content": "\ufeffComputers use binary (1s and 0s) to represent information, as it offers distinct signals and aligns with Boolean Algebra.\n\nToday, all modern general-purpose computers perform their functions using two-value Boolean logic; that is, their electrical circuits are a physical manifestation of two-value Boolean logic. They achieve this in various ways: as voltages on wires in high-speed circuits and capacitive storage devices, as orientations of a magnetic domain in ferromagnetic storage devices, as holes in punched cards or paper tape, and so on\n\nOf course, it is possible to code more than two symbols in any given medium. For example, one might use respectively 0, 1, 2, and 3 volts to code a four-symbol alphabet on a wire, or holes of different sizes in a punched card. In practice, the tight constraints of high speed, small size, and low power combine to make noise a major factor. This makes it hard to distinguish between symbols when there are several possible symbols that could occur at a single site. Rather than attempting to distinguish between four voltages on one wire, digital designers have settled on two voltages per wire, high and low.\n\nBoolean Algebra, developed by George Boole, provides systematic rules for logical operations using true and false values. It differs from elementary algebra in two ways. First, the values of the variables are the truth values true and false, usually denoted 1 and 0, whereas in elementary algebra the values of the variables are numbers. Second, Boolean algebra uses logical operators such as conjunction (and) denoted as \u2227, disjunction (or) denoted as \u2228, and the negation (not) denoted as \u00ac\n\nIn terms of the computer architecture, the three fundamental Boolean operations, being NOT, AND, and OR, can be built using electrically controlled switches called transistors. NOT negates a single input, AND requires both inputs to be true for a true output, while OR requires only one input to be true. \n\nThe construction of these Boolean operations can be done by combining a series of logic gates. By combining more logic gates, more complex boolean operations can be created, such as XOR (exclusive OR), which is useful in computation. Computer engineers design processors using larger blocks, including logic gates and components built from gates in order to build larger abstractions.\n\nAbstractions allow for complex systems to be built without considering the underlying implementation details, such as transistors or electrical signals. Computers evolved from electromechanical devices to electronic computers with transistors, which can represent \"true\" and \"false\" with binary states.\n"}]}
{"messages": [{"role": "system", "content": "\n                      Please write a 500 word summary on the following Transcript based on the Reading Material.\n                      Pick relevant information from the Reading Material and add it to the summary of the Transcript.\n                      The Summary should be only of the Transcript with a few information from the Reading Material.\n                      If you are not sure of the summary, say 'I don't know'.\n    "}, {"role": "user", "content": "Transcript: Hello world, I\u2019m Carrie Anne, and welcome to CrashCourse Computer Science! Over the course of this series, we\u2019re going to go from bits, bytes, transistors and logic gates, all the way to Operating Systems, Virtual Reality and Robots! We\u2019re going to cover a lot, but just to clear things up - we ARE NOT going to teach you how to program. Instead, we\u2019re going to explore a range of computing topics as a discipline and a technology. Computers are the lifeblood of today\u2019s world. If they were to suddenly turn off, all at once, the power grid would shut down, cars would crash, planes would fall, water treatment plants would stop, stock markets would freeze, trucks with food wouldn\u2019t know where to deliver, and employees wouldn\u2019t get paid. Even many non-computer objects - like DFTBA shirts and the chair I\u2019m sitting on \u2013 are made in factories run by computers. Computing really has transformed nearly every aspect of our lives. And this isn\u2019t the first time we\u2019ve seen this sort of technology-driven global change. Advances in manufacturing during the Industrial Revolution brought a new scale to human civilization - in agriculture, industry and domestic life. Mechanization meant superior harvests and more food, mass produced goods, cheaper and faster travel and communication, and usually a better quality of life. And computing technology is doing the same right now \u2013 from automated farming and medical equipment, to global telecommunications and educational opportunities, and new frontiers like Virtual Reality and Self Driving Cars. We are living in a time likely to be remembered as the Electronic Age. With billions of transistors in just your smartphones, computers can seem pretty complicated, but really, they\u2019re just simple machines that perform complex actions through many layers of abstraction. So in this series, we\u2019re going break down those layers, and build up from simple 1\u2019s and 0\u2019s, to logic units, CPUs, operating systems, the entire internet and beyond. And don\u2019t worry, in the same way someone buying t-shirts on a webpage doesn\u2019t need to know how that webpage was programmed, or the web designer doesn\u2019t need to know how all the packets are routed, or router engineers don\u2019t need to know about transistor logic, this series will build on previous episodes but not be dependent on them. By the end of this series, I hope that you can better contextualize computing\u2019s role both in your own life and society, and how humanity's (arguably) greatest invention is just in its infancy, with its biggest impacts yet to come. But before we get into all that, we should start at computing\u2019s origins, because although electronic computers are relatively new, the need for computation is not. INTRO The earliest recognized device for computing was the abacus, invented in Mesopotamia around 2500 BCE. It\u2019s essentially a hand operated calculator, that helps add and subtract many numbers. It also stores the current state of the computation, much like your hard drive does today. The abacus was created because, the scale of society had become greater than what a single person could keep and manipulate in their mind. There might be thousands of people in a village or tens of thousands of cattle. There are many variants of the abacus, but let\u2019s look at a really basic version with each row representing a different power of ten. So each bead on the bottom row represents a single unit, in the next row they represent 10, the row above 100, and so on. Let\u2019s say we have 3 heads of cattle represented by 3 beads on the bottom row on the right side. If we were to buy 4 more cattle we would just slide 4 more beads to the right for a total of 7. But if we were to add 5 more after the first 3 we would run out of beads, so we would slide everything back to the left, slide one bead on the second row to the right, representing ten, and then add the final 2 beads on the bottom row for a total of 12. This is particularly useful with large numbers. So if we were to add 1,251 we would just add 1 to the bottom row, 5 to the second row, 2 to the third row, and 1 to the fourth row - we don\u2019t have to add in our head and the abacus stores the total for us. Over the next 4000 years, humans developed all sorts of clever computing devices, like the astrolabe, which enabled ships to calculate their latitude at sea. Or the slide rule, for assisting with multiplication and division. And there are literally hundred of types of clocks created that could be used to calculate sunrise, tides, positions of celestial bodies, and even just the time. Each one of these devices made something that was previously laborious to calculate much faster, easier, and often more accurate \u2013\u2013 it lowered the barrier to entry, and at the same time, amplified our mental abilities \u2013\u2013 take note, this is a theme we\u2019re going to touch on a lot in this series. As early computer pioneer Charles Babbage said: \u201cAt each increase of knowledge, as well as on the contrivance of every new tool, human labour becomes abridged.\u201d However, none of these devices were called \u201ccomputers\u201d. The earliest documented use of the word \u201ccomputer\u201d is from 1613, in a book by Richard Braithwait. And it wasn\u2019t a machine at all - it was a job title. Braithwait said, \u201cI have read the truest computer of times, and the best arithmetician that ever breathed, and he reduceth thy dayes into a short number\u201d. In those days, computer was a person who did calculations, sometimes with the help of machines, but often not. This job title persisted until the late 1800s, when the meaning of computer started shifting to refer to devices. Notable among these devices was the Step Reckoner, built by German polymath Gottfried Leibniz in 1694. Leibniz said \u201c... it is beneath the dignity of excellent men to waste their time in calculation when any peasant could do the work just as accurately with the aid of a machine.\u201d It worked kind of like the odometer in your car, which is really just a machine for adding up the number of miles your car has driven. The device had a series of gears that turned; each gear had ten teeth, to represent the digits from 0 to 9. Whenever a gear bypassed nine, it rotated back to 0 and advanced the adjacent gear by one tooth. Kind of like when hitting 10 on that basic abacus. This worked in reverse when doing subtraction, too. With some clever mechanical tricks, the Step Reckoner was also able to multiply and divide numbers. Multiplications and divisions are really just many additions and subtractions. For example, if we want to divide 17 by 5, we just subtract 5, then 5, then 5 again, and then we can\u2019t subtract any more 5\u2019s\u2026 so we know 5 goes into 17 three times, with 2 left over. The Step Reckoner was able to do this in an automated way, and was the first machine that could do all four of these operations. And this design was so successful it was used for the next three centuries of calculator design. Unfortunately, even with mechanical calculators, most real world problems required many steps of computation before an answer was determined. It could take hours or days to generate a single result. Also, these hand-crafted machines were expensive, and not accessible to most of the population. So, before 20th century, most people experienced computing through pre-computed tables assembled by those amazing \u201chuman computers\u201d we talked about. So if you needed to know the square root of 8 million 6 hundred and 75 thousand 3 hundred and 9, instead of spending all day hand-cranking your step reckoner, you could look it up in a huge book full of square root tables in a minute or so. Speed and accuracy is particularly important on the battlefield, and so militaries were among the first to apply computing to complex problems. A particularly difficult problem is accurately firing artillery shells, which by the 1800s could travel well over a kilometer (or a bit more than half a mile). Add to this varying wind conditions, temperature, and atmospheric pressure, and even hitting something as large as a ship was difficult. Range Tables were created that allowed gunners to look up environmental conditions and the distance they wanted to fire, and the table would tell them the angle to set the canon. These Range Tables worked so well, they were used well into World War Two. The problem was, if you changed the design of the cannon or of the shell, a whole new table had to be computed, which was massively time consuming and inevitably led to errors. Charles Babbage acknowledged this problem in 1822 in a paper to the Royal Astronomical Society entitled: \u201cNote on the application of machinery to the computation of astronomical and mathematical tables\". Let\u2019s go to the thought bubble. Charles Babbage proposed a new mechanical device called the Difference Engine, a much more complex machine that could approximate polynomials. Polynomials describe the relationship between several variables - like range and air pressure, or amount of pizza Carrie Anne eats and happiness. Polynomials could also be used to approximate logarithmic and trigonometric functions, which are a real hassle to calculate by hand. Babbage started construction in 1823, and over the next two decades, tried to fabricate and assemble the 25,000 components, collectively weighing around 15 tons. Unfortunately, the project was ultimately abandoned. But, in 1991, historians finished constructing a Difference Engine based on Babbage's drawings and writings - and it worked! But more importantly, during construction of the Difference Engine, Babbage imagined an even more complex machine - the Analytical Engine. Unlike the Difference Engine, Step Reckoner and all other computational devices before it - the Analytical Engine was a \u201cgeneral purpose computer\u201d. It could be used for many things, not just one particular computation; it could be given data and run operations in sequence; it had memory and even a primitive printer. Like the Difference Engine, it was ahead of its time, and was never fully constructed. However, the idea of an \u201cautomatic computer\u201d \u2013 one that could guide itself through a series of operations automatically, was a huge deal, and would foreshadow computer programs. English mathematician Ada Lovelace wrote hypothetical programs for the Analytical Engine, saying, \u201cA new, a vast, and a powerful language is developed for the future use of analysis.\u201d For her work, Ada is often considered the world\u2019s first programmer. The Analytical Engine would inspire, arguably, the first generation of computer scientists, who incorporated many of Babbage\u2019s ideas in their machines. This is why Babbage is often considered the \"father of computing\". Thanks Thought Bubble! So by the end of the 19th century, computing devices were used for special purpose tasks in the sciences and engineering, but rarely seen in business, government or domestic life. However, the US government faced a serious problem for its 1890 census that demanded the kind of efficiency that only computers could provide. The US Constitution requires that a census be conducted every ten years, for the purposes of distributing federal funds, representation in congress, and good stuff like that. And by 1880, the US population was booming, mostly due to immigration. That census took seven years to manually compile and by the time it was completed, it was already out of date \u2013 and it was predicted that the 1890 census would take 13 years to compute. That\u2019s a little problematic when it\u2019s required every decade! The Census bureau turned to Herman Hollerith, who had built a tabulating machine. His machine was \u201celectro-mechanical\u201d \u2013 it used traditional mechanical systems for keeping count, like Leibniz\u2019s Step Reckoner \u2013\u2013 but coupled them with electrically-powered components. Hollerith\u2019s machine used punch cards which were paper cards with a grid of locations that can be punched out to represent data. For example, there was a series of holes for marital status. If you were married, you would punch out the married spot, then when the card was inserted into Hollerith\u2019s machine, little metal pins would come down over the card \u2013 if a spot was punched out, the pin would pass through the hole in the paper and into a little vial of mercury, which completed the circuit. This now completed circuit powered an electric motor, which turned a gear to add one, in this case, to the \u201cmarried\u201d total. Hollerith\u2019s machine was roughly 10x faster than manual tabulations, and the Census was completed in just two and a half years - saving the census office millions of dollars. Businesses began recognizing the value of computing, and saw its potential to boost profits by improving labor- and data-intensive tasks, like accounting, insurance appraisals, and inventory management. To meet this demand, Hollerith founded The Tabulating Machine Company, which later merged with other machine makers in 1924 to become The International Business Machines Corporation or IBM - which you\u2019ve probably heard of. These electro-mechanical \u201cbusiness machines\u201d were a huge success, transforming commerce and government, and by the mid-1900s, the explosion in world population and the rise of globalized trade demanded even faster and more flexible tools for processing data, setting the stage for digital computers, which we\u2019ll talk about next week.\n\n\n                           Reading Material: The history of computing hardware covers the developments from early simple devices to aid calculation to modern day computers.\nThe first aids to computation were purely mechanical devices which required the operator to set up the initial values of an elementary arithmetic operation, then manipulate the device to obtain the result. Later, computers represented numbers in a continuous form (e.g. distance along a scale, rotation of a shaft, or a voltage). Numbers could also be represented in the form of digits, automatically manipulated by a mechanism. Although this approach generally required more complex mechanisms, it greatly increased the precision of results. The development of transistor technology and then the integrated circuit chip led to a series of breakthroughs, starting with transistor computers and then integrated circuit computers, causing digital computers to largely replace analog computers. Metal-oxide-semiconductor (MOS) large-scale integration (LSI) then enabled semiconductor memory and the microprocessor, leading to another key breakthrough, the miniaturized personal computer (PC), in the 1970s. The cost of computers gradually became so low that personal computers by the 1990s, and then mobile computers (smartphones and tablets) in the 2000s, became ubiquitous.\n\n\n== Early devices ==\n\n\n=== Ancient and medieval ===\nDevices have been used to aid computation for thousands of years, mostly using one-to-one correspondence with fingers. The earliest counting device was probably a form of tally stick. The Lebombo bone from the mountains between Eswatini and South Africa may be the oldest known mathematical artifact. It dates from 35,000 BCE and consists of 29 distinct notches that were deliberately cut into a baboon's fibula. Later record keeping aids throughout the Fertile Crescent included calculi (clay spheres, cones, etc.) which represented counts of items, probably livestock or grains, sealed in hollow unbaked clay containers. The use of counting rods is one example. The abacus was early used for arithmetic tasks. What we now call the Roman abacus was used in Babylonia as early as c. 2700\u20132300 BC. Since then, many other forms of reckoning boards or tables have been invented. In a medieval European counting house, a checkered cloth would be placed on a table, and markers moved around on it according to certain rules, as an aid to calculating sums of money.\nSeveral analog computers were constructed in ancient and medieval times to perform astronomical calculations. These included the astrolabe and Antikythera mechanism from the Hellenistic world (c. 150\u2013100 BC). In Roman Egypt, Hero of Alexandria (c. 10\u201370 AD) made mechanical devices including automata and a programmable cart. Other early mechanical devices used to perform one or another type of calculations include the planisphere and other mechanical computing devices invented by Al-Biruni (c. AD 1000); the equatorium and universal latitude-independent astrolabe by Al-Zarqali (c. AD 1015); the astronomical analog computers of other medieval Muslim astronomers and engineers; and the astronomical clock tower of Su Song (1094) during the Song dynasty. The castle clock, a hydropowered mechanical astronomical clock invented by Ismail al-Jazari in 1206, was the first programmable analog computer. Ramon Llull invented the Lullian Circle: a notional machine for calculating answers to philosophical questions (in this case, to do with Christianity) via logical combinatorics. This idea was taken up by Leibniz centuries later, and is thus one of the founding elements in computing and information science.\n\n\n=== Renaissance calculating tools ===\nScottish mathematician and physicist John Napier discovered that the multiplication and division of numbers could be performed by the addition and subtraction, respectively, of the logarithms of those numbers. While producing the first logarithmic tables, Napier needed to perform many tedious multiplications. It was at this point that he designed his 'Napier's bones', an abacus-like device that greatly simplified calculations that involved multiplication and division.\nSince real numbers can be represented as distances or intervals on a line, the slide rule was invented in the 1620s, shortly after Napier's work, to allow multiplication and division operations to be carried out significantly faster than was previously possible. Edmund Gunter built a calculating device with a single logarithmic scale at the University of Oxford. His device greatly simplified arithmetic calculations, including multiplication and division. William Oughtred greatly improved this in 1630 with his circular slide rule. He followed this up with the modern slide rule in 1632, essentially a combination of two Gunter rules, held together with the hands. Slide rules were used by generations of engineers and other mathematically involved professional workers, until the invention of the pocket calculator.\n\n\n=== Mechanical calculators ===\nIn 1609 Guidobaldo del Monte made a mechanical multiplier to calculate fractions of a degree. Based on a system of four gears, the rotation of an index on one quadrant corresponds to 60 rotations of another index on an opposite quadrant. Thanks to this machine, errors in the calculation of first, second, third and quarter degrees can be avoided. Guidobaldo is the first to document the use of gears for mechanical calculation.\nWilhelm Schickard, a German polymath, designed a calculating machine in 1623 which combined a mechanized form of Napier's rods with the world's first mechanical adding machine built into the base. Because it made use of a single-tooth gear there were circumstances in which its carry mechanism would jam. A fire destroyed at least one of the machines in 1624 and it is believed Schickard was too disheartened to build another.\n\nIn 1642, while still a teenager, Blaise Pascal started some pioneering work on calculating machines and after three years of effort and 50 prototypes he invented a mechanical calculator. He built twenty of these machines (called Pascal's calculator or Pascaline) in the following ten years. Nine Pascalines have survived, most of which are on display in European museums. A continuing debate exists over whether Schickard or Pascal should be regarded as the \"inventor of the mechanical calculator\" and the range of issues to be considered is discussed elsewhere.\nGottfried Wilhelm von Leibniz invented the stepped reckoner and his famous stepped drum mechanism around 1672. He attempted to create a machine that could be used not only for addition and subtraction but would use a moveable carriage to enable multiplication and division. Leibniz once said \"It is unworthy of excellent men to lose hours like slaves in the labour of calculation which could safely be relegated to anyone else if machines were used.\" However, Leibniz did not incorporate a fully successful carry mechanism. Leibniz also described the binary numeral system, a central ingredient of all modern computers. However, up to the 1940s, many subsequent designs (including Charles Babbage's machines of 1822 and even ENIAC of 1945) were based on the decimal system.\nAround 1820, Charles Xavier Thomas de Colmar created what would over the rest of the century become the first successful, mass-produced mechanical calculator, the Thomas Arithmometer. It could be used to add and subtract, and with a moveable carriage the operator could also multiply, and divide by a process of long multiplication and long division. It utilised a stepped drum similar in conception to that invented by Leibniz. Mechanical calculators remained in use until the 1970s.\n\n\n=== Punched-card data processing ===\nIn 1804, French weaver Joseph Marie Jacquard developed a loom in which the pattern being woven was controlled by a paper tape constructed from punched cards. The paper tape could be changed without changing the mechanical design of the loom. This was a landmark achievement in programmability. His machine was an improvement over similar weaving looms. Punched cards were preceded by punch bands, as in the machine proposed by Basile Bouchon. These bands would inspire information recording for automatic pianos and more recently numerical control machine tools.\n\nIn the late 1880s, the American Herman Hollerith invented data storage on punched cards that could then be read by a machine. To process these punched cards, he invented the tabulator and the keypunch machine. His machines used electromechanical relays and counters. Hollerith's method was used in the 1890 United States Census. That census was processed two years faster than the prior census had been. Hollerith's company eventually became the core of IBM.\nBy 1920, electromechanical tabulating machines could add, subtract, and print accumulated totals. Machine functions were directed  by inserting dozens of wire jumpers into removable control panels. When the United States instituted Social Security in 1935, IBM punched-card systems were used to process records of 26 million workers. Punched cards became ubiquitous in industry and government for accounting and administration.\nLeslie Comrie's articles on punched-card methods and W. J. Eckert's publication of Punched Card Methods in Scientific Computation in 1940, described punched-card techniques sufficiently advanced to solve some differential equations or perform multiplication and division using floating-point representations, all on punched cards and unit record machines. Such machines were used during World War II for cryptographic statistical processing, as well as a vast number of administrative uses. The Astronomical Computing Bureau, Columbia University, performed astronomical calculations representing the state of the art in computing.\n\n\n=== Calculators ===\n\nBy the 20th century, earlier mechanical calculators, cash registers, accounting machines, and so on were redesigned to use electric motors, with gear position as the representation for the state of a variable. The word \"computer\" was a job title assigned to primarily women who used these calculators to perform mathematical calculations. By the 1920s, British scientist Lewis Fry Richardson's interest in weather prediction led him to propose human computers and numerical analysis to model the weather; to this day, the most powerful computers on Earth are needed to adequately model its weather using the Navier\u2013Stokes equations.Companies like Friden, Marchant Calculator and Monroe made desktop mechanical calculators from the 1930s that could add, subtract, multiply and divide. In 1948, the Curta was introduced by Austrian inventor Curt Herzstark. It was a small, hand-cranked mechanical calculator and as such, a descendant of Gottfried Leibniz's Stepped Reckoner and Thomas' Arithmometer.\nThe world's first all-electronic desktop calculator was the British Bell Punch ANITA, released in 1961. It used vacuum tubes, cold-cathode tubes and Dekatrons in its circuits, with 12 cold-cathode \"Nixie\" tubes for its display. The ANITA sold well since it was the only electronic desktop calculator available, and was silent and quick. The tube technology was superseded in June 1963 by the U.S. manufactured Friden EC-130, which had an all-transistor design, a stack of four 13-digit numbers displayed on a 5-inch (13 cm) CRT, and introduced reverse Polish notation (RPN).\n\n\n== First general-purpose computing device ==\n\nCharles Babbage, an English mechanical engineer and polymath, originated the concept of a programmable computer. Often regarded as the \"father of the computer\", he conceptualized and invented the first mechanical computer in the early 19th century. After working on his revolutionary difference engine, designed to aid in navigational calculations, in 1833 he realized that a much more general design, an Analytical Engine, was possible. The input of programs and data was to be provided to the machine via punched cards, a method being used at the time to direct mechanical looms such as the Jacquard loom. For output, the machine would have a printer, a curve plotter and a bell. The machine would also be able to punch numbers onto cards to be read in later. It employed ordinary base-10 fixed-point arithmetic.\nThe Engine incorporated an arithmetic logic unit, control flow in the form of conditional branching and loops, and integrated memory, making it the first design for a general-purpose computer that could be described in modern terms as Turing-complete.There was to be a store, or memory, capable of holding 1,000 numbers of 40 decimal digits each (ca. 16.7 kB). An arithmetical unit, called the \"mill\", would be able to perform all four arithmetic operations, plus comparisons and optionally square roots. Initially it was conceived as a difference engine curved back upon itself, in a generally circular layout, with the long store exiting off to one side. (Later drawings depict a regularized grid layout.) Like the central processing unit (CPU) in a modern computer, the mill would rely on its own internal procedures, roughly equivalent to microcode in modern CPUs, to be stored in the form of pegs inserted into rotating drums called \"barrels\", to carry out some of the more complex instructions the user's program might specify.\nThe programming language to be employed by users was akin to modern day assembly languages. Loops and conditional branching were possible, and so the language as conceived would have been Turing-complete as later defined by Alan Turing. Three different types of punch cards were used: one for arithmetical operations, one for numerical constants, and one for load and store operations, transferring numbers from the store to the arithmetical unit or back. There were three separate readers for the three types of cards.\nThe machine was about a century ahead of its time. However, the project was slowed by various problems including disputes with the chief machinist building parts for it. All the parts for his machine had to be made by hand\u2014this was a major problem for a machine with thousands of parts. Eventually, the project was dissolved with the decision of the British Government to cease funding. Babbage's failure to complete the analytical engine can be chiefly attributed to difficulties not only of politics and financing, but also to his desire to develop an increasingly sophisticated computer and to move ahead faster than anyone else could follow. Ada Lovelace translated and added notes to the \"Sketch of the Analytical Engine\" by Luigi Federico Menabrea. This appears to be the first published description of programming, so Ada Lovelace is widely regarded as the first computer programmer.Following Babbage, although at first unaware of his earlier work, was Percy Ludgate, a clerk to a corn merchant in Dublin, Ireland. He independently designed a programmable mechanical computer, which he described in a work that was published in 1909.Two other inventors, Leonardo Torres Quevedo and Vannevar Bush, also did follow on research based on Babbage's work. In 1914, Torres published Essays on Automatics, where he wrote about Babbage's efforts at constructing a mechanical Analytical Engine and designed an electromechanical analytical machine which was to be controlled by a read-only program. The paper also introduced the idea of floating-point arithmetic. In 1920, he presented in a Paris conference the Electromechanical Arithmometer, an arithmetic unit that could perform operations automatically. Bush's paper Instrumental Analysis (1936) discussed using existing IBM punch card machines to implement Babbage's design. In the same year he started the Rapid Arithmetical Machine project to investigate the problems of constructing an electronic digital computer.\n\n\n== Analog computers ==\n\nIn the first half of the 20th century, analog computers were considered by many to be the future of computing. These devices used the continuously changeable aspects of physical phenomena such as electrical, mechanical, or hydraulic quantities to model the problem being solved, in contrast to digital computers that represented varying quantities symbolically, as their numerical values change. As an analog computer does not use discrete values, but rather continuous values, processes cannot be reliably repeated with exact equivalence, as they can with Turing machines.The first modern analog computer was a tide-predicting machine, invented by Sir William Thomson, later Lord Kelvin, in 1872. It used a system of pulleys and wires to automatically calculate predicted tide levels for a set period at a particular location and was of great utility to navigation in shallow waters. His device was the foundation for further developments in analog computing.The differential analyser, a mechanical analog computer designed to solve differential equations by integration using wheel-and-disc mechanisms, was conceptualized in 1876 by James Thomson, the brother of the more famous Lord Kelvin. He explored the possible construction of such calculators, but was stymied by the limited output torque of the ball-and-disk integrators. In a differential analyzer, the output of one integrator drove the input of the next integrator, or a graphing output. \nA notable series of analog calculating machines were developed by Leonardo Torres Quevedo since 1895, including one that was able to compute the roots of arbitrary polynomials of order eight, including the complex ones, with a precision down to thousandths.\nAn important advance in analog computing was the development of the first fire-control systems for long range ship gunlaying. When gunnery ranges increased dramatically in the late 19th century it was no longer a simple matter of calculating the proper aim point, given the flight times of the shells. Various spotters on board the ship would relay distance measures and observations to a central plotting station. There the fire direction teams fed in the location, speed and direction of the ship and its target, as well as various adjustments for Coriolis effect, weather effects on the air, and other adjustments; the computer would then output a firing solution, which would be fed to the turrets for laying. In 1912, British engineer Arthur Pollen developed the first electrically powered mechanical analogue computer (called at the time the Argo Clock). It was used by the Imperial Russian Navy in World War I. The alternative Dreyer Table fire control system was fitted to British capital ships by mid-1916.\nMechanical devices were also used to aid the accuracy of aerial bombing. Drift Sight was the first such aid, developed by Harry Wimperis in 1916 for the Royal Naval Air Service; it measured the wind speed from the air, and used that measurement to calculate the wind's effects on the trajectory of the bombs. The system was later improved with the Course Setting Bomb Sight, and reached a climax with World War II bomb sights, Mark XIV bomb sight (RAF Bomber Command) and the Norden (United States Army Air Forces).\nThe art of mechanical analog computing reached its zenith with the differential analyzer, built by H. L. Hazen and Vannevar Bush at MIT starting in 1927, which built on the mechanical integrators of James Thomson and the torque amplifiers invented by H. W. Nieman. A dozen of these devices were built before their obsolescence became obvious; the most powerful was constructed at the University of Pennsylvania's Moore School of Electrical Engineering, where the ENIAC was built.\nA fully electronic analog computer was built by Helmut H\u00f6lzer in 1942 at Peenem\u00fcnde Army Research Center.By the 1950s the success of digital electronic computers had spelled the end for most analog computing machines, but hybrid analog computers, controlled by digital electronics, remained in substantial use into the 1950s and 1960s, and later in some specialized applications.\n\n\n== Advent of the digital computer ==\nThe principle of the modern computer was first described by computer scientist Alan Turing, who set out the idea in his seminal 1936 paper, On Computable Numbers. Turing reformulated Kurt G\u00f6del's 1931 results on the limits of proof and computation, replacing G\u00f6del's universal arithmetic-based formal language with the formal and simple hypothetical devices that became known as Turing machines. He proved that some such machine would be capable of performing any conceivable mathematical computation if it were representable as an algorithm. He went on to prove that there was no solution to the Entscheidungsproblem by first showing that the halting problem for Turing machines is undecidable: in general, it is not possible to decide algorithmically whether a given Turing machine will ever halt.\nHe also introduced the notion of a \"universal machine\" (now known as a universal Turing machine), with the idea that such a machine could perform the tasks of any other machine, or in other words, it is provably capable of computing anything that is computable by executing a program stored on tape, allowing the machine to be programmable. Von Neumann acknowledged that the central concept of the modern computer was due to this paper. Turing machines are to this day a central object of study in theory of computation. Except for the limitations imposed by their finite memory stores, modern computers are said to be Turing-complete, which is to say, they have algorithm execution capability equivalent to a universal Turing machine.\n\n\n=== Electromechanical computers ===\n\nThe era of modern computing began with a flurry of development before and during World War II. Most digital computers built in this period were electromechanical \u2013 electric switches drove mechanical relays to perform the calculation. These devices had a low operating speed and were eventually superseded by much faster all-electric computers, originally using vacuum tubes.\nThe Z2 was one of the earliest examples of an electromechanical relay computer, and was created by German engineer Konrad Zuse in 1940. It was an improvement on his earlier Z1; although it used the same mechanical memory, it replaced the arithmetic and control logic with electrical relay circuits.In the same year, electro-mechanical devices called bombes were built by British cryptologists to help decipher German Enigma-machine-encrypted secret messages during World War II. The bombe's initial design was created in 1939 at the UK Government Code and Cypher School (GC&CS) at Bletchley Park by Alan Turing, with an important refinement devised in 1940 by Gordon Welchman. The engineering design and construction was the work of Harold Keen of the British Tabulating Machine Company. It was a substantial development from a device that had been designed in 1938 by Polish Cipher Bureau cryptologist Marian Rejewski, and known as the \"cryptologic bomb\" (Polish: \"bomba kryptologiczna\").\n\nIn 1941, Zuse followed his earlier machine up with the Z3, the world's first working electromechanical programmable, fully automatic digital computer. The Z3 was built with 2000 relays, implementing a 22-bit word length that operated at a clock frequency of about 5\u201310 Hz. Program code and data were stored on punched film. It was quite similar to modern machines in some respects, pioneering numerous advances such as floating-point numbers. Replacement of the hard-to-implement decimal system (used in Charles Babbage's earlier design) by the simpler binary system meant that Zuse's machines were easier to build and potentially more reliable, given the technologies available at that time. The Z3 was proven to have been a Turing-complete machine in 1998 by Ra\u00fal Rojas. In two 1936 patent applications, Zuse also anticipated that machine instructions could be stored in the same storage used for data\u2014the key insight of what became known as the von Neumann architecture, first implemented in 1948 in America in the electromechanical IBM SSEC and in Britain in the fully electronic Manchester Baby.Zuse suffered setbacks during World War II when some of his machines were destroyed in the course of Allied bombing campaigns. Apparently his work remained largely unknown to engineers in the UK and US until much later, although at least IBM was aware of it as it financed his post-war startup company in 1946 in return for an option on Zuse's patents.\nIn 1944, the Harvard Mark I was constructed at IBM's Endicott laboratories. It was a similar general purpose electro-mechanical computer to the Z3, but was not quite Turing-complete.\n\n\n=== Digital computation ===\nThe term digital was first suggested by George Robert Stibitz and refers to where a signal, such as a voltage, is not used to directly represent a value (as it would be in an analog computer), but to encode it. In November 1937, Stibitz, then working at Bell Labs (1930\u20131941), completed a relay-based calculator he later dubbed the \"Model K\" (for \"kitchen table\", on which he had assembled it), which became the first binary adder. Typically signals have two states \u2013 low (usually representing 0) and high (usually representing 1), but sometimes three-valued logic is used, especially in high-density memory. Modern computers generally use binary logic, but many early machines were decimal computers. In these machines, the basic unit of data was the decimal digit, encoded in one of several schemes, including binary-coded decimal or BCD, bi-quinary, excess-3, and two-out-of-five code.\nThe mathematical basis of digital computing is Boolean algebra, developed by the British mathematician George Boole in his work The Laws of Thought, published in 1854. His Boolean algebra was further refined in the 1860s by William Jevons and Charles Sanders Peirce, and was first presented systematically by Ernst Schr\u00f6der and A. N. Whitehead. In 1879 Gottlob Frege develops the formal approach to logic and proposes the first logic language for logical equations.In the 1930s and working independently, American electronic engineer Claude Shannon and Soviet logician Victor Shestakov both showed a one-to-one correspondence between the concepts of Boolean logic and certain electrical circuits, now called logic gates, which are now ubiquitous in digital computers. They showed that electronic relays and switches can realize the expressions of Boolean algebra. This thesis essentially founded practical digital circuit design. In addition Shannon's paper gives a correct circuit diagram for a 4 bit digital binary adder.\n\n\n=== Electronic data processing ===\nPurely electronic circuit elements soon replaced their mechanical and electromechanical equivalents, at the same time that digital calculation replaced analog. Machines such as the Z3, the Atanasoff\u2013Berry Computer, the Colossus computers, and the ENIAC were built by hand, using circuits containing relays or valves (vacuum tubes), and often used punched cards or punched paper tape for input and as the main (non-volatile) storage medium.Engineer Tommy Flowers joined the telecommunications branch of the General Post Office in 1926. While working at the research station in Dollis Hill in the 1930s, he began to explore the possible use of electronics for the telephone exchange. Experimental equipment that he built in 1934 went into operation 5 years later, converting a portion of the telephone exchange network into an electronic data processing system, using thousands of vacuum tubes.In the US, in 1940 Arthur Dickinson (IBM) invented the first digital electronic computer. This calculating device was fully electronic \u2013 control, calculations and output (the first electronic display). John Vincent Atanasoff and Clifford E. Berry of Iowa State University developed the Atanasoff\u2013Berry Computer (ABC) in 1942, the first binary electronic digital calculating device. This design was semi-electronic (electro-mechanical control and electronic calculations), and used about 300 vacuum tubes, with capacitors fixed in a mechanically rotating drum for memory. However, its paper card writer/reader was unreliable and the regenerative drum contact system was mechanical. The machine's special-purpose nature and lack of changeable, stored program distinguish it from modern computers.Computers whose logic was primarily built using vacuum tubes are now known as first generation computers.\n\n\n=== The electronic programmable computer ===\n\nDuring World War II, British codebreakers at Bletchley Park, 40 miles (64 km) north of London, achieved a number of successes at breaking encrypted enemy military communications. The German encryption machine, Enigma, was first attacked with the help of the electro-mechanical bombes. They ruled out possible Enigma settings by performing chains of logical deductions implemented electrically. Most possibilities led to a contradiction, and the few remaining could be tested by hand.\nThe Germans also developed a series of teleprinter encryption systems, quite different from Enigma. The Lorenz SZ 40/42 machine was used for high-level Army communications, code-named \"Tunny\" by the British. The first intercepts of Lorenz messages began in 1941. As part of an attack on Tunny, Max Newman and his colleagues developed the Heath Robinson, a fixed-function machine to aid in code breaking. Tommy Flowers, a senior engineer at the Post Office Research Station was recommended to Max Newman by Alan Turing and spent eleven months from early February 1943 designing and building the more flexible Colossus computer (which superseded the Heath Robinson). After a functional test in December 1943, Colossus was shipped to Bletchley Park, where it was delivered on 18 January 1944 and attacked its first message on 5 February. By the time Germany surrendered in May 1945, there were ten Colossi working at Bletchley Park.\nColossus was the world's first electronic digital programmable computer. It used a large number of valves (vacuum tubes). It had paper-tape input and was capable of being configured to perform a variety of Boolean logical operations on its data, but it was not Turing-complete. Data input to Colossus was by photoelectric reading of a paper tape transcription of the enciphered intercepted message. This was arranged in a continuous loop so that it could be read and re-read multiple times \u2013 there being no internal store for the data. The reading mechanism ran at 5,000 characters per second with the paper tape moving at 40 ft/s (12.2 m/s; 27.3 mph). Colossus Mark 1 contained 1500 thermionic valves (tubes), but Mark 2 with 2400 valves and five processors in parallel, was both 5 times faster and simpler to operate than Mark 1, greatly speeding the decoding process. Mark 2 was designed while Mark 1 was being constructed. Allen Coombs took over leadership of the Colossus Mark 2 project when Tommy Flowers moved on to other projects. The first Mark 2 Colossus became operational on 1 June 1944, just in time for the Allied Invasion of Normandy on D-Day.\nMost of the use of Colossus was in determining the start positions of the Tunny rotors for a message, which was called \"wheel setting\". Colossus included the first-ever use of shift registers and systolic arrays, enabling five simultaneous tests, each involving up to 100 Boolean calculations. This enabled five different possible start positions to be examined for one transit of the paper tape. As well as wheel setting some later Colossi included mechanisms intended to help determine pin patterns known as \"wheel breaking\". Both models were programmable using switches and plug panels in a way their predecessors had not been. \n\nWithout the use of these machines, the Allies would have been deprived of the very valuable intelligence that was obtained from reading the vast quantity of enciphered high-level telegraphic messages between the German High Command (OKW) and their army commands throughout occupied Europe. Details of their existence, design, and use were kept secret well into the 1970s. Winston Churchill personally issued an order for their destruction into pieces no larger than a man's hand, to keep secret that the British were capable of cracking Lorenz SZ cyphers (from German rotor stream cipher machines) during the oncoming Cold War. Two of the machines were transferred to the newly formed GCHQ and the others were destroyed. As a result, the machines were not included in many histories of computing. A reconstructed working copy of one of the Colossus machines is now on display at Bletchley Park.\nThe ENIAC (Electronic Numerical Integrator and Computer) was the first electronic programmable computer built in the US. Although the ENIAC used similar technology to the Colossi, it was much faster and more flexible and was Turing-complete. Like the Colossi, a \"program\" on the ENIAC was defined by the states of its patch cables and switches, a far cry from the stored program electronic machines that came later. Once a program was written, it had to be mechanically set into the machine with manual resetting of plugs and switches. The programmers of the ENIAC were women who had been trained as mathematicians.It combined the high speed of electronics with the ability to be programmed for many complex problems. It could add or subtract 5000 times a second, a thousand times faster than any other machine. It also had modules to multiply, divide, and square root. High-speed memory was limited to 20 words (equivalent to about 80 bytes). Built under the direction of John Mauchly and J. Presper Eckert at the University of Pennsylvania, ENIAC's development and construction lasted from 1943 to full operation at the end of 1945. The machine was huge, weighing 30 tons, using 200 kilowatts of electric power and contained over 18,000 vacuum tubes, 1,500 relays, and hundreds of thousands of resistors, capacitors, and inductors. One of its major engineering feats was to minimize the effects of tube burnout, which was a common problem in machine reliability at that time. The machine was in almost constant use for the next ten years.\n\n\n== Stored-program computer ==\n\nThe theoretical basis for the stored-program computer was proposed by Alan Turing in his 1936 paper On Computable Numbers. Whilst Turing was a Princeton working on his PhD, John von Neumann got to know him and became intrigued by his concept of a universal computing machine.Early computing machines executed the set sequence of steps, known as a 'program', that could be altered by changing electrical connections using switches or a patch panel (or plugboard). However, this process of 'reprogramming' was often difficult and time-consuming, requiring engineers to create flowcharts and physically re-wire the machines. Stored-program computers, by contrast, were designed to store a set of instructions (a program), in memory \u2013 typically the same memory as stored data.\nENIAC inventors John Mauchly and J. Presper Eckert proposed, in August 1944, the construction of a machine called the Electronic Discrete Variable Automatic Computer (EDVAC) and design work for it commenced at the University of Pennsylvania's Moore School of Electrical Engineering, before the ENIAC was fully operational.  The design implemented a number of important architectural and logical improvements conceived during the ENIAC's construction, and a high-speed serial-access memory. However, Eckert and Mauchly left the project and its construction floundered.\nIn 1945 von Neumann visited the Moore School and wrote notes on what he saw, which he sent to the project. The U.S. Army liaison there had them typed and  circulated as the First Draft of a Report on the EDVAC. The draft did not mention Eckert and Mauchly and, despite its incomplete nature and questionable lack of attribution of the sources of some of the ideas, the computer architecture it outlined became known as the 'von Neumann architecture'.\nIn 1945 Turing joined the UK National Physical Laboratory and began work on developing an electronic stored-program digital computer. His late-1945 report 'Proposed Electronic Calculator' was the first reasonably detailed specification for such a device. Turing presented a more detailed paper to the National Physical Laboratory (NPL) Executive Committee in March 1946, giving the first substantially complete design of a stored-program computer, a device that was called the Automatic Computing Engine (ACE).\nTuring considered that the speed and the size of computer memory were crucial elements,:\u200ap.4\u200a so he proposed a high-speed memory of what would today be called 25 KB, accessed at a speed of 1 MHz. The ACE implemented subroutine calls, whereas the EDVAC did not, and the ACE also used Abbreviated Computer Instructions, an early form of programming language.\n\n\n=== Manchester Baby ===\n\nThe Manchester Baby (Small Scale Experimental Machine, SSEM) was the world's first electronic stored-program computer. It was built at the Victoria University of Manchester by Frederic C. Williams, Tom Kilburn and Geoff Tootill, and ran its first program on 21 June 1948.The machine was not intended to be a practical computer but was instead designed as a testbed for the Williams tube, the first random-access digital storage device. Invented by Freddie Williams and Tom Kilburn at the University of Manchester in 1946 and 1947, it was a cathode-ray tube that used an effect called secondary emission to temporarily store electronic binary data, and was used successfully in several early computers.\nDescribed as small and primitive in a 1998 retrospective, the Baby was the first working machine to contain all of the elements essential to a modern electronic computer. As soon as it had demonstrated the feasibility of its design, a project was initiated at the university to develop the design into a more usable computer, the Manchester Mark 1. The Mark 1 in turn quickly became the prototype for the Ferranti Mark 1, the world's first commercially available general-purpose computer.The Baby had a 32-bit word length and a memory of 32 words. As it was designed to be the simplest possible stored-program computer, the only arithmetic operations implemented in hardware were subtraction and negation; other arithmetic operations were implemented in software. The first of three programs written for the machine found the highest proper divisor of 218 (262,144), a calculation that was known would take a long time to run\u2014and so prove the computer's reliability\u2014by testing every integer from 218 \u2212 1 downwards, as division was implemented by repeated subtraction of the divisor. The program consisted of 17 instructions and ran for 52 minutes before reaching the correct answer of 131,072, after the Baby had performed 3.5 million operations (for an effective CPU speed of 1.1 kIPS). The successive approximations to the answer were displayed as a pattern of dots on the output CRT which mirrored the pattern held on the Williams tube used for storage.\n\n\n=== Manchester Mark 1 ===\nThe SSEM led to the development of the Manchester Mark 1 at the University of Manchester. Work began in August 1948, and the first version was operational by April 1949; a program written to search for Mersenne primes ran error-free for nine hours on the night of 16/17 June 1949. The machine's successful operation was widely reported in the British press, which used the phrase \"electronic brain\" in describing it to their readers.\nThe computer is especially historically significant because of its pioneering inclusion of index registers, an innovation which made it easier for a program to read sequentially through an array of words in memory. Thirty-four patents resulted from the machine's development, and many of the ideas behind its design were incorporated in subsequent commercial products such as the IBM 701 and 702 as well as the Ferranti Mark 1. The chief designers, Frederic C. Williams and Tom Kilburn, concluded from their experiences with the Mark 1 that computers would be used more in scientific roles than in pure mathematics. In 1951 they started development work on Meg, the Mark 1's successor, which would include a floating-point unit.\n\n\n=== EDSAC ===\nThe other contender for being the first recognizably modern digital stored-program computer was the EDSAC, designed and constructed by Maurice Wilkes and his team at the University of Cambridge Mathematical Laboratory in England at the University of Cambridge in 1949. The machine was inspired by John von Neumann's seminal First Draft of a Report on the EDVAC and was one of the first usefully operational electronic digital stored-program computer.EDSAC ran its first programs on 6 May 1949, when it calculated a table of squares and a list of prime numbers.The EDSAC also served as the basis for the first commercially applied computer, the LEO I, used by food manufacturing company J. Lyons & Co. Ltd.  EDSAC 1 was finally shut down on 11 July 1958, having been superseded by EDSAC 2 which stayed in use until 1965.\nThe \"brain\" [computer] may one day come down to our level [of the common people] and help with our income-tax and book-keeping calculations. But this is speculation and there is no sign of it so far.\n\n\n=== EDVAC ===\nENIAC inventors John Mauchly and J. Presper Eckert proposed the EDVAC's construction in August 1944, and design work for the EDVAC commenced at the University of Pennsylvania's Moore School of Electrical Engineering, before the ENIAC was fully operational.  The design implemented a number of important architectural and logical improvements conceived during the ENIAC's construction, and a high-speed serial-access memory. However, Eckert and Mauchly left the project and its construction floundered.\nIt was finally delivered to the U.S. Army's Ballistics Research Laboratory at the Aberdeen Proving Ground in August 1949, but due to a number of problems, the computer only began operation in 1951, and then only on a limited basis.\n\n\n=== Commercial computers ===\nThe first commercial computer was the Ferranti Mark 1, built by Ferranti and delivered to the University of Manchester in February 1951. It was based on the Manchester Mark 1. The main improvements over the Manchester Mark 1 were in the size of the primary storage (using random access Williams tubes), secondary storage (using a magnetic drum), a faster multiplier, and additional instructions. The basic cycle time was 1.2 milliseconds, and a multiplication could be completed in about 2.16 milliseconds. The multiplier used almost a quarter of the machine's 4,050 vacuum tubes (valves). A second machine was purchased by the University of Toronto, before the design was revised into the Mark 1 Star. At least seven of these later machines were delivered between 1953 and 1957, one of them to Shell labs in Amsterdam.In October 1947, the directors of J. Lyons & Company, a British catering company famous for its teashops but with strong interests in new office management techniques, decided to take an active role in promoting the commercial development of computers. The LEO I computer (Lyons Electronic Office) became operational in April 1951 and ran the world's first regular routine office computer job. On 17 November 1951, the J. Lyons company began weekly operation of a bakery valuations job on the LEO \u2013 the first business application to go live on a stored program computer.In June 1951, the UNIVAC I (Universal Automatic Computer) was delivered to the U.S. Census Bureau. Remington Rand eventually sold 46 machines at more than US$1 million each ($11.3 million as of 2024). UNIVAC was the first \"mass produced\" computer. It used 5,200 vacuum tubes and consumed 125 kW of power. Its primary storage was serial-access mercury delay lines capable of storing 1,000 words of 11 decimal digits plus sign (72-bit words).\nIn 1952, Compagnie des Machines Bull released the Gamma 3 computer, which became a large success in Europe, eventually selling more than 1,200 units, and the first computer produced in more than 1,000 units. The Gamma 3 had innovative features for its time including a dual-mode, software switchable, BCD and binary ALU, as well as a hardwired floating-point library for scientific computing. In its E.T configuration, the Gamma 3 drum memory could fit about 50,000 instructions for a capacity of 16,384 words (around 100 kB), a large amount for the time. \nCompared to the UNIVAC, IBM introduced a smaller, more affordable computer in 1954 that proved very popular. The IBM 650 weighed over 900 kg, the attached power supply weighed around 1350 kg and both were held in separate cabinets of roughly 1.5\u2009\u00d7\u20090.9\u2009\u00d7\u20091.8 m. The system cost US$500,000 ($5.45 million as of 2024) or could be leased for US$3,500 a month ($40,000 as of 2024). Its drum memory was originally 2,000 ten-digit words, later expanded to 4,000 words. Memory limitations such as this were to dominate programming for decades afterward.  The program instructions were fetched from the spinning drum as the code ran. Efficient execution using drum memory was provided by a combination of hardware architecture \u2013 the instruction format included the address of the next instruction \u2013 and software: the Symbolic Optimal Assembly Program, SOAP, assigned instructions to the optimal addresses (to the extent possible by static analysis of the source program). Thus many instructions were, when needed, located in the next row of the drum to be read and additional wait time for drum rotation was reduced.\n\n\n=== Microprogramming ===\nIn 1951, British scientist Maurice Wilkes developed the concept of microprogramming from the realisation that the central processing unit of a computer could be controlled by a miniature, highly specialized computer program in high-speed ROM. Microprogramming allows the base instruction set to be defined or extended by built-in programs (now called firmware or microcode). This concept greatly simplified CPU development. He first described this at the University of Manchester Computer Inaugural Conference in 1951, then published in expanded form in IEEE Spectrum in 1955.It was widely used in the CPUs and floating-point units of mainframe and other computers; it was implemented for the first time in EDSAC 2, which also used multiple identical \"bit slices\" to simplify design. Interchangeable, replaceable tube assemblies were used for each bit of the processor.\n\n\n== Magnetic memory ==\nMagnetic drum memories were developed for the US Navy during WW II with the work continuing at Engineering Research Associates (ERA) in 1946 and 1947. ERA, then a part of Univac included a drum memory in its 1103, announced in February 1953. The first mass-produced computer, the IBM 650, also announced in 1953 had about 8.5 kilobytes of drum memory.\nMagnetic core memory patented in 1949 with its first usage demonstrated for the Whirlwind computer in August 1953. Commercialization followed quickly. Magnetic core was used in peripherals of the IBM 702 delivered in July 1955, and later in the 702 itself. The IBM 704 (1955) and the Ferranti Mercury (1957) used magnetic-core memory. It went on to dominate the field into the 1970s, when it was replaced with semiconductor memory.  Magnetic core peaked in volume about 1975 and declined in usage and market share thereafter.As late as 1980, PDP-11/45 machines using magnetic-core main memory and drums for swapping were still in use at many of the original UNIX sites.\n\n\n== Early digital computer characteristics ==\n\n\n== Transistor computers ==\n\nThe bipolar transistor was invented in 1947. From 1955 onward transistors replaced vacuum tubes in computer designs, giving rise to the \"second generation\" of computers. Compared to vacuum tubes, transistors have many advantages: they are smaller, and require less power than vacuum tubes, so give off less heat. Silicon junction transistors were much more reliable than vacuum tubes and had longer service life. Transistorized computers could contain tens of thousands of binary logic circuits in a relatively compact space. Transistors greatly reduced computers' size, initial cost, and operating cost. Typically, second-generation computers were composed of large numbers of printed circuit boards such as the IBM Standard Modular System, each carrying one to four logic gates or flip-flops.\nAt the University of Manchester, a team under the leadership of Tom Kilburn designed and built a machine using the newly developed transistors instead of valves. Initially the only devices available were germanium point-contact transistors, less reliable than the valves they replaced but which consumed far less power. Their first transistorized computer, and the first in the world, was operational by 1953, and a second version was completed there in April 1955. The 1955 version used 200 transistors, 1,300 solid-state diodes, and had a power consumption of 150 watts. However, the machine did make use of valves to generate its 125 kHz clock waveforms and in the circuitry to read and write on its magnetic drum memory, so it was not the first completely transistorized computer.\nThat distinction goes to the Harwell CADET of 1955, built by the electronics division of the Atomic Energy Research Establishment at Harwell. The design featured a 64-kilobyte magnetic drum memory store with multiple moving heads that had been designed at the National Physical Laboratory, UK. By 1953 this team had transistor circuits operating to read and write on a smaller magnetic drum from the Royal Radar Establishment. The machine used a low clock speed of only 58 kHz to avoid having to use any valves to generate the clock waveforms.CADET used 324-point-contact transistors provided by the UK company Standard Telephones and Cables; 76 junction transistors were used for the first stage amplifiers for data read from the drum, since point-contact transistors were too noisy. From August 1956 CADET was offering a regular computing service, during which it often executed continuous computing runs of 80 hours or more. Problems with the reliability of early batches of point contact and alloyed junction transistors meant that the machine's mean time between failures was about 90 minutes, but this improved once the more reliable bipolar junction transistors became available.The Manchester University Transistor Computer's design was adopted by the local engineering firm of Metropolitan-Vickers in their Metrovick 950, the first commercial transistor computer anywhere. Six Metrovick 950s were built, the first completed in 1956. They were successfully deployed within various departments of the company and were in use for about five years. A second generation computer, the IBM 1401, captured about one third of the world market. IBM installed more than ten thousand 1401s between 1960 and 1964.\n\n\n=== Transistor peripherals ===\nTransistorized electronics improved not only the CPU (Central Processing Unit), but also the peripheral devices. The second generation disk data storage units were able to store tens of millions of letters and digits.  Next to the fixed disk storage units, connected to the CPU via high-speed data transmission, were removable disk data storage units. A removable disk pack can be easily exchanged with another pack in a few seconds. Even if the removable disks' capacity is smaller than fixed disks, their interchangeability guarantees a nearly unlimited quantity of data close at hand. Magnetic tape provided archival capability for this data, at a lower cost than disk.\nMany second-generation CPUs delegated peripheral device communications to a secondary processor. For example, while the communication processor controlled card reading and punching, the main CPU executed calculations and binary branch instructions. One databus would bear data between the main CPU and core memory at the CPU's fetch-execute cycle rate, and other databusses would typically serve the peripheral devices. On the PDP-1, the core memory's cycle time was 5 microseconds; consequently most arithmetic instructions took 10 microseconds (100,000 operations per second) because most operations took at least two memory cycles; one for the instruction, one for the operand data fetch.\nDuring the second generation remote terminal units (often in the form of Teleprinters like a Friden Flexowriter) saw greatly increased use. Telephone connections provided sufficient speed for early remote terminals and allowed hundreds of kilometers separation between remote-terminals and the computing center. Eventually these stand-alone computer networks would be generalized into an interconnected network of networks\u2014the Internet.\n\n\n=== Transistor supercomputers ===\nThe early 1960s saw the advent of supercomputing. The Atlas was a joint development between the University of Manchester, Ferranti, and Plessey, and was first installed at Manchester University and officially commissioned in 1962 as one of the world's first supercomputers \u2013 considered to be the most powerful computer in the world at that time. It was said that whenever Atlas went offline half of the United Kingdom's computer capacity was lost. It was a second-generation machine, using discrete germanium transistors. Atlas also pioneered the Atlas Supervisor, \"considered by many to be the first recognisable modern operating system\".In the US, a series of computers at Control Data Corporation (CDC) were designed by Seymour Cray to use innovative designs and parallelism to achieve superior computational peak performance. The CDC 6600, released in 1964, is generally considered the first supercomputer. The CDC 6600 outperformed its predecessor, the IBM 7030 Stretch, by about a factor of 3. With performance of about 1 megaFLOPS, the CDC 6600 was the world's fastest computer from 1964 to 1969, when it relinquished that status to its successor, the CDC 7600.\n\n\n== Integrated circuit computers ==\n\nThe \"third-generation\" of digital electronic computers used integrated circuit (IC) chips as the basis of their logic.\nThe idea of an integrated circuit was conceived by a radar scientist working for the Royal Radar Establishment of the Ministry of Defence, Geoffrey W.A. Dummer.\nThe first working integrated circuits were invented by Jack Kilby at Texas Instruments and Robert Noyce at Fairchild Semiconductor. Kilby recorded his initial ideas concerning the integrated circuit in July 1958, successfully demonstrating the first working integrated example on 12 September 1958. Kilby's invention was a hybrid integrated circuit (hybrid IC). It had external wire connections, which made it difficult to mass-produce.Noyce came up with his own idea of an integrated circuit half a year after Kilby. Noyce's invention was a monolithic integrated circuit (IC) chip. His chip solved many practical problems that Kilby's had not. Produced at Fairchild Semiconductor, it was made of silicon, whereas Kilby's chip was made of germanium. The basis for Noyce's monolithic IC was Fairchild's planar process, which allowed integrated circuits to be laid out using the same principles as those of printed circuits. The planar process was developed by Noyce's colleague Jean Hoerni in early 1959, based on Mohamed M. Atalla's work on semiconductor surface passivation by silicon dioxide at Bell Labs in the late 1950s.Third generation (integrated circuit) computers first appeared in the early 1960s in computers developed for government purposes, and then in commercial computers beginning in the mid-1960s.  The first silicon IC computer was the Apollo Guidance Computer or AGC. Although not the most powerful computer of its time, the extreme constraints on size, mass, and power of the Apollo spacecraft required the AGC to be much smaller and denser than any prior computer, weighing in at only 70 pounds (32 kg). Each lunar landing mission carried two AGCs, one each in the command and lunar ascent modules.\n\n\n== Semiconductor memory ==\n\nThe MOSFET (metal\u2013oxide\u2013semiconductor field-effect transistor, or MOS transistor) was invented by Mohamed M. Atalla and Dawon Kahng at Bell Labs in 1959. In addition to data processing, the MOSFET enabled the practical use of MOS transistors as memory cell storage elements, a function previously served by magnetic cores. Semiconductor memory, also known as MOS memory, was cheaper and consumed less power than magnetic-core memory. MOS random-access memory (RAM), in the form of static RAM (SRAM), was developed by John Schmidt at Fairchild Semiconductor in 1964. In 1966, Robert Dennard at the IBM Thomas J. Watson Research Center developed MOS dynamic RAM (DRAM). In 1967, Dawon Kahng and Simon Sze at Bell Labs developed the floating-gate MOSFET, the basis for MOS non-volatile memory such as EPROM, EEPROM and flash memory.\n\n\n== Microprocessor computers ==\n\nThe \"fourth-generation\" of digital electronic computers used microprocessors as the basis of their logic. The microprocessor has origins in the MOS integrated circuit (MOS IC) chip. Due to rapid MOSFET scaling, MOS IC chips rapidly increased in complexity at a rate predicted by Moore's law, leading to large-scale integration (LSI) with hundreds of transistors on a single MOS chip by the late 1960s. The application of MOS LSI chips to computing was the basis for the first microprocessors, as engineers began recognizing that a complete computer processor could be contained on a single MOS LSI chip.The subject of exactly which device was the first microprocessor is contentious, partly due to lack of agreement on the exact definition of the term \"microprocessor\". The earliest multi-chip microprocessors were the Four-Phase Systems AL-1 in 1969 and Garrett AiResearch MP944 in 1970, developed with multiple MOS LSI chips. The first single-chip microprocessor was the Intel 4004, developed on a single PMOS LSI chip. It was designed and realized by Ted Hoff, Federico Faggin, Masatoshi Shima and Stanley Mazor at Intel, and released in 1971. Tadashi Sasaki and Masatoshi Shima at Busicom, a calculator manufacturer, had the initial insight that the CPU could be a single MOS LSI chip, supplied by Intel.\nWhile the earliest microprocessor ICs literally contained only the processor, i.e. the central processing unit, of a computer, their progressive development naturally led to chips containing most or all of the internal electronic parts of a computer. The integrated circuit in the image on the right, for example, an Intel 8742, is an 8-bit microcontroller that includes a CPU running at 12 MHz, 128 bytes of RAM, 2048 bytes of EPROM, and I/O in the same chip.\nDuring the 1960s there was considerable overlap between second and third generation technologies. IBM implemented its IBM Solid Logic Technology modules in hybrid circuits for the IBM System/360 in 1964. As late as 1975, Sperry Univac continued the manufacture of second-generation machines such as the UNIVAC 494. The Burroughs large systems such as the B5000 were stack machines, which allowed for simpler programming. These pushdown automatons were also implemented in minicomputers and microprocessors later, which influenced programming language design. Minicomputers served as low-cost computer centers for industry, business and universities. It became possible to simulate analog circuits with the simulation program with integrated circuit emphasis, or SPICE (1971) on minicomputers, one of the programs for electronic design automation (EDA). The microprocessor led to the development of microcomputers, small, low-cost computers that could be owned by individuals and small businesses. Microcomputers, the first of which appeared in the 1970s, became ubiquitous in the 1980s and beyond.\n\nWhile which specific product is considered the first microcomputer system is a matter of debate, one of the earliest is R2E's Micral N (Fran\u00e7ois Gernelle, Andr\u00e9 Truong) launched \"early 1973\" using the Intel 8008. The first commercially available microcomputer kit was the Intel 8080-based Altair 8800, which was announced in the January 1975 cover article of Popular Electronics. However, the Altair 8800 was an extremely limited system in its initial stages, having only 256 bytes of DRAM in its initial package and no input-output except its toggle switches and LED register display. Despite this, it was initially surprisingly popular, with several hundred sales in the first year, and demand rapidly outstripped supply. Several early third-party vendors such as Cromemco and Processor Technology soon began supplying additional S-100 bus hardware for the Altair 8800.\nIn April 1975 at the Hannover Fair, Olivetti presented the P6060, the world's first complete, pre-assembled personal computer system. The central processing unit consisted of two cards, code named PUCE1 and PUCE2, and unlike most other personal computers was built with TTL components rather than a microprocessor. It had one or two 8\" floppy disk drives, a 32-character plasma display, 80-column graphical thermal printer, 48 Kbytes of RAM, and BASIC language. It weighed 40 kg (88 lb). As a complete system, this was a significant step from the Altair, though it never achieved the same success. It was in competition with a similar product by IBM that had an external floppy disk drive.\nFrom 1975 to 1977, most microcomputers, such as the MOS Technology KIM-1, the Altair 8800, and some versions of the Apple I, were sold as kits for do-it-yourselfers. Pre-assembled systems did not gain much ground until 1977, with the introduction of the Apple II, the Tandy TRS-80, the first SWTPC computers, and the Commodore PET. Computing has evolved with microcomputer architectures, with features added from their larger brethren, now dominant in most market segments.\nA NeXT Computer and its object-oriented development tools and libraries were used by Tim Berners-Lee and Robert Cailliau at CERN to develop the world's first web server software, CERN httpd, and also used to write the first web browser, WorldWideWeb.\nSystems as complicated as computers require very high reliability. ENIAC remained on, in continuous operation from 1947 to 1955, for eight years before being shut down. Although a vacuum tube might fail, it would be replaced without bringing down the system. By the simple strategy of never shutting down ENIAC, the failures were dramatically reduced. The vacuum-tube SAGE air-defense computers became remarkably reliable \u2013 installed in pairs, one off-line, tubes likely to fail did so when the computer was intentionally run at reduced power to find them. Hot-pluggable hard disks, like the hot-pluggable vacuum tubes of yesteryear, continue the tradition of repair during continuous operation. Semiconductor memories routinely have no errors when they operate, although operating systems like Unix have employed memory tests on start-up to detect failing hardware. Today, the requirement of reliable performance is made even more stringent when server farms are the delivery platform. Google has managed this by using fault-tolerant software to recover from hardware failures, and is even working on the concept of replacing entire server farms on-the-fly, during a service event.In the 21st century, multi-core CPUs became commercially available. Content-addressable memory (CAM) has become inexpensive enough to be used in networking, and is frequently used for on-chip cache memory in modern microprocessors, although no computer system has yet implemented hardware CAMs for use in programming languages. Currently, CAMs (or associative arrays) in software are programming-language-specific. Semiconductor memory cell arrays are very regular structures, and manufacturers prove their processes on them; this allows price reductions on memory products. During the 1980s, CMOS logic gates developed into devices that could be made as fast as other circuit types; computer power consumption could therefore be decreased dramatically. Unlike the continuous current draw of a gate based on other logic types, a CMOS gate only draws significant current, except for leakage, during the 'transition' between logic states.CMOS circuits have allowed computing to become a commodity which is now ubiquitous, embedded in many forms, from greeting cards and telephones to satellites. The thermal design power which is dissipated during operation has become as essential as computing speed of operation. In 2006 servers consumed 1.5% of the total energy budget of the U.S. The energy consumption of computer data centers was expected to double to 3% of world consumption by 2011. The SoC (system on a chip) has compressed even more of the integrated circuitry into a single chip; SoCs are enabling phones and PCs to converge into single hand-held wireless mobile devices.Quantum computing is an emerging technology in the field of computing. MIT Technology Review reported 10 November 2017 that IBM has created a 50-qubit computer; currently its quantum state lasts 50 microseconds. Google researchers have been able to extend the 50 microsecond time limit, as reported 14 July 2021 in Nature; stability has been extended 100-fold by spreading a single logical qubit over chains of data qubits for quantum error correction. Physical Review X reported a technique for 'single-gate sensing as a viable readout method for spin qubits' (a singlet-triplet spin state in silicon) on 26 November 2018. A Google team has succeeded in operating their RF pulse modulator chip at 3 Kelvin, simplifying the cryogenics of their 72-qubit computer, which is set up to operate at 0.3 Kelvin; but the readout circuitry and another driver remain to be brought into the cryogenics. See: Quantum supremacy Silicon qubit systems have demonstrated entanglement at non-local distances.Computing hardware and its software have even become a metaphor for the operation of the universe.\n\n\n== Epilogue ==\nAn indication of the rapidity of development of this field can be inferred from the history of the seminal 1947 article by Burks, Goldstine and von Neumann. By the time that anyone had time to write anything down, it was obsolete. After 1945, others read John von Neumann's  First Draft of a Report on the EDVAC, and immediately started implementing their own systems. To this day, the rapid pace of development has continued, worldwide.\n\n\n\n\n\n                           Answer: \n\n"}, {"role": "assistant", "content": "\ufeffComputers have become essential for various aspects of modern life, from infrastructure operation to scientific advancement. Computing devices have evolved over time, from the abacus and astrolabe to electronic computers. Initially a job title for human calculators, the term \"computer\" gradually shifted to refer to devices in the 1800s.\n\nOne of the more notable of these devices was Gottfried Leibniz's Step Reckoner which worked as an automated mechanical calculator. He attempted to create a machine that could be used not only for addition and subtraction but would use a moveable carriage to enable multiplication and division, however, Leibniz did not incorporate a fully successful carry mechanism. This design was one of the first that could do all 4 operations and would become used for the next three centuries for calculator design. \n\nUnfortunately, even with mechanical calculators, most real-world problems required many steps of  computations before determining an answer which could be time-consuming to generate. Before the 20th century, people performed computations through pre-computed tables.These tables could be used for tasks like finding square roots while being faster and more accurate than hand calculations. This was especially important for military applications like artillery firing where calculations needed to be both fast and accurate. \n\nThe problem with this is that when the design of the machine is changed, a whole-new pre-computed table had to be created which would also be very time-consuming and led to errors. Charles Babbage, an English mechanical engineer and polymath, originated the concept of a programmable computer. Often regarded as the \"father of the computer\", he conceptualized and invented the first mechanical computer in the early 19th century. After working on his revolutionary difference engine, he realized that a much more general design, an Analytical Engine, was possible.\n\nThe Analytical Engine was a general-purpose computer, not limited to one task, could be given data and run operations in sequence, and had a memory and a primitive printer. Like the Difference Engine, his idea was ahead of its time and was never fully built but inspired future generations. Ada Lovelace, who most consider the world's first programmer, wrote hypothetical programs for the Analytical Engine. The Analytical Engine would go on to inspire the first generation of computer scientists who incorporated these ideas into their machines.\n\nBy the end of the 19th century, the computing devices only found use for special-purpose tasks in science and engineering, but rarely seen in business, government or domestic life. The first application of computing devices in such scenarios was through Herman Hollerith's Punch Card Tabulating machine, which was an electro-mechanical machine that used punch cards to efficiently process data for the 1890 US census. That census was processed two years faster than the prior census had been. Hollerith's company eventually became the core of IBM and electro-mechanical business machines became a huge success, transforming commerce and government, and eventually setting the stage for digital computers.\n"}]}
{"messages": [{"role": "system", "content": "\n                      Please write a 500 word summary on the following Transcript based on the Reading Material.\n                      Pick relevant information from the Reading Material and add it to the summary of the Transcript.\n                      The Summary should be only of the Transcript with a few information from the Reading Material.\n                      If you are not sure of the summary, say 'I don't know'.\n    "}, {"role": "user", "content": "Transcript: Hi, I\u2019m Carrie Ann and this is Crash Course Computer Science. So last episode, we talked about how numbers can be represented in binary. Representing Like, 00101010 is 42 in decimal. Representing  and storing numbers is an important function of a computer, but the real goal is computation, or manipulating numbers in a structured and purposeful way, like adding two numbers together. These operations are handled by a computer\u2019s Arithmetic and Logic Unit, but most people call it by its street name: the ALU. The ALU is the mathematical brain of a computer. When you understand an ALU\u2019s design and function, you\u2019ll understand a fundamental part of modern computers. It is THE thing that does all of the computation in a computer, so basically everything uses it. First though, look at this beauty. This is perhaps the most famous ALU ever, the Intel 74181. When it was released in 1970, it was It was the first complete ALU that fit entirely inside of a single chip - Which was a huge engineering feat at the time. So today we\u2019re going to take those Boolean logic gates we learned about last week to build a simple ALU circuit with much of the same functionality as the 74181. And over the next few episodes we\u2019ll use this to construct a computer from scratch. So it\u2019s going to get a little bit complicated, but I think you guys can handle it. INTRO An ALU is really two units in one -- there\u2019s an arithmetic unit and a logic unit. Let's start with the arithmetic unit, which is responsible for handling all numerical operations in a computer, like addition and subtraction. It also does a bunch of other simple things like add one to a number, which is called an increment operation, but we\u2019ll talk about those later. Today, we\u2019re going to focus on the pi\u00e8ce de r\u00e9sistance, the cr\u00e8me de la cr\u00e8me of operations that underlies almost everything else a computer does - adding two numbers together. We could build this circuit entirely out of individual transistors, but that would get confusing really fast. So instead as we talked about in Episode 3 \u2013 we can use a high-level of abstraction and build our components out of logic gates, in this case: AND, OR, NOT and XOR gates. The simplest adding circuit that we can build takes two binary digits, and adds them together. So we have two inputs, A and B, and one output, which is the sum of those two digits. Just to clarify: A, B and the output are all single bits. There are only four possible input combinations. The first three are: 0+0 = 0 1+0 = 1 0+1 = 1 Remember that in binary, 1 is the same as true, and 0 is the same as false. So this set of inputs exactly matches the boolean logic of an XOR gate, and we can use it as our 1-bit adder. But the fourth input combination, 1 + 1, is a special case. 1 + 1 is 2 (obviously) but there\u2019s no 2 digit in binary, so as we talked about last episode, the result is 0 and the 1 is carried to the next column. So the sum is really 10 in binary. Now, the output of our XOR gate is partially correct - 1 plus 1, outputs 0. But, we need an extra output wire for that carry bit. The carry bit is only \u201ctrue\u201d when the inputs are 1 AND 1, because that's the only time when the result (two) is bigger than 1 bit can store\u2026 and conveniently we have a gate for that! An AND gate, which is only true when both inputs are true, so we\u2019ll add that to our circuit too. And that's it. This circuit is called a half adder. It\u2019s It's not that complicated - just two logic gates - but let\u2019s abstract away even this level of detail and encapsulate our newly minted half adder as its own component, with two inputs - bits A and B - and two outputs, the sum and the carry bits. This takes us to another level of abstraction\u2026 heh\u2026 I feel like I say that a lot. I wonder if this is going to become a thing. Anyway, If you want to add more than 1 + 1 we\u2019re going to need a \u201cFull Adder.\u201d That half-adder left us with a carry bit as output. That means that when we move on to the next column in a multi-column addition, and every column after that, we are going to have to add three bits together, no two. A full adder is a bit more complicated - it takes three bits as inputs: A, B and C. So the maximum possible input is 1 + 1 + 1, which equals 1 carry out 1, so we still only need two output wires: sum and carry. We can build a full adder using half adders. To do this, we use a half adder to add A plus B just like before \u2013 but then feed that result and input C into a second half adder. Lastly, we need a OR gate to check if either one of the carry bits was true. That\u2019s it, we just made a full adder! Again,we can go up a level of abstraction and wrap up this full adder as its own component. It takes three inputs, adds them, and outputs the sum and the carry, if there is one. Armed with our new components, we can now build a circuit that takes two, 8-bit numbers \u2013 Let\u2019s call them A and B \u2013 and adds them together. Let\u2019s start with the very first bit of A and B, which we\u2019ll call A0 and B0. At this point, there is no carry bit to deal with, because this is our first addition. So we can use our half adder to add these two bits together. The output is sum0. Now we want to add A1 and B1 together. It's possible there was a carry from the previous addition of A0 and B0, so this time we need to use a full adder that also inputs the carry bit. We output this result as sum1. Then, we take any carry from this full adder, and run it into the next full adder that handles A2 and B2. And we just keep doing this in a big chain until all 8 bits have been added. Notice how the carry bits ripple forward to each subsequent adder. For this reason, this is called an 8-bit ripple carry adder. Notice how our last full adder has a carry out. If there is a carry into the 9th bit, it means the sum of the two numbers is too large to fit into 8-bits. This is called an overflow. In general, an overflow occurs when the result of an addition is too large to be represented by the number of bits you are using. This can usually cause errors and unexpected behavior. Famously, the original PacMan arcade game used 8 bits to keep track of what level you were on. This meant that if you made it past level 255 \u2013 the largest number storablein 8 bits \u2013 to level 256, the ALU overflowed. This caused a bunch of errors and glitches making the level unbeatable. The bug became a rite of passage for the greatest PacMan players. So if we want to avoid overflows, we can extend our circuit with more full adders, allowing us to add 16 or 32 bit numbers. This makes overflows less likely to happen, but at the expense of more gates. An additional downside is that it takes a little bit of time for each of the carries to ripple forward. Admittedly, not very much time, electrons move pretty fast, so we\u2019re talking about billionths of a second, but that\u2019s enough to make a difference in today\u2019s fast computers. For this reason, modern computers use a slightly different adding circuit called a \u2018carry-look-ahead\u2019 adder which is faster, but ultimately does exactly the same thing-- adds binary numbers. The ALU\u2019s arithmetic unit also has circuits for other math operations and in general these 8 operations are always supported. And like our adder, these other operations are built from individual logic gates. Interestingly, you may have noticed that there are no multiply and divide operations. That's because simple ALUs don\u2019t have a circuit for this, and instead just perform a series of additions. Let\u2019s say you want to multiply 12 by 5. That\u2019s the same thing as adding 12 to itself 5 times. So it would take 5 passes through the ALU to do this one multiplication. And this is how many simple processors, like those in your thermostat, TV remote, and microwave, do multiplication. It\u2019s slow, but it gets the job done. However, fancier processors, like those in your laptop or smartphone, have arithmetic units with dedicated circuits for multiplication. And as you might expect, the circuit is more complicated than addition -- there\u2019s no magic, it just takes a lot more logic gates \u2013 which is why less expensive processors don\u2019t have this feature. Ok, let\u2019s move on to the other half of the ALU: the Logic Unit. Instead of arithmetic operations, the Logic Unit performs\u2026 well... logical operations, like AND, OR and NOT, which we\u2019ve talked about previously. It also performs simple numerical tests, like checking if a number is negative. For example, here\u2019s a circuit that tests if the output of the ALU is zero. It does this using a bunch of OR gates to see if any of the bits are 1. Even if one single bit is 1, we know the number can\u2019t be zero and then we use a final NOT gate to flip this input so the output is 1 only if the input number is 0. So that\u2019s a high level overview of what makes up an ALU. We even built several of the main components from scratch, like our ripple adder. As you saw, it\u2019s just a big bunch of logic gates connected in clever ways. Which brings us back to that ALU you admired so much at the beginning of the episode. The Intel 74181. Unlike the 8-bit ALU we made today, the 74181 could only handle 4-bit inputs, which means YOU BUILT AN ALU THAT\u2019S LIKE TWICE AS GOOD AS THAT SUPER FAMOUS ONE. WITH YOUR MIND! Well.. sort of. We didn\u2019t build the whole thing\u2026 but you get the idea. The 74181 used about 70 logic gates, and it couldn\u2019t multiply or divide. But it was a huge step forward in miniaturization, opening the doors to more capable and less expensive computers. This 4-bit ALU circuit is already a lot to take in, but our 8-bit ALU would require hundreds of logic gates to fully build and engineers don\u2019t want to see all that complexity when using an ALU, so they came up with a special symbol to wrap it all up, which looks like a big \u2018V\u2019. Just another level of abstraction! Our 8-bit ALU has two inputs, A and B, each with 8 bits. We also need a way to specify what operation the ALU should perform, for example, addition or subtraction. For that, we use a 4-bit operation code. We\u2019ll talk about this more in a later episode, but in brief, 1000 might be the command to add, while 1100 is the command for subtract. Basically, the operation code tells the ALU what operation to perform. And the result of that operation on inputs A and B is an 8-bit output. ALUs also output a series of Flags, which are 1-bit outputs for particular states and statuses. For example, if we subtract two numbers, and the result is 0, our zero-testing circuit, the one we made earlier, sets the Zero Flag to True (1). This is useful if we are trying to determine if two numbers are are equal. If we wanted to test if A was less than B, we can use the ALU to calculate A subtract B and look to see if the Negative Flag was set to true. If it was, we know that A was smaller than B. And finally, there\u2019s also a wire attached to the carry out on the adder we built, so if there is an overflow, we\u2019ll know about it. This is called the Overflow Flag. Fancier ALUs will have more flags, but these three flags are universal and frequently used. In fact, we\u2019ll be using them soon in a future episode. So now you know how your computer does all its basic mathematical operations digitally with no gears or levers required. We\u2019re going to use this ALU when we construct our CPU two episodes from now. But before that, our computer is going to need some memory! We'll talk about that next week.\n\n\n                           Reading Material: A computer is a machine that can be programmed to carry out sequences of arithmetic or logical operations (computation) automatically. Modern digital electronic computers can perform generic sets of operations known as programs. These programs enable computers to perform a wide range of tasks. The term computer system may refer to a nominally complete computer that includes the hardware, operating system, software, and peripheral equipment needed and used for full operation; or to a group of computers that are linked and function together, such as a computer network or computer cluster.\nA broad range of industrial and consumer products use computers as control systems. Simple special-purpose devices like microwave ovens and remote controls are included, as are factory devices like industrial robots and computer-aided design, as well as general-purpose devices such as personal computers and mobile devices such as smartphones. Computers power the Internet, which links billions of computers and users.\nEarly computers were meant to be used only for calculations. Simple manual instruments like the abacus have aided people in doing calculations since ancient times. Early in the Industrial Revolution, some mechanical devices were built to automate long, tedious tasks, such as guiding patterns for looms. More sophisticated electrical machines did specialized analog calculations in the early 20th century. The first digital electronic calculating machines were developed during World War II, both electromechanical and using thermionic valves. The first semiconductor transistors in the late 1940s were followed by the silicon-based MOSFET (MOS transistor) and monolithic integrated circuit chip technologies in the late 1950s, leading to the microprocessor and the microcomputer revolution in the 1970s. The speed, power and versatility of computers have been increasing dramatically ever since then, with transistor counts increasing at a rapid pace (Moore's law noted that counts doubled every two years), leading to the Digital Revolution during the late 20th to early 21st centuries.\nConventionally, a modern computer consists of at least one processing element, typically a central processing unit (CPU) in the form of a microprocessor, together with some type of computer memory, typically semiconductor memory chips. The processing element carries out arithmetic and logical operations, and a sequencing and control unit can change the order of operations in response to stored information. Peripheral devices include input devices (keyboards, mice, joystick, etc.), output devices (monitor screens, printers, etc.), and input/output devices that perform both functions (e.g., the 2000s-era touchscreen). Peripheral devices allow information to be retrieved from an external source and they enable the result of operations to be saved and retrieved.\n\n\n== Etymology ==\nAccording to the Oxford English Dictionary, the first known use of computer was in a 1613 book called The Yong Mans Gleanings by the English writer Richard Brathwait: \"I haue  [sic] read the truest computer of Times, and the best Arithmetician that euer  [sic] breathed, and he reduceth thy dayes into a short number.\" This usage of the term referred to a human computer, a person who carried out calculations or computations. The word continued with the same meaning until the middle of the 20th century. During the latter part of this period women were often hired as computers because they could be paid less than their male counterparts. By 1943, most human computers were women.The Online Etymology Dictionary gives the first attested use of computer in the 1640s, meaning 'one who calculates'; this is an \"agent noun from compute (v.)\". The Online Etymology Dictionary states that the use of the term to mean \"'calculating machine' (of any type) is from 1897.\" The Online Etymology Dictionary indicates that the \"modern use\" of the term, to mean 'programmable digital electronic computer' dates from \"1945 under this name; [in a] theoretical [sense] from 1937, as Turing machine\".\n\n\n== History ==\n\n\n=== Pre-20th century ===\nDevices have been used to aid computation for thousands of years, mostly using one-to-one correspondence with fingers. The earliest counting device was most likely a form of tally stick. Later record keeping aids throughout the Fertile Crescent included calculi (clay spheres, cones, etc.) which represented counts of items, likely livestock or grains, sealed in hollow unbaked clay containers. The use of counting rods is one example.\n\nThe abacus was initially used for arithmetic tasks. The Roman abacus was developed from devices used in Babylonia as early as 2400 BCE. Since then, many other forms of reckoning boards or tables have been invented. In a medieval European counting house, a checkered cloth would be placed on a table, and markers moved around on it according to certain rules, as an aid to calculating sums of money.\nThe Antikythera mechanism is believed to be the earliest known mechanical analog computer, according to Derek J. de Solla Price. It was designed to calculate astronomical positions. It was discovered in 1901 in the Antikythera wreck off the Greek island of Antikythera, between Kythera and Crete, and has been dated to approximately c.\u2009100 BCE. Devices of comparable complexity to the Antikythera mechanism would not reappear until the fourteenth century.Many mechanical aids to calculation and measurement were constructed for astronomical and navigation use. The planisphere was a star chart invented by Ab\u016b Rayh\u0101n al-B\u012br\u016bn\u012b in the early 11th century. The astrolabe was invented in the Hellenistic world in either the 1st or 2nd centuries BCE and is often attributed to Hipparchus. A combination of the planisphere and dioptra, the astrolabe was effectively an analog computer capable of working out several different kinds of problems in spherical astronomy. An astrolabe incorporating a mechanical calendar computer and gear-wheels was invented by Abi Bakr of Isfahan, Persia in 1235. Ab\u016b Rayh\u0101n al-B\u012br\u016bn\u012b invented the first mechanical geared lunisolar calendar astrolabe, an early fixed-wired knowledge processing machine with a gear train and gear-wheels, c.\u20091000 AD.\nThe sector, a calculating instrument used for solving problems in proportion, trigonometry, multiplication and division, and for various functions, such as squares and cube roots, was developed in the late 16th century and found application in gunnery, surveying and navigation.\nThe planimeter was a manual instrument to calculate the area of a closed figure by tracing over it with a mechanical linkage.\n\nThe slide rule was invented around 1620\u20131630 by the English clergyman William Oughtred, shortly after the publication of the concept of the logarithm. It is a hand-operated analog computer for doing multiplication and division. As slide rule development progressed, added scales provided reciprocals, squares and square roots, cubes and cube roots, as well as transcendental functions such as logarithms and exponentials, circular and hyperbolic trigonometry and other functions. Slide rules with special scales are still used for quick performance of routine calculations, such as the E6B circular slide rule used for time and distance calculations on light aircraft.\nIn the 1770s, Pierre Jaquet-Droz, a Swiss watchmaker, built a mechanical doll (automaton) that could write holding a quill pen. By switching the number and order of its internal wheels different letters, and hence different messages, could be produced. In effect, it could be mechanically \"programmed\" to read instructions. Along with two other complex machines, the doll is at the Mus\u00e9e d'Art et d'Histoire of Neuch\u00e2tel, Switzerland, and still operates.In 1831\u20131835, mathematician and engineer Giovanni Plana devised a Perpetual Calendar machine, which, through a system of pulleys and cylinders and over, could predict the perpetual calendar for every year from 0 CE (that is, 1 BCE) to 4000 CE, keeping track of leap years and varying day length. The tide-predicting machine invented by the Scottish scientist Sir William Thomson in 1872 was of great utility to navigation in shallow waters. It used a system of pulleys and wires to automatically calculate predicted tide levels for a set period at a particular location.\nThe differential analyser, a mechanical analog computer designed to solve differential equations by integration, used wheel-and-disc mechanisms to perform the integration. In 1876, Sir William Thomson had already discussed the possible construction of such calculators, but he had been stymied by the limited output torque of the ball-and-disk integrators. In a differential analyzer, the output of one integrator drove the input of the next integrator, or a graphing output. The torque amplifier was the advance that allowed these machines to work. Starting in the 1920s, Vannevar Bush and others developed mechanical differential analyzers.\nIn the 1890s, the Spanish engineer Leonardo Torres Quevedo began to develop a series of advanced analog machines that could solve real and complex roots of polynomials, which were published in 1901 by the Paris Academy of Sciences.\n\n\n=== First computer ===\n\nCharles Babbage, an English mechanical engineer and polymath, originated the concept of a programmable computer. Considered the \"father of the computer\", he conceptualized and invented the first mechanical computer in the early 19th century. \nAfter working on his difference engine he announced his invention in 1822, in a paper to the Royal Astronomical Society, titled \"Note on the application of machinery to the computation of astronomical and mathematical tables\", he also designed to aid in navigational calculations, in 1833 he realized that a much more general design, an analytical engine, was possible. The input of programs and data was to be provided to the machine via punched cards, a method being used at the time to direct mechanical looms such as the Jacquard loom. For output, the machine would have a printer, a curve plotter and a bell. The machine would also be able to punch numbers onto cards to be read in later. The Engine incorporated an arithmetic logic unit, control flow in the form of conditional branching and loops, and integrated memory, making it the first design for a general-purpose computer that could be described in modern terms as Turing-complete.The machine was about a century ahead of its time. All the parts for his machine had to be made by hand \u2013 this was a major problem for a device with thousands of parts. Eventually, the project was dissolved with the decision of the British Government to cease funding. Babbage's failure to complete the analytical engine can be chiefly attributed to political and financial difficulties as well as his desire to develop an increasingly sophisticated computer and to move ahead faster than anyone else could follow. Nevertheless, his son, Henry Babbage, completed a simplified version of the analytical engine's computing unit (the mill) in 1888. He gave a successful demonstration of its use in computing tables in 1906.\n\n\n=== Electromechanical calculating machine ===\nIn his work Essays on Automatics published in 1914, Leonardo Torres Quevedo wrote a brief history of Babbage's efforts at constructing a mechanical Difference Engine and Analytical Engine. He described the Analytical Engine as exemplifying his theories about the potential power of machines, and takes the problem of designing such an engine as a challenge to his skills as an inventor of electromechanical devices. The paper contains a design of a machine capable of calculating completely automatically the value of the formula \n  \n    \n      \n        \n          a\n          \n            x\n          \n        \n        (\n        y\n        \u2212\n        z\n        \n          )\n          \n            2\n          \n        \n      \n    \n    {\\displaystyle a^{x}(y-z)^{2}}\n  , for a sequence of sets of values of the variables involved. The whole machine was to be controlled by a read-only program, which was complete with provisions for conditional branching. He also introduced the idea of floating-point arithmetic. In 1920, to celebrate the 100th anniversary of the invention of the arithmometer, Torres presented in Paris the Electromechanical Arithmometer, which consisted of an arithmetic unit connected to a (possibly remote) typewriter, on which commands could be typed and the results printed automatically, demonstrating the feasibility of an electromechanical analytical engine.\n\n\n=== Analog computers ===\n\nDuring the first half of the 20th century, many scientific computing needs were met by increasingly sophisticated analog computers, which used a direct mechanical or electrical model of the problem as a basis for computation. However, these were not programmable and generally lacked the versatility and accuracy of modern digital computers. The first modern analog computer was a tide-predicting machine, invented by Sir William Thomson (later to become Lord Kelvin) in 1872. The differential analyser, a mechanical analog computer designed to solve differential equations by integration using wheel-and-disc mechanisms, was conceptualized in 1876 by James Thomson, the elder brother of the more famous Sir William Thomson.The art of mechanical analog computing reached its zenith with the differential analyzer, built by H. L. Hazen and Vannevar Bush at MIT starting in 1927. This built on the mechanical integrators of James Thomson and the torque amplifiers invented by H. W. Nieman. A dozen of these devices were built before their obsolescence became obvious. By the 1950s, the success of digital electronic computers had spelled the end for most analog computing machines, but analog computers remained in use during the 1950s in some specialized applications such as education (slide rule) and aircraft (control systems).\n\n\n=== Digital computers ===\n\n\n==== Electromechanical ====\nBy 1938, the United States Navy had developed an electromechanical analog computer small enough to use aboard a submarine. This was the Torpedo Data Computer, which used trigonometry to solve the problem of firing a torpedo at a moving target. During World War II similar devices were developed in other countries as well.\n\nEarly digital computers were electromechanical; electric switches drove mechanical relays to perform the calculation. These devices had a low operating speed and were eventually superseded by much faster all-electric computers, originally using vacuum tubes. The Z2, created by German engineer Konrad Zuse in 1939 in Berlin, was one of the earliest examples of an electromechanical relay computer.\nIn 1941, Zuse followed his earlier machine up with the Z3, the world's first working electromechanical programmable, fully automatic digital computer. The Z3 was built with 2000 relays, implementing a 22 bit word length that operated at a clock frequency of about 5\u201310 Hz. Program code was supplied on punched film while data could be stored in 64 words of memory or supplied from the keyboard. It was quite similar to modern machines in some respects, pioneering numerous advances such as floating-point numbers. Rather than the harder-to-implement decimal system (used in Charles Babbage's earlier design), using a binary system meant that Zuse's machines were easier to build and potentially more reliable, given the technologies available at that time. The Z3 was not itself a universal computer but could be extended to be Turing complete.Zuse's next computer, the Z4, became the world's first commercial computer; after initial delay due to the Second World War, it was completed in 1950 and delivered to the ETH Zurich. The computer was manufactured by Zuse's own company, Zuse KG, which was founded in 1941 as the first company with the sole purpose of developing computers in Berlin.\n\n\n==== Vacuum tubes and digital electronic circuits ====\n\nPurely electronic circuit elements soon replaced their mechanical and electromechanical equivalents, at the same time that digital calculation replaced analog. The engineer Tommy Flowers, working at the Post Office Research Station in London in the 1930s, began to explore the possible use of electronics for the telephone exchange. Experimental equipment that he built in 1934 went into operation five years later, converting a portion of the telephone exchange network into an electronic data processing system, using thousands of vacuum tubes. In the US, John Vincent Atanasoff and Clifford E. Berry of Iowa State University developed and tested the Atanasoff\u2013Berry Computer (ABC) in 1942, the first \"automatic electronic digital computer\". This design was also all-electronic and used about 300 vacuum tubes, with capacitors fixed in a mechanically rotating drum for memory.\nDuring World War II, the British code-breakers at Bletchley Park achieved a number of successes at breaking encrypted German military communications. The German encryption machine, Enigma, was first attacked with the help of the electro-mechanical bombes which were often run by women. To crack the more sophisticated German Lorenz SZ 40/42 machine, used for high-level Army communications, Max Newman and his colleagues commissioned Flowers to build the Colossus. He spent eleven months from early February 1943 designing and building the first Colossus. After a functional test in December 1943, Colossus was shipped to Bletchley Park, where it was delivered on 18 January 1944 and attacked its first message on 5 February.Colossus was the world's first electronic digital programmable computer. It used a large number of valves (vacuum tubes). It had paper-tape input and was capable of being configured to perform a variety of boolean logical operations on its data, but it was not Turing-complete. Nine Mk II Colossi were built (The Mk I was converted to a Mk II making ten machines in total). Colossus Mark I contained 1,500 thermionic valves (tubes), but Mark II with 2,400 valves, was both five times faster and simpler to operate than Mark I, greatly speeding the decoding process.\nThe ENIAC (Electronic Numerical Integrator and Computer) was the first electronic programmable computer built in the U.S. Although the ENIAC was similar to the Colossus, it was much faster, more flexible, and it was Turing-complete. Like the Colossus, a \"program\" on the ENIAC was defined by the states of its patch cables and switches, a far cry from the stored program electronic machines that came later. Once a program was written, it had to be mechanically set into the machine with manual resetting of plugs and switches. The programmers of the ENIAC were six women, often known collectively as the \"ENIAC girls\".It combined the high speed of electronics with the ability to be programmed for many complex problems. It could add or subtract 5000 times a second, a thousand times faster than any other machine. It also had modules to multiply, divide, and square root. High speed memory was limited to 20 words (about 80 bytes). Built under the direction of John Mauchly and J. Presper Eckert at the University of Pennsylvania, ENIAC's development and construction lasted from 1943 to full operation at the end of 1945. The machine was huge, weighing 30 tons, using 200 kilowatts of electric power and contained over 18,000 vacuum tubes, 1,500 relays, and hundreds of thousands of resistors, capacitors, and inductors.\n\n\n=== Modern computers ===\n\n\n==== Concept of modern computer ====\nThe principle of the modern computer was proposed by Alan Turing in his seminal 1936 paper, On Computable Numbers. Turing proposed a simple device that he called \"Universal Computing machine\" and that is now known as a universal Turing machine. He proved that such a machine is capable of computing anything that is computable by executing instructions (program) stored on tape, allowing the machine to be programmable. The fundamental concept of Turing's design is the stored program, where all the instructions for computing are stored in memory. Von Neumann acknowledged that the central concept of the modern computer was due to this paper. Turing machines are to this day a central object of study in theory of computation. Except for the limitations imposed by their finite memory stores, modern computers are said to be Turing-complete, which is to say, they have algorithm execution capability equivalent to a universal Turing machine.\n\n\n==== Stored programs ====\n\nEarly computing machines had fixed programs. Changing its function required the re-wiring and re-structuring of the machine. With the proposal of the stored-program computer this changed. A stored-program computer includes by design an instruction set and can store in memory a set of instructions (a program) that details the computation. The theoretical basis for the stored-program computer was laid out by Alan Turing in his 1936 paper. In 1945, Turing joined the National Physical Laboratory and began work on developing an electronic stored-program digital computer. His 1945 report \"Proposed Electronic Calculator\" was the first specification for such a device. John von Neumann at the University of Pennsylvania also circulated his First Draft of a Report on the EDVAC in 1945.The Manchester Baby was the world's first stored-program computer. It was built at the University of Manchester in England by Frederic C. Williams, Tom Kilburn and Geoff Tootill, and ran its first program on 21 June 1948. It was designed as a testbed for the Williams tube, the first random-access digital storage device. Although the computer was described as \"small and primitive\" by a 1998 retrospective, it was the first working machine to contain all of the elements essential to a modern electronic computer. As soon as the Baby had demonstrated the feasibility of its design, a project began at the university to develop it into a practically useful computer, the Manchester Mark 1.\nThe Mark 1 in turn quickly became the prototype for the Ferranti Mark 1, the world's first commercially available general-purpose computer. Built by Ferranti, it was delivered to the University of Manchester in February 1951. At least seven of these later machines were delivered between 1953 and 1957, one of them to Shell labs in Amsterdam. In October 1947 the directors of British catering company J. Lyons & Company decided to take an active role in promoting the commercial development of computers. Lyons's LEO I computer, modelled closely on the Cambridge EDSAC of 1949, became operational in April 1951 and ran the world's first routine office computer job.\nGrace Hopper was the first to develop a compiler for a programming language.\n\n\n==== Transistors ====\n\nThe concept of a field-effect transistor was proposed by Julius Edgar Lilienfeld in 1925. John Bardeen and Walter Brattain, while working under William Shockley at Bell Labs, built the first working transistor, the point-contact transistor, in 1947, which was followed by Shockley's bipolar junction transistor in 1948. From 1955 onwards, transistors replaced vacuum tubes in computer designs, giving rise to the \"second generation\" of computers. Compared to vacuum tubes, transistors have many advantages: they are smaller, and require less power than vacuum tubes, so give off less heat. Junction transistors were much more reliable than vacuum tubes and had longer, indefinite, service life. Transistorized computers could contain tens of thousands of binary logic circuits in a relatively compact space. However, early junction transistors were relatively bulky devices that were difficult to manufacture on a mass-production basis, which limited them to a number of specialized applications.At the University of Manchester, a team under the leadership of Tom Kilburn designed and built a machine using the newly developed transistors instead of valves. Their first transistorized computer and the first in the world, was operational by 1953, and a second version was completed there in April 1955. However, the machine did make use of valves to generate its 125 kHz clock waveforms and in the circuitry to read and write on its magnetic drum memory, so it was not the first completely transistorized computer. That distinction goes to the Harwell CADET of 1955, built by the electronics division of the Atomic Energy Research Establishment at Harwell.\nThe metal\u2013oxide\u2013silicon field-effect transistor (MOSFET), also known as the MOS transistor, was invented by Mohamed M. Atalla and Dawon Kahng at Bell Labs in 1959. It was the first truly compact transistor that could be miniaturized and mass-produced for a wide range of uses. With its high scalability, and much lower power consumption and higher density than bipolar junction transistors, the MOSFET made it possible to build high-density integrated circuits. In addition to data processing, it also enabled the practical use of MOS transistors as memory cell storage elements, leading to the development of MOS semiconductor memory, which replaced earlier magnetic-core memory in computers. The MOSFET led to the microcomputer revolution, and became the driving force behind the computer revolution. The MOSFET is the most widely used transistor in computers, and is the fundamental building block of digital electronics.\n\n\n==== Integrated circuits ====\n\nThe next great advance in computing power came with the advent of the integrated circuit (IC).\nThe idea of the integrated circuit was first conceived by a radar scientist working for the Royal Radar Establishment of the Ministry of Defence, Geoffrey W.A. Dummer. Dummer presented the first public description of an integrated circuit at the Symposium on Progress in Quality Electronic Components in Washington, D.C., on 7 May 1952.The first working ICs were invented by Jack Kilby at Texas Instruments and Robert Noyce at Fairchild Semiconductor. Kilby recorded his initial ideas concerning the integrated circuit in July 1958, successfully demonstrating the first working integrated example on 12 September 1958. In his patent application of 6 February 1959, Kilby described his new device as \"a body of semiconductor material ... wherein all the components of the electronic circuit are completely integrated\". However, Kilby's invention was a hybrid integrated circuit (hybrid IC), rather than a monolithic integrated circuit (IC) chip. Kilby's IC had external wire connections, which made it difficult to mass-produce.Noyce also came up with his own idea of an integrated circuit half a year later than Kilby. Noyce's invention was the first true monolithic IC chip. His chip solved many practical problems that Kilby's had not. Produced at Fairchild Semiconductor, it was made of silicon, whereas Kilby's chip was made of germanium. Noyce's monolithic IC was fabricated using the planar process, developed by his colleague Jean Hoerni in early 1959. In turn, the planar process was based on Mohamed M. Atalla's work on semiconductor surface passivation by silicon dioxide in the late 1950s.Modern monolithic ICs are predominantly MOS (metal\u2013oxide\u2013semiconductor) integrated circuits, built from MOSFETs (MOS transistors). The earliest experimental MOS IC to be fabricated was a 16-transistor chip built by Fred Heiman and Steven Hofstein at RCA in 1962. General Microelectronics later introduced the first commercial MOS IC in 1964, developed by Robert Norman. Following the development of the self-aligned gate (silicon-gate) MOS transistor by Robert Kerwin, Donald Klein and John Sarace at Bell Labs in 1967, the first silicon-gate MOS IC with self-aligned gates was developed by Federico Faggin at Fairchild Semiconductor in 1968. The MOSFET has since become the most critical device component in modern ICs.\nThe development of the MOS integrated circuit led to the invention of the microprocessor, and heralded an explosion in the commercial and personal use of computers. While the subject of exactly which device was the first microprocessor is contentious, partly due to lack of agreement on the exact definition of the term \"microprocessor\", it is largely undisputed that the first single-chip microprocessor was the Intel 4004, designed and realized by Federico Faggin with his silicon-gate MOS IC technology, along with Ted Hoff, Masatoshi Shima and Stanley Mazor at Intel. In the early 1970s, MOS IC technology enabled the integration of more than 10,000 transistors on a single chip.System on a Chip (SoCs) are complete computers on a microchip (or chip) the size of a coin. They may or may not have integrated RAM and flash memory. If not integrated, the RAM is usually placed directly above (known as Package on package) or below (on the opposite side of the circuit board) the SoC, and the flash memory is usually placed right next to the SoC, this all done to improve data transfer speeds, as the data signals do not have to travel long distances. Since ENIAC in 1945, computers have advanced enormously, with modern SoCs (Such as the Snapdragon 865) being the size of a coin while also being hundreds of thousands of times more powerful than ENIAC, integrating billions of transistors, and consuming only a few watts of power.\n\n\n=== Mobile computers ===\nThe first mobile computers were heavy and ran from mains power. The 50 lb (23 kg) IBM 5100 was an early example. Later portables such as the Osborne 1 and Compaq Portable were considerably lighter but still needed to be plugged in. The first laptops, such as the Grid Compass, removed this requirement by incorporating batteries \u2013 and with the continued miniaturization of computing resources and advancements in portable battery life, portable computers grew in popularity in the 2000s. The same developments allowed manufacturers to integrate computing resources into cellular mobile phones by the early 2000s.\nThese smartphones and tablets run on a variety of operating systems and recently became the dominant computing device on the market. These are powered by System on a Chip (SoCs), which are complete computers on a microchip the size of a coin.\n\n\n== Types ==\n\nComputers can be classified in a number of different ways, including:\n\n\n=== By architecture ===\nAnalog computer\nDigital computer\nHybrid computer\nHarvard architecture\nVon Neumann architecture\nComplex instruction set computer\nReduced instruction set computer\n\n\n=== By size, form-factor and purpose ===\nSupercomputer\nMainframe computer\nMinicomputer (term no longer used), Midrange computer\nServer\nRackmount server\nBlade server\nTower server\nPersonal computer\nWorkstation\nMicrocomputer (term no longer used)Home computer (term fallen into disuse)\nDesktop computer\nTower desktop\nSlimline desktop\nMultimedia computer (non-linear editing system computers, video editing PCs and the like, this term is no longer used)\nGaming computer\nAll-in-one PC\nNettop (Small form factor PCs, Mini PCs)\nHome theater PC\nKeyboard computer\nPortable computer\nThin client\nInternet appliance\nLaptop\nDesktop replacement computer\nGaming laptop\nRugged laptop\n2-in-1 PC\nUltrabook\nChromebook\nSubnotebook\nSmartbook\nNetbook\nMobile computers:\nTablet computer\nSmartphone\nUltra-mobile PC\nPocket PC\nPalmtop PC\nHandheld PC\nWearable computer\nSmartwatch\nSmartglasses\nSingle-board computer\nPlug computer\nStick PC\nProgrammable logic controller\nComputer-on-module\nSystem on module\nSystem in a package\nSystem-on-chip (Also known as an Application Processor or AP if it lacks circuitry such as radio circuitry)\nMicrocontroller\n\n\n== Hardware ==\nThe term hardware covers all of those parts of a computer that are tangible physical objects. Circuits, computer chips, graphic cards, sound cards, memory (RAM), motherboard, displays, power supplies, cables, keyboards, printers and \"mice\" input devices are all hardware.\n\n\n=== History of computing hardware ===\n\n\n=== Other hardware topics ===\nA general-purpose computer has four main components: the arithmetic logic unit (ALU), the control unit, the memory, and the input and output devices (collectively termed I/O). These parts are interconnected by buses, often made of groups of wires. Inside each of these parts are thousands to trillions of small electrical circuits which can be turned off or on by means of an electronic switch. Each circuit represents a bit (binary digit) of information so that when the circuit is on it represents a \"1\", and when off it represents a \"0\" (in positive logic representation). The circuits are arranged in logic gates so that one or more of the circuits may control the state of one or more of the other circuits.\n\n\n=== Input devices ===\nWhen unprocessed data is sent to the computer with the help of input devices, the data is processed and sent to output devices. The input devices may be hand-operated or automated. The act of processing is mainly regulated by the CPU. Some examples of input devices are:\n\nComputer keyboard\nDigital camera\nDigital video\nGraphics tablet\nImage scanner\nJoystick\nMicrophone\nMouse\nOverlay keyboard\nReal-time clock\nTrackball\nTouchscreen\nLight pen\n\n\n=== Output devices ===\nThe means through which computer gives output are known as output devices. Some examples of output devices are:\n\nComputer monitor\nPrinter\nPC speaker\nProjector\nSound card\nVideo card\n\n\n=== Control unit ===\n\nThe control unit (often called a control system or central controller) manages the computer's various components; it reads and interprets (decodes) the program instructions, transforming them into control signals that activate other parts of the computer. Control systems in advanced computers may change the order of execution of some instructions to improve performance.\nA key component common to all CPUs is the program counter, a special memory cell (a register) that keeps track of which location in memory the next instruction is to be read from.The control system's function is as follows\u2014 this is a simplified description, and some of these steps may be performed concurrently or in a different order depending on the type of CPU:\n\nRead the code for the next instruction from the cell indicated by the program counter.\nDecode the numerical code for the instruction into a set of commands or signals for each of the other systems.\nIncrement the program counter so it points to the next instruction.\nRead whatever data the instruction requires from cells in memory (or perhaps from an input device). The location of this required data is typically stored within the instruction code.\nProvide the necessary data to an ALU or register.\nIf the instruction requires an ALU or specialized hardware to complete, instruct the hardware to perform the requested operation.\nWrite the result from the ALU back to a memory location or to a register or perhaps an output device.\nJump back to step (1).Since the program counter is (conceptually) just another set of memory cells, it can be changed by calculations done in the ALU. Adding 100 to the program counter would cause the next instruction to be read from a place 100 locations further down the program. Instructions that modify the program counter are often known as \"jumps\" and allow for loops (instructions that are repeated by the computer) and often conditional instruction execution (both examples of control flow).\nThe sequence of operations that the control unit goes through to process an instruction is in itself like a short computer program, and indeed, in some more complex CPU designs, there is another yet smaller computer called a microsequencer, which runs a microcode program that causes all of these events to happen.\n\n\n=== Central processing unit (CPU) ===\n\nThe control unit, ALU, and registers are collectively known as a central processing unit (CPU). Early CPUs were composed of many separate components. Since the 1970s, CPUs have typically been constructed on a single MOS integrated circuit chip called a microprocessor.\n\n\n=== Arithmetic logic unit (ALU) ===\n\nThe ALU is capable of performing two classes of operations: arithmetic and logic. The set of arithmetic operations that a particular ALU supports may be limited to addition and subtraction, or might include multiplication, division, trigonometry functions such as sine, cosine, etc., and square roots. Some can operate only on whole numbers (integers) while others use floating point to represent real numbers, albeit with limited precision. However, any computer that is capable of performing just the simplest operations can be programmed to break down the more complex operations into simple steps that it can perform. Therefore, any computer can be programmed to perform any arithmetic operation\u2014although it will take more time to do so if its ALU does not directly support the operation. An ALU may also compare numbers and return Boolean truth values (true or false) depending on whether one is equal to, greater than or less than the other (\"is 64 greater than 65?\"). Logic operations involve Boolean logic: AND, OR, XOR, and NOT. These can be useful for creating complicated conditional statements and processing Boolean logic.\nSuperscalar computers may contain multiple ALUs, allowing them to process several instructions simultaneously. Graphics processors and computers with SIMD and MIMD features often contain ALUs that can perform arithmetic on vectors and matrices.\n\n\n=== Memory ===\n\nA computer's memory can be viewed as a list of cells into which numbers can be placed or read. Each cell has a numbered \"address\" and can store a single number. The computer can be instructed to \"put the number 123 into the cell numbered 1357\" or to \"add the number that is in cell 1357 to the number that is in cell 2468 and put the answer into cell 1595.\" The information stored in memory may represent practically anything. Letters, numbers, even computer instructions can be placed into memory with equal ease. Since the CPU does not differentiate between different types of information, it is the software's responsibility to give significance to what the memory sees as nothing but a series of numbers.\nIn almost all modern computers, each memory cell is set up to store binary numbers in groups of eight bits (called a byte). Each byte is able to represent 256 different numbers (28 = 256); either from 0 to 255 or \u2212128 to +127. To store larger numbers, several consecutive bytes may be used (typically, two, four or eight). When negative numbers are required, they are usually stored in two's complement notation. Other arrangements are possible, but are usually not seen outside of specialized applications or historical contexts. A computer can store any kind of information in memory if it can be represented numerically. Modern computers have billions or even trillions of bytes of memory.\nThe CPU contains a special set of memory cells called registers that can be read and written to much more rapidly than the main memory area. There are typically between two and one hundred registers depending on the type of CPU. Registers are used for the most frequently needed data items to avoid having to access main memory every time data is needed. As data is constantly being worked on, reducing the need to access main memory (which is often slow compared to the ALU and control units) greatly increases the computer's speed.\nComputer main memory comes in two principal varieties:\n\nrandom-access memory or RAM\nread-only memory or ROMRAM can be read and written to anytime the CPU commands it, but ROM is preloaded with data and software that never changes, therefore the CPU can only read from it. ROM is typically used to store the computer's initial start-up instructions. In general, the contents of RAM are erased when the power to the computer is turned off, but ROM retains its data indefinitely. In a PC, the ROM contains a specialized program called the BIOS that orchestrates loading the computer's operating system from the hard disk drive into RAM whenever the computer is turned on or reset. In embedded computers, which frequently do not have disk drives, all of the required software may be stored in ROM. Software stored in ROM is often called firmware, because it is notionally more like hardware than software. Flash memory blurs the distinction between ROM and RAM, as it retains its data when turned off but is also rewritable. It is typically much slower than conventional ROM and RAM however, so its use is restricted to applications where high speed is unnecessary.In more sophisticated computers there may be one or more RAM cache memories, which are slower than registers but faster than main memory. Generally computers with this sort of cache are designed to move frequently needed data into the cache automatically, often without the need for any intervention on the programmer's part.\n\n\n=== Input/output (I/O) ===\n\nI/O is the means by which a computer exchanges information with the outside world. Devices that provide input or output to the computer are called peripherals. On a typical personal computer, peripherals include input devices like the keyboard and mouse, and output devices such as the display and printer. Hard disk drives, floppy disk drives and optical disc drives serve as both input and output devices. Computer networking is another form of I/O.\nI/O devices are often complex computers in their own right, with their own CPU and memory. A graphics processing unit might contain fifty or more tiny computers that perform the calculations necessary to display 3D graphics. Modern desktop computers contain many smaller computers that assist the main CPU in performing I/O. A 2016-era flat screen display contains its own computer circuitry.\n\n\n=== Multitasking ===\n\nWhile a computer may be viewed as running one gigantic program stored in its main memory, in some systems it is necessary to give the appearance of running several programs simultaneously. This is achieved by multitasking i.e. having the computer switch rapidly between running each program in turn. One means by which this is done is with a special signal called an interrupt, which can periodically cause the computer to stop executing instructions where it was and do something else instead. By remembering where it was executing prior to the interrupt, the computer can return to that task later. If several programs are running \"at the same time\". then the interrupt generator might be causing several hundred interrupts per second, causing a program switch each time. Since modern computers typically execute instructions several orders of magnitude faster than human perception, it may appear that many programs are running at the same time even though only one is ever executing in any given instant. This method of multitasking is sometimes termed \"time-sharing\" since each program is allocated a \"slice\" of time in turn.Before the era of inexpensive computers, the principal use for multitasking was to allow many people to share the same computer. Seemingly, multitasking would cause a computer that is switching between several programs to run more slowly, in direct proportion to the number of programs it is running, but most programs spend much of their time waiting for slow input/output devices to complete their tasks. If a program is waiting for the user to click on the mouse or press a key on the keyboard, then it will not take a \"time slice\" until the event it is waiting for has occurred. This frees up time for other programs to execute so that many programs may be run simultaneously without unacceptable speed loss.\n\n\n=== Multiprocessing ===\n\nSome computers are designed to distribute their work across several CPUs in a multiprocessing configuration, a technique once employed in only large and powerful machines such as supercomputers, mainframe computers and servers. Multiprocessor and multi-core (multiple CPUs on a single integrated circuit) personal and laptop computers are now widely available, and are being increasingly used in lower-end markets as a result.\nSupercomputers in particular often have highly unique architectures that differ significantly from the basic stored-program architecture and from general-purpose computers. They often feature thousands of CPUs, customized high-speed interconnects, and specialized computing hardware. Such designs tend to be useful for only specialized tasks due to the large scale of program organization required to use most of the available resources at once. Supercomputers usually see usage in large-scale simulation, graphics rendering, and cryptography applications, as well as with other so-called \"embarrassingly parallel\" tasks.\n\n\n== Software ==\n\nSoftware refers to parts of the computer which do not have a material form, such as programs, data, protocols, etc. Software is that part of a computer system that consists of encoded information or computer instructions, in contrast to the physical hardware from which the system is built. Computer software includes computer programs, libraries and related non-executable data, such as online documentation or digital media. It is often divided into system software and application software. Computer hardware and software require each other and neither can be realistically used on its own. When software is stored in hardware that cannot easily be modified, such as with BIOS ROM in an IBM PC compatible computer, it is sometimes called \"firmware\".\n\n\n=== Languages ===\nThere are thousands of different programming languages\u2014some intended for general purpose, others useful for only highly specialized applications.\n\n\n=== Programs ===\nThe defining feature of modern computers which distinguishes them from all other machines is that they can be programmed. That is to say that some type of instructions (the program) can be given to the computer, and it will process them. Modern computers based on the von Neumann architecture often have machine code in the form of an imperative programming language. In practical terms, a computer program may be just a few instructions or extend to many millions of instructions, as do the programs for word processors and web browsers for example. A typical modern computer can execute billions of instructions per second (gigaflops) and rarely makes a mistake over many years of operation. Large computer programs consisting of several million instructions may take teams of programmers years to write, and due to the complexity of the task almost certainly contain errors.\n\n\n==== Stored program architecture ====\n\nThis section applies to most common RAM machine\u2013based computers.\nIn most cases, computer instructions are simple: add one number to another, move some data from one location to another, send a message to some external device, etc. These instructions are read from the computer's memory and are generally carried out (executed) in the order they were given. However, there are usually specialized instructions to tell the computer to jump ahead or backwards to some other place in the program and to carry on executing from there. These are called \"jump\" instructions (or branches). Furthermore, jump instructions may be made to happen conditionally so that different sequences of instructions may be used depending on the result of some previous calculation or some external event. Many computers directly support subroutines by providing a type of jump that \"remembers\" the location it jumped from and another instruction to return to the instruction following that jump instruction.\nProgram execution might be likened to reading a book. While a person will normally read each word and line in sequence, they may at times jump back to an earlier place in the text or skip sections that are not of interest. Similarly, a computer may sometimes go back and repeat the instructions in some section of the program over and over again until some internal condition is met. This is called the flow of control within the program and it is what allows the computer to perform tasks repeatedly without human intervention.\nComparatively, a person using a pocket calculator can perform a basic arithmetic operation such as adding two numbers with just a few button presses. But to add together all of the numbers from 1 to 1,000 would take thousands of button presses and a lot of time, with a near certainty of making a mistake. On the other hand, a computer may be programmed to do this with just a few simple instructions. The following example is written in the MIPS assembly language:\n\nOnce told to run this program, the computer will perform the repetitive addition task without further human intervention. It will almost never make a mistake and a modern PC can complete the task in a fraction of a second.\n\n\n==== Machine code ====\nIn most computers, individual instructions are stored as machine code with each instruction being given a unique number (its operation code or opcode for short). The command to add two numbers together would have one opcode; the command to multiply them would have a different opcode, and so on. The simplest computers are able to perform any of a handful of different instructions; the more complex computers have several hundred to choose from, each with a unique numerical code. Since the computer's memory is able to store numbers, it can also store the instruction codes. This leads to the important fact that entire programs (which are just lists of these instructions) can be represented as lists of numbers and can themselves be manipulated inside the computer in the same way as numeric data. The fundamental concept of storing programs in the computer's memory alongside the data they operate on is the crux of the von Neumann, or stored program, architecture. In some cases, a computer might store some or all of its program in memory that is kept separate from the data it operates on. This is called the Harvard architecture after the Harvard Mark I computer. Modern von Neumann computers display some traits of the Harvard architecture in their designs, such as in CPU caches.\nWhile it is possible to write computer programs as long lists of numbers (machine language) and while this technique was used with many early computers, it is extremely tedious and potentially error-prone to do so in practice, especially for complicated programs. Instead, each basic instruction can be given a short name that is indicative of its function and easy to remember \u2013 a mnemonic such as ADD, SUB, MULT or JUMP. These mnemonics are collectively known as a computer's assembly language. Converting programs written in assembly language into something the computer can actually understand (machine language) is usually done by a computer program called an assembler.\n\n\n==== Programming language ====\n\nProgramming languages provide various ways of specifying programs for computers to run. Unlike natural languages, programming languages are designed to permit no ambiguity and to be concise. They are purely written languages and are often difficult to read aloud. They are generally either translated into machine code by a compiler or an assembler before being run, or translated directly at run time by an interpreter. Sometimes programs are executed by a hybrid method of the two techniques.\n\n\n===== Low-level languages =====\n\nMachine languages and the assembly languages that represent them (collectively termed low-level programming languages) are generally unique to the particular architecture of a computer's central processing unit (CPU). For instance, an ARM architecture CPU (such as may be found in a smartphone or a hand-held videogame) cannot understand the machine language of an x86 CPU that might be in a PC. Historically a significant number of other cpu architectures were created and saw extensive use, notably including the MOS Technology 6502 and 6510 in addition to the Zilog Z80.\n\n\n===== High-level languages =====\n\nAlthough considerably easier than in machine language, writing long programs in assembly language is often difficult and is also error prone. Therefore, most practical programs are written in more abstract high-level programming languages that are able to express the needs of the programmer more conveniently (and thereby help reduce programmer error). High level languages are usually \"compiled\" into machine language (or sometimes into assembly language and then into machine language) using another computer program called a compiler. High level languages are less related to the workings of the target computer than assembly language, and more related to the language and structure of the problem(s) to be solved by the final program. It is therefore often possible to use different compilers to translate the same high level language program into the machine language of many different types of computer. This is part of the means by which software like video games may be made available for different computer architectures such as personal computers and various video game consoles.\n\n\n==== Program design ====\nProgram design of small programs is relatively simple and involves the analysis of the problem, collection of inputs, using the programming constructs within languages, devising or using established procedures and algorithms, providing data for output devices and solutions to the problem as applicable. As problems become larger and more complex, features such as subprograms, modules, formal documentation, and new paradigms such as object-oriented programming are encountered. Large programs involving thousands of line of code and more require formal software methodologies. The task of developing large software systems presents a significant intellectual challenge. Producing software with an acceptably high reliability within a predictable schedule and budget has historically been difficult; the academic and professional discipline of software engineering concentrates specifically on this challenge.\n\n\n==== Bugs ====\n\nErrors in computer programs are called \"bugs\". They may be benign and not affect the usefulness of the program, or have only subtle effects. However, in some cases they may cause the program or the entire system to \"hang\", becoming unresponsive to input such as mouse clicks or keystrokes, to completely fail, or to crash. Otherwise benign bugs may sometimes be harnessed for malicious intent by an unscrupulous user writing an exploit, code designed to take advantage of a bug and disrupt a computer's proper execution. Bugs are usually not the fault of the computer. Since computers merely execute the instructions they are given, bugs are nearly always the result of programmer error or an oversight made in the program's design. Admiral Grace Hopper, an American computer scientist and developer of the first compiler, is credited for having first used the term \"bugs\" in computing after a dead moth was found shorting a relay in the Harvard Mark II computer in September 1947.\n\n\n== Networking and the Internet ==\n\nComputers have been used to coordinate information between multiple locations since the 1950s. The U.S. military's SAGE system was the first large-scale example of such a system, which led to a number of special-purpose commercial systems such as Sabre. In the 1970s, computer engineers at research institutions throughout the United States began to link their computers together using telecommunications technology. The effort was funded by ARPA (now DARPA), and the computer network that resulted was called the ARPANET. The technologies that made the Arpanet possible spread and evolved.\nIn time, the network spread beyond academic and military institutions and became known as the Internet. The emergence of networking involved a redefinition of the nature and boundaries of the computer. Computer operating systems and applications were modified to include the ability to define and access the resources of other computers on the network, such as peripheral devices, stored information, and the like, as extensions of the resources of an individual computer. Initially these facilities were available primarily to people working in high-tech environments, but in the 1990s the spread of applications like e-mail and the World Wide Web, combined with the development of cheap, fast networking technologies like Ethernet and ADSL saw computer networking become almost ubiquitous. In fact, the number of computers that are networked is growing phenomenally. A very large proportion of personal computers regularly connect to the Internet to communicate and receive information. \"Wireless\" networking, often utilizing mobile phone networks, has meant networking is becoming increasingly ubiquitous even in mobile computing environments.\n\n\n== Unconventional computers ==\n\nA computer does not need to be electronic, nor even have a processor, nor RAM, nor even a hard disk. While popular usage of the word \"computer\" is synonymous with a personal electronic computer, a typical modern definition of a computer is: \"A device that computes, especially a programmable [usually] electronic machine that performs high-speed mathematical or logical operations or that assembles, stores, correlates, or otherwise processes information.\" According to this definition, any device that processes information qualifies as a computer.\n\n\n== Future ==\nThere is active research to make non-classical computers out of many promising new types of technology, such as optical computers, DNA computers, neural computers, and quantum computers. Most computers are universal, and are able to calculate any computable function, and are limited only by their memory capacity and operating speed. However different designs of computers can give very different performance for particular problems; for example quantum computers can potentially break some modern encryption algorithms (by quantum factoring) very quickly.\n\n\n=== Computer architecture paradigms ===\nThere are many types of computer architectures:\n\nQuantum computer vs. Chemical computer\nScalar processor vs. Vector processor\nNon-Uniform Memory Access (NUMA) computers\nRegister machine vs. Stack machine\nHarvard architecture vs. von Neumann architecture\nCellular architectureOf all these abstract machines, a quantum computer holds the most promise for revolutionizing computing. Logic gates are a common abstraction which can apply to most of the above digital or analog paradigms. The ability to store and execute lists of instructions called programs makes computers extremely versatile, distinguishing them from calculators. The Church\u2013Turing thesis is a mathematical statement of this versatility: any computer with a minimum capability (being Turing-complete) is, in principle, capable of performing the same tasks that any other computer can perform. Therefore, any type of computer (netbook, supercomputer, cellular automaton, etc.) is able to perform the same computational tasks, given enough time and storage capacity.\n\n\n=== Artificial intelligence ===\nA computer will solve problems in exactly the way it is programmed to, without regard to efficiency, alternative solutions, possible shortcuts, or possible errors in the code. Computer programs that learn and adapt are part of the emerging field of artificial intelligence and machine learning. Artificial intelligence based products generally fall into two major categories: rule-based systems and pattern recognition systems. Rule-based systems attempt to represent the rules used by human experts and tend to be expensive to develop. Pattern-based systems use data about a problem to generate conclusions. Examples of pattern-based systems include voice recognition, font recognition, translation and the emerging field of on-line marketing.\n\n\n== Professions and organizations ==\nAs the use of computers has spread throughout society, there are an increasing number of careers involving computers.\n\nThe need for computers to work well together and to be able to exchange information has spawned the need for many standards organizations, clubs and societies of both a formal and informal nature.\n\n\n\n\n\n                           Answer: \n\n"}, {"role": "assistant", "content": "\ufeffAn ALU (Arithmetic and Logic Unit) is the \"mathematical brain\" of a computer that performs calculations and logical operations. The arithmetic unit handles all arithmetic and bitwise operations on integer binary numbers in the computer. \n\nThe ALU is made up of smaller circuits that make up the functionalities of the component. The simplest adding circuit is a \"half adder\" that adds two binary digits and produces a sum and carry bit. A \"full adder\" is a more complex circuit that adds three binary digits and handles the carry bit. An 8-bit ripple carry adder adds two 8-bit binary numbers by connecting half and full adders in a chain. \n\nWhen two 8-bit numbers are added and there is a carry into the 9th bit, it means the sum of the two numbers is too large to fit into 8-bits. This is called an overflow. If we want to avoid overflows, we can extend our circuit with more full adders, allowing us to add 16 or 32 bit numbers, at the cost of speed. Modern computers use a slightly different adding circuit called a \u2018carry-look-ahead\u2019 adder which is faster, but ultimately does exactly the same thing-- adds binary numbers\n\nThe arithmetic unit of an ALU also performs other math operations, such as subtraction and incrementing, by combining logic gates. Some of the arithmetic operations are as follows:\n* Add: A and B are summed and the sum appears at Y and carry-out.\n* Add with carry: A, B and carry-in are summed and the sum appears at Y and carry-out.\n* Subtract: B is subtracted from A (or vice versa) and the difference appears at Y and carry-out. For this function, carry-out is effectively a \"borrow\" indicator. \n* Subtract with borrow: B is subtracted from A (or vice versa) with borrow (carry-in) and the difference appears at Y and carry-out (borrow out).\n* Two's complement (negate): A (or B) is subtracted from zero and the difference appears at Y.\n* Increment: A (or B) is increased by one and the resulting value appears at Y.\n* Decrement: A (or B) is decreased by one and the resulting value appears at Y.\n* Pass through: all bits of A (or B) appear unmodified at Y. This operation is typically used to determine the parity of the operand or whether it is zero or negative, or to load the operand into a processor register.\n\nThe logic unit of an ALU performs logical operations, such as AND, OR, and NOT, and tests numerical conditions. Some operations are as follows: \n* AND: the bitwise AND of A and B appears at Y.\n* OR: the bitwise OR of A and B appears at Y.\n* Exclusive-OR: the bitwise XOR of A and B appears at Y.\n* Ones' complement: all bits of A (or B) are inverted and appear at Y.\n\nALUs use flags to indicate specific statuses, such as zero, negative, and overflow, which are used to control program execution.\n* Carry-out, which conveys the carry resulting from an addition operation, the borrow resulting from a subtraction operation, or the overflow bit resulting from a binary shift operation.\n* Zero, which indicates all bits of Y are logic zero.\n* Negative, which indicates the result of an arithmetic operation is negative.\n* Overflow, which indicates the result of an arithmetic operation has exceeded the numeric range of Y.\n* Parity, which indicates whether an even or odd number of bits in Y are logic one.\n"}]}
{"messages": [{"role": "system", "content": "\n                      Please write a 500 word summary on the following Transcript based on the Reading Material.\n                      Pick relevant information from the Reading Material and add it to the summary of the Transcript.\n                      The Summary should be only of the Transcript with a few information from the Reading Material.\n                      If you are not sure of the summary, say 'I don't know'.\n    "}, {"role": "user", "content": "Transcript: what this machine learning in this video we will try to define what it is and also try to give you a sense of when you want to use machine learning even among machine learning practitioners there isn't a well accepted definition of what is and what isn't machine learning but let me show you a couple of examples of the ways that people have tried to define it here's the definition of what is machine learning that is due to author Samuel he defined machine learning as the field of study that gives computers the ability to learn without being explicitly programmed Samuels claim to fame was that back in the 1950s he wrote a checkers playing program and the amazing thing about this checkers playing program was that Officer Samuel himself wasn't a very good checkers player but what he did was he had the program play tens of thousands of games against itself and by watching what sorts of board positions tended to lead to wins and what sort of board positions tended to veto losses the checkers playing program learned over time what are good board positions and what a bad board positions and eventually learned to play checkers better than Arthur Samuel himself was able to this was a remarkable result also Samuel himself turned out not to be a very good checkers player but because the computer has the patience to play tens of thousands of games against itself no human has the patience to play that many games by doing this the computer was able to get so much checkers playing experience that it eventually became a better checkers player than offered Samuel himself this is somewhat informal definition and an older one here's a slightly more recent definition by Tom Mitchell who is a friend out in committee Mellon so Tom defines machine learning by saying that a well-posed learning problem is defined as follows he says a computer program is said to learn from experience II with respect to some Tosti and some performance measure key evidence performance on T as measured by P improves of experience II I actually think he came up with this definition just to make it wrong for the checkers playing examples the experience II would be the experience of having the program play tens of thousands of games against itself the task T would be the task of playing checkers and the performance measure P would be the probability that wins the next game of checkers against some new opponent throughout these videos besides me trying to teach you stuff I'll occasionally ask you a question to make sure you understand the content here's one on top of the definition of machine learning by Tom McCullar let's say your email program watches which emails you do or do not value spam so in an email client like this you might click this spam button to report some email as spam but not other emails and based on which emails you Marcus them say your email program learns better how to filter a spam email what is the task of T in the setting in a few seconds the video will pause and when it does so you can use your mouse to select one of these four radio buttons to let to let me know which of these four you think is the right answer to this question so hopefully you got that this is the right answer classifying emails is a toss T in fact this definition defines the task T a performance measure P and the some experience e and so watching you label emails as spam or non-spam this would be the experience e and the fraction of emails correctly classified that might be our performance measure P and so our task performance on the task about systems performance on the task T on the performance measure P will improve after the experience e in this course I hope to teach you about various different types of learning algorithms there are several different types of learning algorithms the main two types are what we call supervised learning and unsupervised learning I'll define what these terms mean more in the next couple videos but it turns out that in supervised learning the idea is we're going to teach the how to do something whereas in unsupervised learning we're going to let it learn by itself don't worry if these two terms don't make sense yet in the next two videos I'm going to say exactly what these two types of learning on you will also hear all the buzz terms such as reinforcement learning and recommender systems these are other types of machine learning algorithms that we'll talk about later but the two most used types of learning algorithms are probably supervised learning and unsupervised learning and I'll define them in the next two videos and we'll spend most as far as talking about these two types of learning algorithms it turns out one of the other things we'll spend a lot of time on in this class is practical advice for applying learning algorithms this is something that I feel pretty strongly about and exactly something that I don't know of any other University teachers teaching about learning algorithms it's like giving you a set of tools and equally important or more important than giving you the tools is to teach you how to apply these tools I like to make an analogy to learning to become a carpenter imagine that someone is teaching you how to be a carpenter and they say here's a hammer here's a drive screwdriver is a saw good luck well that's no good right you have all these tools but the more important thing is to learn how to use these tools properly there's a huge difference we can keep between people that know how to use these machine learning algorithms versus people that don't know how to use these tools well here in Silicon Valley when I live when I go visit different companies even at the top Silicon Valley companies very often I see people trying to apply machine learning algorithms to some problem and sometimes there have been going at it for six months but sometimes when I look at what they're doing I say you know I could have told them like gee I could have told you six months ago or that you should be taking a learning algorithm and applying it in like the slightly modified way and your chance of success would have been much higher um so what we're going to do in this class is actually spend a lot of time talking about how if you're actually trying to develop a machine learning system how to make those best practices types decisions about the way in which you build your system so that when you apply learning algorithm you're less likely to end up one of those people who end up pursuing somehow for six months that you know someone else could have figured out just wasn't gonna work at all and it's a waste of time for six months so I'm actually spend a lot of time teaching you those sorts of best practices in machine learning and AI and how to get the stuff to work and how we do it or how the best people do it in Silicon Valley and around the world I hope to make you one of the best people and knowing how to design and build serious machine learning and AI systems so that's machine learning and these are the main topics I hope to teach in the next video I'm going to define what is supervised learning and after that what is unsupervised learning and also start to talk about when you will use each of them\n\n\n                           Reading Material: Machine learning (ML) is a field of study in artificial intelligence concerned with the development and study of statistical algorithms that can learn from data and generalize to unseen data, and thus perform tasks without explicit instructions. Recently, generative artificial neural networks have been able to surpass many previous approaches in performance.Machine learning approaches have been applied to many fields including large language models, computer vision, speech recognition, email filtering, agriculture, and medicine, where it is too costly to develop algorithms to perform the needed tasks. ML is known in its application across business problems under the name predictive analytics. Although not all machine learning is statistically based, computational statistics is an important source of the field's methods.\nThe mathematical foundations of ML are provided by mathematical optimization (mathematical programming) methods. Data mining is a related (parallel) field of study, focusing on exploratory data analysis through unsupervised learning. From a theoretical point of view Probably approximately correct learning provides a framework for describing machine learning.\n\n\n== History and relationships to other fields ==\n\nThe term machine learning was coined in 1959 by Arthur Samuel, an IBM employee and pioneer in the field of computer gaming and artificial intelligence. The synonym self-teaching computers was also used in this time period.Although the earliest machine learning model was introduced in the 1950s when Arthur Samuel invented a program that calculated the winning chance in checkers for each side, the history of machine learning roots back to decades of human desire and effort to study human cognitive processes. In 1949, Canadian psychologist Donald Hebb published the book The Organization of Behavior, in which he introduced a theoretical neural structure formed by certain interactions among nerve cells. Hebb's model of neurons interacting with one another set a groundwork for how AIs and machine learning algorithms work under nodes, or artificial neurons used by computers to communicate data. Other researchers who have studied human cognitive systems contributed to the modern machine learning technologies as well, including logician Walter Pitts and Warren McCulloch, who proposed the early mathematical models of neural networks to come up with algorithms that mirror human thought processes.By the early 1960s an experimental \"learning machine\" with punched tape memory, called Cybertron, had been developed by Raytheon Company to analyze sonar signals, electrocardiograms, and speech patterns using rudimentary reinforcement learning. It was repetitively \"trained\" by a human operator/teacher to recognize patterns and equipped with a \"goof\" button to cause it to re-evaluate incorrect decisions. A representative book on research into machine learning during the 1960s was Nilsson's book on Learning Machines, dealing mostly with machine learning for pattern classification. Interest related to pattern recognition continued into the 1970s, as described by Duda and Hart in 1973. In 1981 a report was given on using teaching strategies so that an artificial neural network learns to recognize 40 characters (26 letters, 10 digits, and 4 special symbols) from a computer terminal.Tom M. Mitchell provided a widely quoted, more formal definition of the algorithms studied in the machine learning field: \"A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P if its performance at tasks in T, as measured by P,  improves with experience E.\" This definition of the tasks in which machine learning is concerned offers a fundamentally operational definition rather than defining the field in cognitive terms. This follows Alan Turing's proposal in his paper \"Computing Machinery and Intelligence\", in which the question \"Can machines think?\" is replaced with the question \"Can machines do what we (as thinking entities) can do?\".Modern-day machine learning has two objectives, one is to classify data based on models which have been developed, the other purpose is to make predictions for future outcomes based on these models. A hypothetical algorithm specific to classifying data may use computer vision of moles coupled with supervised learning in order to train it to classify the cancerous moles. A machine learning algorithm for stock trading may inform the trader of future potential predictions.\n\n\n=== Artificial intelligence ===\nAs a scientific endeavor, machine learning grew out of the quest for artificial intelligence (AI). In the early days of AI as an academic discipline, some researchers were interested in having machines learn from data. They attempted to approach the problem with various symbolic methods, as well as what were then termed \"neural networks\"; these were mostly perceptrons and other models that were later found to be reinventions of the generalized linear models of statistics. Probabilistic reasoning was also employed, especially in automated medical diagnosis.:\u200a488\u200aHowever, an increasing emphasis on the logical, knowledge-based approach caused a rift between AI and machine learning. Probabilistic systems were plagued by theoretical and practical problems of data acquisition and representation.:\u200a488\u200a By 1980, expert systems had come to dominate AI, and statistics was out of favor. Work on symbolic/knowledge-based learning did continue within AI, leading to inductive logic programming, but the more statistical line of research was now outside the field of AI proper, in pattern recognition and information retrieval.:\u200a708\u2013710,\u200a755\u200a Neural networks research had been abandoned by AI and computer science around the same time. This line, too, was continued outside the AI/CS field, as \"connectionism\", by researchers from other disciplines including Hopfield, Rumelhart, and Hinton. Their main success came in the mid-1980s with the reinvention of backpropagation.:\u200a25\u200aMachine learning (ML), reorganized and recognized as its own field, started to flourish in the 1990s. The field changed its goal from achieving artificial intelligence to tackling solvable problems of a practical nature. It shifted focus away from the symbolic approaches it had inherited from AI, and toward methods and models borrowed from statistics, fuzzy logic, and probability theory.\n\n\n=== Data mining ===\nMachine learning and data mining often employ the same methods and overlap significantly, but while machine learning focuses on prediction, based on known properties learned from the training data, data mining focuses on the discovery of (previously) unknown properties in the data (this is the analysis step of knowledge discovery in databases). Data mining uses many machine learning methods, but with different goals; on the other hand, machine learning also employs data mining methods as \"unsupervised learning\" or as a preprocessing step to improve learner accuracy. Much of the confusion between these two research communities (which do often have separate conferences and separate journals, ECML PKDD being a major exception) comes from the basic assumptions they work with: in machine learning, performance is usually evaluated with respect to the ability to reproduce known knowledge, while in knowledge discovery and data mining (KDD) the key task is the discovery of previously unknown knowledge. Evaluated with respect to known knowledge, an uninformed (unsupervised) method will easily be outperformed by other supervised methods, while in a typical KDD task, supervised methods cannot be used due to the unavailability of training data.\nMachine learning also has intimate ties to optimization: many learning problems are formulated as minimization of some loss function on a training set of examples. Loss functions express the discrepancy between the predictions of the model being trained and the actual problem instances (for example, in classification, one wants to assign a label to instances, and models are trained to correctly predict the pre-assigned labels of a set of examples).\n\n\n=== Generalization ===\nThe difference between optimization and machine learning arises from the goal of generalization: while optimization algorithms can minimize the loss on a training set, machine learning is concerned with minimizing the loss on unseen samples. Characterizing the generalization of various learning algorithms is an active topic of current research, especially for deep learning algorithms.\n\n\n=== Statistics ===\nMachine learning and statistics are closely related fields in terms of methods, but distinct in their principal goal: statistics draws population inferences from a sample, while machine learning finds generalizable predictive patterns. According to Michael I. Jordan, the ideas of machine learning, from methodological principles to theoretical tools, have had a long pre-history in statistics. He also suggested the term data science as a placeholder to call the overall field.Conventional statistical analyses require the a priori selection of a model most suitable for the study data set. In addition, only significant or theoretically relevant variables based on previous experience are included for analysis. In contrast, machine learning is not built on a pre-structured model; rather, the data shape the model by detecting underlying patterns. The more variables (input) used to train the model, the more accurate the ultimate model will be.Leo Breiman distinguished two statistical modeling paradigms: data model and algorithmic model, wherein \"algorithmic model\" means more or less the machine learning algorithms like Random Forest.\nSome statisticians have adopted methods from machine learning, leading to a combined field that they call statistical learning.\n\n\n=== Statistical Physics ===\nAnalytical and computational techniques derived from deep-rooted physics of disordered systems can be extended to large-scale problems, including machine learning, e.g., to analyze the weight space of deep neural networks. Statistical physics is thus finding applications in the area of medical diagnostics.\n\n\n== Theory ==\n\nA core objective of a learner is to generalize from its experience. Generalization in this context is the ability of a learning machine to perform accurately on new, unseen examples/tasks after having experienced a learning data set. The training examples come from some generally unknown probability distribution (considered representative of the space of occurrences) and the learner has to build a general model about this space that enables it to produce sufficiently accurate predictions in new cases.\nThe computational analysis of machine learning algorithms and their performance is a branch of theoretical computer science known as computational learning theory via the Probably Approximately Correct Learning (PAC) model. Because training sets are finite and the future is uncertain, learning theory usually does not yield guarantees of the performance of algorithms. Instead, probabilistic bounds on the performance are quite common. The bias\u2013variance decomposition is one way to quantify generalization error.\nFor the best performance in the context of generalization, the complexity of the hypothesis should match the complexity of the function underlying the data. If the hypothesis is less complex than the function, then the model has under fitted the data. If the complexity of the model is increased in response, then the training error decreases. But if the hypothesis is too complex, then the model is subject to overfitting and generalization will be poorer.In addition to performance bounds, learning theorists study the time complexity and feasibility of learning. In computational learning theory, a computation is considered feasible if it can be done in polynomial time. There are two kinds of time complexity results: Positive results show that a certain class of functions can be learned in polynomial time. Negative results show that certain classes cannot be learned in polynomial time.\n\n\n== Approaches ==\n\nMachine learning approaches are traditionally divided into three broad categories, which correspond to learning paradigms, depending on the nature of the \"signal\" or \"feedback\" available to the learning system:\n\nSupervised learning: The computer is presented with example inputs and their desired outputs, given by a \"teacher\", and the goal is to learn a general rule that maps inputs to outputs.\nUnsupervised learning: No labels are given to the learning algorithm, leaving it on its own to find structure in its input. Unsupervised learning can be a goal in itself (discovering hidden patterns in data) or a means towards an end (feature learning).\nReinforcement learning: A computer program interacts with a dynamic environment in which it must perform a certain goal (such as driving a vehicle or playing a game against an opponent). As it navigates its problem space, the program is provided feedback that's analogous to rewards, which it tries to maximize.Although each algorithm has advantages and limitations, no single algorithm works for all problems.\n\n\n=== Supervised learning ===\n\nSupervised learning algorithms build a mathematical model of a set of data that contains both the inputs and the desired outputs. The data is known as training data, and consists of a set of training examples. Each training example has one or more inputs and the desired output, also known as a supervisory signal.  In the mathematical model, each training example is represented by an array or vector, sometimes called a feature vector, and the training data is represented by a matrix. Through iterative optimization of an objective function, supervised learning algorithms learn a function that can be used to predict the output associated with new inputs. An optimal function allows the algorithm to correctly determine the output for inputs that were not a part of the training data. An algorithm that improves the accuracy of its outputs or predictions over time is said to have learned to perform that task.Types of supervised-learning algorithms include active learning, classification and regression. Classification algorithms are used when the outputs are restricted to a limited set of values, and regression algorithms are used when the outputs may have any numerical value within a range. As an example, for a classification algorithm that filters emails, the input would be an incoming email, and the output would be the name of the folder in which to file the email.\nSimilarity learning is an area of supervised machine learning closely related to regression and classification, but the goal is to learn from examples using a similarity function that measures how similar or related two objects are. It has applications in ranking, recommendation systems, visual identity tracking, face verification, and speaker verification.\n\n\n=== Unsupervised learning ===\n\nUnsupervised learning algorithms find structures in data that has not been labeled, classified or categorized. Instead of responding to feedback, unsupervised learning algorithms identify commonalities in the data and react based on the presence or absence of such commonalities in each new piece of data. Central applications of unsupervised machine learning include clustering, dimensionality reduction, and density estimation. Unsupervised learning algorithms also streamlined the process of identifying large indel based haplotypes of a gene of interest from pan-genome.\nCluster analysis is the assignment of a set of observations into subsets (called clusters) so that observations within the same cluster are similar according to one or more predesignated criteria, while observations drawn from different clusters are dissimilar. Different clustering techniques make different assumptions on the structure of the data, often defined by some similarity metric and evaluated, for example, by internal compactness, or the similarity between members of the same cluster, and separation, the difference between clusters. Other methods are based on estimated density and graph connectivity.\n\n\n=== Semi-supervised learning ===\n\nSemi-supervised learning falls between unsupervised learning (without any labeled training data) and supervised learning (with completely labeled training data). Some of the training examples are missing training labels, yet many machine-learning researchers have found that unlabeled data, when used in conjunction with a small amount of labeled data, can produce a considerable improvement in learning accuracy.\nIn weakly supervised learning, the training labels are noisy, limited, or imprecise; however, these labels are often cheaper to obtain, resulting in larger effective training sets.\n\n\n=== Reinforcement learning ===\n\nReinforcement learning is an area of machine learning concerned with how software agents ought to take actions in an environment so as to maximize some notion of cumulative reward. Due to its generality, the field is studied in many other disciplines, such as game theory, control theory, operations research, information theory, simulation-based optimization, multi-agent systems, swarm intelligence, statistics and genetic algorithms. In reinforcement learning, the environment is typically represented as a Markov decision process (MDP). Many reinforcements learning algorithms use dynamic programming techniques. Reinforcement learning algorithms do not assume knowledge of an exact mathematical model of the MDP and are used when exact models are infeasible. Reinforcement learning algorithms are used in autonomous vehicles or in learning to play a game against a human opponent.\n\n\n=== Dimensionality reduction ===\nDimensionality reduction is a process of reducing the number of random variables under consideration by obtaining a set of principal variables. In other words, it is a process of reducing the dimension of the feature set, also called the \"number of features\". Most of the dimensionality reduction techniques can be considered as either feature elimination or extraction. One of the popular methods of dimensionality reduction is principal component analysis (PCA). PCA involves changing higher-dimensional data (e.g., 3D) to a smaller space (e.g., 2D). This results in a smaller dimension of data (2D instead of 3D), while keeping all original variables in the model without changing the data.\nThe manifold hypothesis proposes that high-dimensional data sets lie along low-dimensional manifolds, and many dimensionality reduction techniques make this assumption, leading to the area of manifold learning and manifold regularization.\n\n\n=== Other types ===\nOther approaches have been developed which do not fit neatly into this three-fold categorization, and sometimes more than one is used by the same machine learning system. For example, topic modeling, meta-learning.\n\n\n==== Self-learning ====\nSelf-learning, as a machine learning paradigm was introduced in 1982 along with a neural network capable of self-learning, named crossbar adaptive array (CAA). It is learning with no external rewards and no external teacher advice. The CAA self-learning algorithm computes, in a crossbar fashion, both decisions about actions and emotions (feelings) about consequence situations. The system is driven by the interaction between cognition and emotion.\nThe self-learning algorithm updates a memory matrix W =||w(a,s)|| such that in each iteration executes the following machine learning routine: \n\nin situation s perform action a\nreceive a consequence situation s'\ncompute emotion of being in the consequence situation v(s')\nupdate crossbar memory  w'(a,s) = w(a,s) + v(s')It is a system with only one input, situation, and only one output, action (or behavior) a. There is neither a separate reinforcement input nor an advice input from the environment. The backpropagated value (secondary reinforcement) is the emotion toward the consequence situation. The CAA exists in two environments, one is the behavioral environment where it behaves, and the other is the genetic environment, wherefrom it initially and only once receives initial emotions about situations to be encountered in the behavioral environment. After receiving the genome (species) vector from the genetic environment, the CAA learns a goal-seeking behavior, in an environment that contains both desirable and undesirable situations.\n\n\n==== Feature learning ====\n\nSeveral learning algorithms aim at discovering better representations of the inputs provided during training. Classic examples include principal component analysis and cluster analysis. Feature learning algorithms, also called representation learning algorithms, often attempt to preserve the information in their input but also transform it in a way that makes it useful, often as a pre-processing step before performing classification or predictions. This technique allows reconstruction of the inputs coming from the unknown data-generating distribution, while not being necessarily faithful to configurations that are implausible under that distribution. This replaces manual feature engineering, and allows a machine to both learn the features and use them to perform a specific task.\nFeature learning can be either supervised or unsupervised. In supervised feature learning, features are learned using labeled input data. Examples include artificial neural networks, multilayer perceptrons, and supervised dictionary learning. In unsupervised feature learning, features are learned with unlabeled input data.  Examples include dictionary learning, independent component analysis, autoencoders, matrix factorization and various forms of clustering.Manifold learning algorithms attempt to do so under the constraint that the learned representation is low-dimensional. Sparse coding algorithms attempt to do so under the constraint that the learned representation is sparse, meaning that the mathematical model has many zeros. Multilinear subspace learning algorithms aim to learn low-dimensional representations directly from tensor representations for multidimensional data, without reshaping them into higher-dimensional vectors. Deep learning algorithms discover multiple levels of representation, or a hierarchy of features, with higher-level, more abstract features defined in terms of (or generating) lower-level features. It has been argued that an intelligent machine is one that learns a representation that disentangles the underlying factors of variation that explain the observed data.Feature learning is motivated by the fact that machine learning tasks such as classification often require input that is mathematically and computationally convenient to process. However, real-world data such as images, video, and sensory data has not yielded attempts to algorithmically define specific features. An alternative is to discover such features or representations through examination, without relying on explicit algorithms.\n\n\n==== Sparse dictionary learning ====\n\nSparse dictionary learning is a feature learning method where a training example is represented as a linear combination of basis functions, and is assumed to be a sparse matrix. The method is strongly NP-hard and difficult to solve approximately. A popular heuristic method for sparse dictionary learning is the K-SVD algorithm. Sparse dictionary learning has been applied in several contexts. In classification, the problem is to determine the class to which a previously unseen training example belongs. For a dictionary where each class has already been built, a new training example is associated with the class that is best sparsely represented by the corresponding dictionary. Sparse dictionary learning has also been applied in image de-noising. The key idea is that a clean image patch can be sparsely represented by an image dictionary, but the noise cannot.\n\n\n==== Anomaly detection ====\n\nIn data mining, anomaly detection, also known as outlier detection, is the identification of rare items, events or observations which raise suspicions by differing significantly from the majority of the data. Typically, the anomalous items represent an issue such as bank fraud, a structural defect, medical problems or errors in a text. Anomalies are referred to as outliers, novelties, noise, deviations and exceptions.In particular, in the context of abuse and network intrusion detection, the interesting objects are often not rare objects, but unexpected bursts of inactivity. This pattern does not adhere to the common statistical definition of an outlier as a rare object. Many outlier detection methods (in particular, unsupervised algorithms) will fail on such data unless aggregated appropriately. Instead, a cluster analysis algorithm may be able to detect the micro-clusters formed by these patterns.Three broad categories of anomaly detection techniques exist. Unsupervised anomaly detection techniques detect anomalies in an unlabeled test data set under the assumption that the majority of the instances in the data set are normal, by looking for instances that seem to fit the least to the remainder of the data set. Supervised anomaly detection techniques require a data set that has been labeled as \"normal\" and \"abnormal\" and involves training a classifier (the key difference to many other statistical classification problems is the inherently unbalanced nature of outlier detection). Semi-supervised anomaly detection techniques construct a model representing normal behavior from a given normal training data set and then test the likelihood of a test instance to be generated by the model.\n\n\n==== Robot learning ====\nRobot learning is inspired by a multitude of machine learning methods, starting from supervised learning, reinforcement learning, and finally meta-learning (e.g. MAML).\n\n\n==== Association rules ====\n\nAssociation rule learning is a rule-based machine learning method for discovering relationships between variables in large databases. It is intended to identify strong rules discovered in databases using some measure of \"interestingness\".Rule-based machine learning is a general term for any machine learning method that identifies, learns, or evolves \"rules\" to store, manipulate or apply knowledge. The defining characteristic of a rule-based machine learning algorithm is the identification and utilization of a set of relational rules that collectively represent the knowledge captured by the system. This is in contrast to other machine learning algorithms that commonly identify a singular model that can be universally applied to any instance in order to make a prediction. Rule-based machine learning approaches include learning classifier systems, association rule learning, and artificial immune systems.\nBased on the concept of strong rules, Rakesh Agrawal, Tomasz Imieli\u0144ski and Arun Swami introduced association rules for discovering regularities between products in large-scale transaction data recorded by point-of-sale (POS) systems in supermarkets. For example, the rule \n  \n    \n      \n        {\n        \n          o\n          n\n          i\n          o\n          n\n          s\n          ,\n          p\n          o\n          t\n          a\n          t\n          o\n          e\n          s\n        \n        }\n        \u21d2\n        {\n        \n          b\n          u\n          r\n          g\n          e\n          r\n        \n        }\n      \n    \n    {\\displaystyle \\{\\mathrm {onions,potatoes} \\}\\Rightarrow \\{\\mathrm {burger} \\}}\n   found in the sales data of a supermarket would indicate that if a customer buys onions and potatoes together, they are likely to also buy hamburger meat. Such information can be used as the basis for decisions about marketing activities such as promotional pricing or product placements. In addition to market basket analysis, association rules are employed today in application areas including Web usage mining, intrusion detection, continuous production, and bioinformatics. In contrast with sequence mining, association rule learning typically does not consider the order of items either within a transaction or across transactions.\nLearning classifier systems (LCS) are a family of rule-based machine learning algorithms that combine a discovery component, typically a genetic algorithm, with a learning component, performing either supervised learning, reinforcement learning, or unsupervised learning. They seek to identify a set of context-dependent rules that collectively store and apply knowledge in a piecewise manner in order to make predictions.Inductive logic programming (ILP) is an approach to rule learning using logic programming as a uniform representation for input examples, background knowledge, and hypotheses. Given an encoding of the known background knowledge and a set of examples represented as a logical database of facts, an ILP system will derive a hypothesized logic program that entails all positive and no negative examples. Inductive programming is a related field that considers any kind of programming language for representing hypotheses (and not only logic programming), such as functional programs.\nInductive logic programming is particularly useful in bioinformatics and natural language processing. Gordon Plotkin and Ehud Shapiro laid the initial theoretical foundation for inductive machine learning in a logical setting. Shapiro built their first implementation (Model Inference System) in 1981: a Prolog program that inductively inferred logic programs from positive and negative examples. The term inductive here refers to philosophical induction, suggesting a theory to explain observed facts, rather than mathematical induction, proving a property for all members of a well-ordered set.\n\n\n=== Models ===\nPerforming machine learning can involve creating a model, which is trained on some training data and then can process additional data to make predictions. Various types of models have been used and researched for machine learning systems.\n\n\n==== Artificial neural networks ====\n\nArtificial neural networks (ANNs), or connectionist systems, are computing systems vaguely inspired by the biological neural networks that constitute animal brains. Such systems \"learn\" to perform tasks by considering examples, generally without being programmed with any task-specific rules.\nAn ANN is a model based on a collection of connected units or nodes called \"artificial neurons\", which loosely model the neurons in a biological brain. Each connection, like the synapses in a biological brain, can transmit information, a \"signal\", from one artificial neuron to another. An artificial neuron that receives a signal can process it and then signal additional artificial neurons connected to it. In common ANN implementations, the signal at a connection between artificial neurons is a real number, and the output of each artificial neuron is computed by some non-linear function of the sum of its inputs. The connections between artificial neurons are called \"edges\". Artificial neurons and edges typically have a weight that adjusts as learning proceeds. The weight increases or decreases the strength of the signal at a connection. Artificial neurons may have a threshold such that the signal is only sent if the aggregate signal crosses that threshold. Typically, artificial neurons are aggregated into layers. Different layers may perform different kinds of transformations on their inputs. Signals travel from the first layer (the input layer) to the last layer (the output layer), possibly after traversing the layers multiple times.\nThe original goal of the ANN approach was to solve problems in the same way that a human brain would. However, over time, attention moved to performing specific tasks, leading to deviations from biology. Artificial neural networks have been used on a variety of tasks, including computer vision, speech recognition, machine translation, social network filtering, playing board and video games and medical diagnosis.\nDeep learning consists of multiple hidden layers in an artificial neural network. This approach tries to model the way the human brain processes light and sound into vision and hearing. Some successful applications of deep learning are computer vision and speech recognition.\n\n\n==== Decision trees ====\n\nDecision tree learning uses a decision tree as a predictive model to go from observations about an item (represented in the branches) to conclusions about the item's target value (represented in the leaves). It is one of the predictive modeling approaches used in statistics, data mining, and machine learning. Tree models where the target variable can take a discrete set of values are called classification trees; in these tree structures, leaves represent class labels, and branches represent conjunctions of features that lead to those class labels. Decision trees where the target variable can take continuous values (typically real numbers) are called regression trees. In decision analysis, a decision tree can be used to visually and explicitly represent decisions and decision making. In data mining, a decision tree describes data, but the resulting classification tree can be an input for decision-making.\n\n\n==== Support-vector machines ====\n\nSupport-vector machines (SVMs), also known as support-vector networks, are a set of related supervised learning methods used for classification and regression. Given a set of training examples, each marked as belonging to one of two categories, an SVM training algorithm builds a model that predicts whether a new example falls into one category.  An SVM training algorithm is a non-probabilistic, binary, linear classifier, although methods such as Platt scaling exist to use SVM in a probabilistic classification setting. In addition to performing linear classification, SVMs can efficiently perform a non-linear classification using what is called the kernel trick, implicitly mapping their inputs into high-dimensional feature spaces.\n\n\n==== Regression analysis ====\n\nRegression analysis encompasses a large variety of statistical methods to estimate the relationship between input variables and their associated features. Its most common form is linear regression, where a single line is drawn to best fit the given data according to a mathematical criterion such as ordinary least squares. The latter is often extended by regularization methods to mitigate overfitting and bias, as in ridge regression. When dealing with non-linear problems, go-to models include polynomial regression (for example, used for trendline fitting in Microsoft Excel), logistic regression (often used in statistical classification) or even kernel regression, which introduces non-linearity by taking advantage of the kernel trick to implicitly map input variables to higher-dimensional space.\n\n\n==== Bayesian networks ====\n\nA Bayesian network, belief network, or directed acyclic graphical model is a probabilistic graphical model that represents a set of random variables and their conditional independence with a directed acyclic graph (DAG). For example, a Bayesian network could represent the probabilistic relationships between diseases and symptoms. Given symptoms, the network can be used to compute the probabilities of the presence of various diseases. Efficient algorithms exist that perform inference and learning. Bayesian networks that model sequences of variables, like speech signals or protein sequences, are called dynamic Bayesian networks. Generalizations of Bayesian networks that can represent and solve decision problems under uncertainty are called influence diagrams.\n\n\n==== Gaussian processes ====\n\nA Gaussian process is a stochastic process in which every finite collection of the random variables in the process has a multivariate normal distribution, and it relies on a pre-defined covariance function, or kernel, that models how pairs of points relate to each other depending on their locations.\nGiven a set of observed points, or input\u2013output examples, the distribution of the (unobserved) output of a new point as function of its input data can be directly computed by looking like the observed points and the covariances between those points and the new, unobserved point.\nGaussian processes are popular surrogate models in Bayesian optimization used to do hyperparameter optimization.\n\n\n==== Genetic algorithms ====\n\nA genetic algorithm (GA) is a search algorithm and heuristic technique that mimics the process of natural selection, using methods such as mutation and crossover to generate new genotypes in the hope of finding good solutions to a given problem. In machine learning, genetic algorithms were used in the 1980s and 1990s. Conversely, machine learning techniques have been used to improve the performance of genetic and evolutionary algorithms.\n\n\n==== Belief functions ====\n\nThe theory of belief functions, also referred to as evidence theory or Dempster\u2013Shafer theory, is a general framework for reasoning with uncertainty, with understood connections to other frameworks such as probability, possibility and  imprecise probability theories. These theoretical frameworks can be thought of as a kind of learner and have some analogous properties of how evidence is combined (e.g.,  Dempster's rule of combination), just like how in a pmf-based Bayesian approach would combine probabilities. However, there are many caveats to these beliefs functions when compared to Bayesian approaches in order to incorporate ignorance and Uncertainty quantification. These belief function approaches that are implemented within the machine learning domain typically leverage a fusion approach of various ensemble methods to better handle the learner's decision boundary, low samples, and ambiguous class issues that standard machine learning approach tend to have difficulty resolving. However, the computational complexity of these algorithms are dependent on the number of propositions (classes), and can lead a much higher computation time when compared to other machine learning approaches.\n\n\n=== Training models ===\nTypically, machine learning models require a high quantity of reliable data in order for the models to perform accurate predictions. When training a machine learning model, machine learning engineers need to target and collect a large and representative sample of data. Data from the training set can be as varied as a corpus of text, a collection of images, sensor data, and data collected from individual users of a service. Overfitting is something to watch out for when training a machine learning model. Trained models derived from biased or non-evaluated data can result in skewed or undesired predictions. Bias models may result in detrimental outcomes thereby furthering the negative impacts on society or objectives. Algorithmic bias is a potential result of data not being fully prepared for training. Machine learning ethics is becoming a field of study and notably be integrated within machine learning engineering teams.\n\n\n==== Federated learning ====\n\nFederated learning is an adapted form of distributed artificial intelligence to training machine learning models that decentralizes the training process, allowing for users' privacy to be maintained by not needing to send their data to a centralized server. This also increases efficiency by decentralizing the training process to many devices. For example, Gboard uses federated machine learning to train search query prediction models on users' mobile phones without having to send individual searches back to Google.\n\n\n== Applications ==\nThere are many applications for machine learning, including:\n\nIn 2006, the media-services provider Netflix held the first \"Netflix Prize\" competition to find a program to better predict user preferences and improve the accuracy of its existing Cinematch movie recommendation algorithm by at least 10%. A joint team made up of researchers from AT&T Labs-Research in collaboration with the teams Big Chaos and Pragmatic Theory built an ensemble model to win the Grand Prize in 2009 for $1 million. Shortly after the prize was awarded, Netflix realized that viewers' ratings were not the best indicators of their viewing patterns (\"everything is a recommendation\") and they changed their recommendation engine accordingly. In 2010 The Wall Street Journal wrote about the firm Rebellion Research and their use of machine learning to predict the financial crisis. In 2012, co-founder of Sun Microsystems, Vinod Khosla, predicted that 80% of medical doctors jobs would be lost in the next two decades to automated machine learning medical diagnostic software. In 2014, it was reported that a machine learning algorithm had been applied in the field of art history to study fine art paintings and that it may have revealed previously unrecognized influences among artists. In 2019 Springer Nature published the first research book created using machine learning. In 2020, machine learning technology was used to help make diagnoses and aid researchers in developing a cure for COVID-19. Machine learning was recently applied to predict the pro-environmental behavior of travelers. Recently, machine learning technology was also applied to optimize smartphone's performance and thermal behavior based on the user's interaction with the phone. When applied correctly, machine learning algorithms (MLAs) can utilize a wide range of company characteristics to predict stock returns without overfitting. By employing effective feature engineering and combining forecasts, MLAs can generate results that far surpass those obtained from basic linear techniques like OLS.\n\n\n== Limitations ==\nAlthough machine learning has been transformative in some fields, machine-learning programs often fail to deliver expected results. Reasons for this are numerous: lack of (suitable) data, lack of access to the data, data bias, privacy problems, badly chosen tasks and algorithms, wrong tools and people, lack of resources, and evaluation problems.The \"black box theory\" poses another yet significant challenge. Black box refers to a situation where the algorithm or the process of producing an output is entirely opaque, meaning that even the coders of the algorithm cannot audit the pattern that the machine extracted out of the data. The House of Lords Select Committee, which claimed that such an \u201cintelligence system\u201d that could have a \u201csubstantial impact on an individual\u2019s life\u201d would not be considered acceptable unless it provided \u201ca full and satisfactory explanation for the decisions\u201d it makes.In 2018, a self-driving car from Uber failed to detect a pedestrian, who was killed after a collision. Attempts to use machine learning in healthcare with the IBM Watson system failed to deliver even after years of time and billions of dollars invested. Microsoft's chatbot has been reported to produce hostile and offensive response against its users.Machine learning has been used as a strategy to update the evidence related to a systematic review and increased reviewer burden related to the growth of biomedical literature. While it has improved with training sets, it has not yet developed sufficiently to reduce the workload burden without limiting the necessary sensitivity for the findings research themselves.\n\n\n=== Bias ===\nMachine learning approaches in particular can suffer from different data biases. A machine learning system trained specifically on current customers may not be able to predict the needs of new customer groups that are not represented in the training data. When trained on human-made data, machine learning is likely to pick up the constitutional and unconscious biases already present in society.Language models learned from data have been shown to contain human-like biases. In an experiment carried out by ProPublica, an investigative journalism organization, a machine learning algorithm\u2019s insight towards the recidivism rates among prisoners falsely flagged \u201cblack defendants high risk twice as often as white defendants.\u201d In 2015, Google photos would often tag black people as gorillas, and in 2018 this still was not well resolved, but Google reportedly was still using the workaround to remove all gorillas from the training data, and thus was not able to recognize real gorillas at all. Similar issues with recognizing non-white people have been found in many other systems. In 2016, Microsoft tested a chatbot that learned from Twitter, and it quickly picked up racist and sexist language.Because of such challenges, the effective use of machine learning may take longer to be adopted in other domains. Concern for fairness in machine learning, that is, reducing bias in machine learning and propelling its use for human good is increasingly expressed by artificial intelligence scientists, including Fei-Fei Li, who reminds engineers that \"There's nothing artificial about AI...It's inspired by people, it's created by people, and\u2014most importantly\u2014it impacts people. It is a powerful tool we are only just beginning to understand, and that is a profound responsibility.\"\n\n\n=== Explainability ===\n\nExplainable AI (XAI), or Interpretable AI, or Explainable Machine Learning (XML), is artificial intelligence (AI) in which humans can understand the decisions or predictions made by the AI. It contrasts with the \"black box\" concept in machine learning where even its designers cannot explain why an AI arrived at a specific decision. By refining the mental models of users of AI-powered systems and dismantling their misconceptions, XAI promises to help users perform more effectively. XAI may be an implementation of the social right to explanation.\n\n\n=== Overfitting ===\n\nSettling on a bad, overly complex theory gerrymandered to fit all the past training data is known as overfitting. Many systems attempt to reduce overfitting by rewarding a theory in accordance with how well it fits the data but penalizing the theory in accordance with how complex the theory is.\n\n\n=== Other limitations and vulnerabilities ===\nLearners can also disappoint by \"learning the wrong lesson\". A toy example is that an image classifier trained only on pictures of brown horses and black cats might conclude that all brown patches are likely to be horses. A real-world example is that, unlike humans, current image classifiers often do not primarily make judgments from the spatial relationship between components of the picture, and they learn relationships between pixels that humans are oblivious to, but that still correlate with images of certain types of real objects. Modifying these patterns on a legitimate image can result in \"adversarial\" images that the system misclassifies.Adversarial vulnerabilities can also result in nonlinear systems, or from non-pattern perturbations. For some systems, it is possible to change the output by only changing a single adversarially chosen pixel. Machine learning models are often vulnerable to manipulation and/or evasion via adversarial machine learning.Researchers have demonstrated how backdoors can be placed undetectably into classifying (e.g., for categories \"spam\" and well-visible \"not spam\" of posts) machine learning models which are often developed and/or trained by third parties. Parties can change the classification of any input, including in cases for which a type of data/software transparency is provided, possibly including white-box access.\n\n\n== Model assessments ==\nClassification of machine learning models can be validated by accuracy estimation techniques like the holdout method, which splits the data in a training and test set (conventionally 2/3 training set and 1/3 test set designation) and evaluates the performance of the training model on the test set. In comparison, the K-fold-cross-validation method randomly partitions the data into K subsets and then K experiments are performed each respectively considering 1 subset for evaluation and the remaining K-1 subsets for training the model. In addition to the holdout and cross-validation methods, bootstrap, which samples n instances with replacement from the dataset, can be used to assess model accuracy.In addition to overall accuracy, investigators frequently report sensitivity and specificity meaning True Positive Rate (TPR) and True Negative Rate (TNR) respectively. Similarly, investigators sometimes report the false positive rate (FPR) as well as the false negative rate (FNR). However, these rates are ratios that fail to reveal their numerators and denominators. The total operating characteristic (TOC) is an effective method to express a model's diagnostic ability. TOC shows the numerators and denominators of the previously mentioned rates, thus TOC provides more information than the commonly used receiver operating characteristic (ROC) and ROC's associated area under the curve (AUC).\n\n\n== Ethics ==\n\nMachine learning poses a host of ethical questions. Systems that are trained on datasets collected with biases may exhibit these biases upon use (algorithmic bias), thus digitizing cultural prejudices. For example, in 1988, the UK's Commission for Racial Equality found that St. George's Medical School had been using a computer program trained from data of previous admissions staff and this program had denied nearly 60 candidates who were found to be either women or had non-European sounding names. Using job hiring data from a firm with racist hiring policies may lead to a machine learning system duplicating the bias by scoring job applicants by similarity to previous successful applicants. Another example includes predictive policing company Geolitica's predictive algorithm that resulted in \u201cdisproportionately high levels of over-policing in low-income and minority communities\u201d after being trained with historical crime data.While responsible collection of data and documentation of algorithmic rules used by a system is considered a critical part of machine learning, some researchers blame lack of participation and representation of minority population in the field of AI for machine learning's vulnerability to biases. In fact, according to research carried out by the Computing Research Association (CRA) in 2021, \u201cfemale faculty merely make up 16.1%\u201d of all faculty members who focus on AI among several universities around the world. Furthermore, among the group of \u201cnew U.S. resident AI PhD graduates,\u201d 45% identified as white, 22.4% as Asian, 3.2% as Hispanic, and 2.4% as African American, which further demonstrates a lack of diversity in the field of AI.AI can be well-equipped to make decisions in technical fields, which rely heavily on data and historical information. These decisions rely on objectivity and logical reasoning. Because human languages contain biases, machines trained on language corpora will necessarily also learn these biases.Other forms of ethical challenges, not related to personal biases, are seen in health care. There are concerns among health care professionals that these systems might not be designed in the public's interest but as income-generating machines. This is especially true in the United States where there is a long-standing ethical dilemma of improving health care, but also increasing profits. For example, the algorithms could be designed to provide patients with unnecessary tests or medication in which the algorithm's proprietary owners hold stakes. There is potential for machine learning in health care to provide professionals an additional tool to diagnose, medicate, and plan recovery paths for patients, but this requires these biases to be mitigated.\n\n\n== Hardware ==\nSince the 2010s, advances in both machine learning algorithms and computer hardware have led to more efficient methods for training deep neural networks (a particular narrow subdomain of machine learning) that contain many layers of non-linear hidden units. By 2019, graphic processing units (GPUs), often with AI-specific enhancements, had displaced CPUs as the dominant method of training large-scale commercial cloud AI. OpenAI estimated the hardware computing used in the largest deep learning projects from AlexNet (2012) to AlphaZero (2017), and found a 300,000-fold increase in the amount of compute required, with a doubling-time trendline of 3.4 months.\n\n\n=== Neuromorphic/Physical Neural Networks ===\nA physical neural network or Neuromorphic computer  is a type of artificial neural network in which an electrically adjustable material is used to emulate the function of a neural synapse. \"Physical\" neural network is used to emphasize the reliance on physical hardware used to emulate neurons as opposed to software-based approaches. More generally the term is applicable to other artificial neural networks in which a memristor or other electrically adjustable resistance material is used to emulate a neural synapse.\n\n\n=== Embedded Machine Learning ===\nEmbedded Machine Learning is a sub-field of machine learning, where the machine learning model is run on embedded systems with limited computing resources such as wearable computers, edge devices and microcontrollers. Running machine learning model in embedded devices removes the need for transferring and storing data on cloud servers for further processing, henceforth, reducing data breaches and privacy leaks happening because of transferring data, and also minimizes theft of intellectual properties, personal data and business secrets. Embedded Machine Learning could be applied through several techniques including hardware acceleration, using approximate computing, optimization of machine learning models and many more.\n\n\n== Software ==\nSoftware suites containing a variety of machine learning algorithms include the following:\n\n\n=== Free and open-source software ===\n\n\n=== Proprietary software with free and open-source editions ===\nKNIME\nRapidMiner\n\n\n=== Proprietary software ===\n\n\n== Journals ==\nJournal of Machine Learning Research\nMachine Learning\nNature Machine Intelligence\nNeural Computation\nIEEE Transactions on Pattern Analysis and Machine Intelligence\n\n\n== Conferences ==\nAAAI Conference on Artificial Intelligence\nAssociation for Computational Linguistics (ACL)\nEuropean Conference on Machine Learning and Principles and Practice of Knowledge Discovery in Databases (ECML PKDD)\nInternational Conference on Computational Intelligence Methods for Bioinformatics and Biostatistics (CIBB)\nInternational Conference on Machine Learning (ICML)\nInternational Conference on Learning Representations (ICLR)\nInternational Conference on Intelligent Robots and Systems (IROS)\nConference on Knowledge Discovery and Data Mining (KDD)\nConference on Neural Information Processing Systems (NeurIPS)\n\n\n\n\n\n                           Answer: \n\n"}, {"role": "assistant", "content": "\ufeffMachine learning is a field of study in artificial intelligence which focuses on the development of algorithms to learn from data and perform tasks without explicit programming. The core objective of machine learning is to generalize from its experiences in order to accurately perform tasks on new, unseen examples.\n\nTom M. Mitchell\u00a0provided a widely quoted, more formal definition of the algorithms studied in the machine learning field: \u201d A computer program is said to learn from experience E with respect to some task T and some performance measure P if its\u2019 performance on T, as measured by P, improves with experience E.\u201d \n\nAs an example suppose that you have an email program that watches which meals you do or do not value spam, and based on that learns how to better filter spam. What is the task T in this setting? In this case, T would be task of classifying emails as spam or not spam. The experience E would be the act of the program watching you labels spam emails as spam or not spam. The performance measure P would be the numbers of emails correctly marked as spam or not spam.\n\nMachine learning approaches are traditionally divided into three broad categories, which correspond to learning paradigms, depending on the nature of the \"signal\" or \"feedback\" available to the learning system. \n\nThere are several different machine learning algorithms, but the main two types are called supervised and unsupervised learning algorithms.\n\nIn supervised learning, the machine is taught to perform a task. The computer is presented with example inputs and their desired outputs, given by a \"teacher\", and the goal is to learn a general rule that maps inputs to outputs. \n\nIn unsupervised learning, the model is left to learn by itself. Unlabeled input data is given to the learning algorithm, leaving it on its own to find structure in its input. Unsupervised learning can be a goal in itself (discovering hidden patterns in data) or a means towards an end (feature learning). \n\nBoth reinforcement learning and recommender systems are other types of machine learning that will be talked about later, however, the two most used types of algorithms are supervised and supervised learning\n\nAnother thing that this course will focus on is providing practical advice for applying machine learning algorithms effectively. Teaching about learning algorithms Is like giving a set of tools, and equally important is teaching how to apply these tools.\n\nThe course aims to develop students' skills in designing and building robust machine learning and AI systems. By applying machine learning best practices, practitioners can increase their chances of success and avoid wasted effort.\n"}]}
{"messages": [{"role": "system", "content": "\n                      Please write a 500 word summary on the following Transcript based on the Reading Material.\n                      Pick relevant information from the Reading Material and add it to the summary of the Transcript.\n                      The Summary should be only of the Transcript with a few information from the Reading Material.\n                      If you are not sure of the summary, say 'I don't know'.\n    "}, {"role": "user", "content": "Transcript: in this video we'll talk about the second major type of machine learning problem called unsupervised learning in the last video we talked about supervised learning back then we count data sets that look like this where each example was labeled either as a positive or a negative example whether it was a benign or a malignant tumor so for each example in supervised learning we were told explicitly what is the so-called right answer whether it's benign or malignant in unsupervised learning we're given data that looks different in green data that looks like this that doesn't have any labels or that of all has the same label or really no labels so we're given the data set and we're not told what to do a bit and we're not told what each data point is instead we just told here is a data set can you find some structure in the data given this data set an unsupervised learning algorithm might decide that the data lives in two different clusters so there's one cluster and there's a different cluster and the unsupervised learning algorithm may break this data into these two separate clusters so this is called a clustering algorithm and this turns out to be used in many places one example where clustering is used is in Google News and if you're not seeing this before you can actually go to this URL news.google.com to take a look what Google News does is every day it goes and looks at tens of thousands or hundreds of thousands of new stories on the web and it groups them into cohesive news stories for example let's look here the URLs here link to different news stories about the BP oil well story so let's say I click on one of these URLs and I click on one of these URLs what I'll get to is a web page like this here's a Wall Street Journal article about you know the BP oil wells still stories of BP cause Macondo which is the name of the un-- scope and if you click on a different URL from that group then you might get the different story she's a CNN story about again the BP oil spill and if you click on get a third link that you might get a different story here's the UK Guardian story about the BP oil spill so a Google News is done is looked at tens of thousands of new stories and automatically cluster them together so the new stories that are all about the same topic get to display together it turns out that clustering algorithms and unsupervised learning algorithms are used in many other problems as well here's one on understanding genomics here's an example of DNA microarray data the idea is you have a group of different individuals and for each of them you measure how much they do or do not have a certain gene technically you measure how much of certain genes are expressed so these colors red green gray and so on they show the degree to which different individuals do or do not have a specific gene and what you can do is then run a clustering algorithm to group individuals into different categories onto different types of people so this is unsupervised learning because we're not telling the algorithm in advance that you know these are Taiwan people those are type 2 persons those are type 3 persons and so on and instead what we're saying is you know here's a bunch of data I don't know what's in this data I don't know who's in what type I didn't know what the different types of people are but can you automatically find structure in the data from you automatically cluster the individuals into these types that I don't know in advance because we're not giving them the algorithm the right answer for the examples in my data set this is unsupervised learning unsupervised learning or clustering is used for a bunch of other applications is used to organize large computer clusters I had some friends looking at large data centers that there's large computer clusters and trying to figure out which machines tend to work together and if you can put those machines together you can make your data center work more efficiently your second application on social network analysis so given knowledge about which friends you email the most or given your Facebook friends or your Google+ Circles can we automatically identify which are cohesive groups of friends so what are groups of people that all know each other market segmentation many companies have huge databases of customer information so can you look at this customer data set and automatically discover market segments and automatically group your customers into different market segments so that you can automatically and more efficiently sell or market to your different market segments together again this is unsupervised learning because we have all this customer data but we don't know in advance what are the market segments and for the customers in our data set you know we don't know in advance who is in microsecond one who is in market segments two and so on but we have to let the algorithm discover all this just from the data finally it turns out that unsupervised learning is also used for surprisingly astronomical data analysis and these clustering algorithms give surprisingly interesting or useful theories of how galaxies are formed all these are examples of clustering which is just one type of unsupervised learning let me tell you about another one I'm going to tell you about the cocktail party problem so we've been the cocktail parties before right where you can imagine there's a party room for people all sitting around all talk at the same time and there are all these overlapping voices because everyone's talked in the same time and it's almost hard to hear the person in front of you so maybe have a cocktail party with two people two people talking the same time and someone small cocktail party and we're going to put two microphones in the room so there are microphones and because these microphones are at two different distances from the speaker's each microphone records a different combination of these two speakers voices maybe speaker one is a little louder in microphone one and maybe speaker two is a little bit louder in microphone two because you know the two microphones are at different positions relative to the 2 speakers but each microphone recalls an overlapping combination of both speakers voices so here's an here's an actual recording two speakers recorded by a researcher let me play for you the first one the first microphone sounds like one two three one my head alright maybe not the most interesting cocktail party is two people counting from one to ten in two languages that you know there you go what you just heard was the first microphone recording here's the second recording you see the names so we can do is take these two microphone recordings and give them to an unsupervised learning algorithm called the cocktail party algorithm and tell the algorithm find structure in this data for me and what the album will do is listen to these audio recordings and say you know it sounds like the two audio recordings that being added together or there being some together to produce these recordings that we had moreover what the cocktail party algorithm will do is separate out these two audio sources that were being added or being summed together to form our recordings and in fact here's the first output of the cocktail party algorithm one two three oh five six seven eight nine ten so separated out the English voice in one of us in one of the recordings and here's the second output uno dos tres cuatro Cinco seis fifty all true really it is not too bad to give you one more example here's another recording of another similar situation here's the first microphone okay so the poor guys gone home from the cocktail party and he's now studying the route by himself talking to his video he has the second microphone recording when you give these two microphone recording to the same algorithm what it does is again say you know it sounds like there are two audio sources and moreover the album says here is the first of the audio sources I found one two three four five six seven eight nine ten so that wasn't perfect it got the boys but they'll also go up into the music in there then here's the second output of the algorithm II not too bad in that second output and managed to get rid of the voice entirely and just Co cleaned up the music and got rid of the counting from one to ten so you might look at an unsupervised learning algorithm like this and ask how complicated is it to implement this it seems like in order to you know build this application it seems like to do this audio processing you need to write a ton of code or maybe link into like a bunch of C++ or Java libraries to process audio it seems like an really complicated program to do this audio separating out audio and so on it turns out the algorithm to do what you just heard that can be done with one line of code shown right here it did take me searches a long time to come up with this line of code so I'm not saying this is an easy problem but it turns out that we use the right programming environment many learning algorithms can be really short programs so this is also why in this class we're going to use the octave programming environment octave is free open source software and using a tool like octave or MATLAB many learning algorithms become just a few lines of code to implement later in this class also teach you a little bit about how to use octave and you'll be implementing some of these albums in octave or if you have MATLAB you can use that - turns out that Silicon Valley for a lot of machine learning algorithms what we do is first prototype our software in octave because software that octave makes it incredibly fast implement these learning algorithms here are each of these functions like for example the SVD function that sends the singular value decomposition but that turns out to be a linear algebra routine that is just built into octave if you were trying to do this a C++ or Java this would be many many lines of code linking complex C++ or Java libraries so you can implement this stuff in C++ or Java or Python there's just much more complicated to use to do some of those languages what I've seen after having taught machine learning for almost about a decade now is that you learn much faster if you use octave as your programming environment and if you use octave as your learning tool and as your prototyping tool I'll let you learn and prototype learning rooms much more quickly and in fact what many people will do in the large Silicon Valley companies is in fact use an algorithm like octave to first prototype the learning algorithm and only after you've gotten to where and then you migrate it to C++ or Java or whatever it turns out that by doing things this way you can often get your algorithm to work much faster than if you were starting out in C++ so I know that this instruct as an instructor I get to say trust me on this one only a finite number of times but for those of you who have never used these octave type programming environments before I'm going to answer there trust me on this one and say that you you will I think your time when you develop a time is one of the most valuable resources and having seen lots of people do this I think you as a machine learning researcher or machine learning developer will be much more productive if you learn to stuff in prototype to stuff in octave and in some of the language finally to wrap up this video have one quick review question for you we talked about unsupervised learning which is the learning setting where you give the algorithm a ton of data and just ask it to find structure in the data for us of the following four examples which ones which of these four do you think would be an unsupervised learning out algorithm as opposed to a supervised learning problem for each of the four check boxes on the Left check the ones or which you think of unsupervised learning algorithm would be appropriate and then click the button on the lower right to check your answer so when the video pauses please answer the question on the slide so hopefully remember the spam filter problem if you have labeled data you know with of spam and non-spam email we treat this as a supervised learning problem the new story example that's exactly the Google News example that we saw in this video we saw how you can use a clustering algorithm to cluster news articles together so that's unsurprising learning the market segmentation example I talked a little bit earlier do that as an unsupervised learning problem because I'm just going to give my from data and ask you to discover market segments automatically and the final example diabetes well that's actually just like our breast cancer example from the last video only instead of you know good and bad cancer tumors or benign and malignant tumors we instead have have diabetes or not and so we will use that as a supervised we will solve that as a supervised learning problem just like we did for the breast tumor data so that's it for unsupervised learning and in the next video we'll delve more into specific learning algorithms and start to talk about just how these algorithms work and how we can how you can go about implementing them\n\n\n                           Reading Material: Unsupervised learning is a method in machine learning where, in contrast to supervised learning, algorithms learn patterns exclusively from unlabeled data.  The hope is that through mimicry, which is an important mode of learning in people, the machine is forced to build a concise representation of its world and then generate imaginative content from it.\nOther methods in the supervision spectrum are Reinforcement Learning where the machine is given only a numerical performance score as guidance, and  Weak or Semi supervision where a small portion of the data is tagged, and  Self Supervision.\n\n\n== Neural networks ==\n\n\n=== Tasks vs. methods ===\nNeural network tasks are often categorized as discriminative (recognition) or generative (imagination).  Often but not always, discriminative tasks use supervised methods and generative tasks use unsupervised (see Venn diagram); however, the separation is very hazy.  For example, object recognition favors supervised learning but unsupervised learning can also cluster objects into groups.  Furthermore, as progress marches onward some tasks employ both methods, and some tasks swing from one to another.  For example, image recognition started off as heavily supervised, but became hybrid by employing unsupervised pre-training, and then moved towards supervision again with the advent of dropout, ReLU, and adaptive learning rates.\n\n\n=== Training ===\nDuring the learning phase, an unsupervised network tries to mimic the data it's given and uses the error in its mimicked output to correct itself (i.e. correct its weights and biases). Sometimes the error is expressed as a low probability that the erroneous output occurs, or it might be expressed as an unstable high energy state in the network.\nIn contrast to supervised methods' dominant use of backpropagation, unsupervised learning also employs other methods  including:  Hopfield learning rule, Boltzmann learning rule, Contrastive Divergence, Wake Sleep, Variational Inference, Maximum Likelihood, Maximum A Posteriori, Gibbs Sampling, and backpropagating reconstruction errors or hidden state reparameterizations. See the table below for more details.\n\n\n=== Energy ===\nAn energy function is a macroscopic measure of a network's activation state.  In Boltzmann machines, it plays the role of the Cost function.  This analogy with physics is inspired by Ludwig Boltzmann's analysis of a gas' macroscopic energy from the microscopic probabilities of particle motion \n  \n    \n      \n        p\n        \u221d\n        \n          e\n          \n            \u2212\n            E\n            \n              /\n            \n            k\n            T\n          \n        \n      \n    \n    {\\displaystyle p\\propto e^{-E/kT}}\n  , where k is the Boltzmann constant and T is temperature. In the RBM network the relation is \n  \n    \n      \n        p\n        =\n        \n          e\n          \n            \u2212\n            E\n          \n        \n        \n          /\n        \n        Z\n      \n    \n    {\\displaystyle p=e^{-E}/Z}\n  , where \n  \n    \n      \n        p\n      \n    \n    {\\displaystyle p}\n   and \n  \n    \n      \n        E\n      \n    \n    {\\displaystyle E}\n   vary over every possible activation pattern and \n  \n    \n      \n        \n          \n            Z\n            =\n            \n              \u2211\n              \n                \n                  \n                    All Patterns\n                  \n                \n              \n            \n            \n              e\n              \n                \u2212\n                E\n                (\n                \n                  pattern\n                \n                )\n              \n            \n          \n        \n      \n    \n    {\\displaystyle \\textstyle {Z=\\sum _{\\scriptscriptstyle {\\text{All Patterns}}}e^{-E({\\text{pattern}})}}}\n  . To be more precise, \n  \n    \n      \n        p\n        (\n        a\n        )\n        =\n        \n          e\n          \n            \u2212\n            E\n            (\n            a\n            )\n          \n        \n        \n          /\n        \n        Z\n      \n    \n    {\\displaystyle p(a)=e^{-E(a)}/Z}\n  , where \n  \n    \n      \n        a\n      \n    \n    {\\displaystyle a}\n   is an activation pattern of all neurons (visible and hidden). Hence, some early neural networks bear the name Boltzmann Machine.  Paul Smolensky calls \n  \n    \n      \n        \u2212\n        E\n        \n      \n    \n    {\\displaystyle -E\\,}\n   the Harmony. A network seeks low energy which is high Harmony.\n\n\n=== Networks ===\nThis table shows connection diagrams of various unsupervised networks, the details of which will be given in the section Comparison of Networks.  Circles are neurons and edges between them are connection weights.  As network design changes, features are added on to enable new capabilities or removed to make learning faster.  For instance, neurons change between deterministic (Hopfield) and stochastic (Boltzmann) to allow robust output, weights are removed within a layer (RBM) to hasten learning, or connections are allowed to become asymmetric (Helmholtz).\n\nOf the networks bearing people's names, only Hopfield worked directly with neural networks.  Boltzmann and Helmholtz came before artificial neural networks, but their work in physics and physiology inspired the analytical methods that were used.\n\n\n=== History ===\n\n\n=== Specific Networks ===\nHere, we highlight some characteristics of select networks.  The details of each are given in the comparison table below. \n\nHopfield Network\nFerromagnetism inspired Hopfield networks.  A neuron correspond to an iron domain with binary magnetic moments Up and Down, and neural connections correspond to the domain's influence on each other.  Symmetric connections enable a global energy formulation. During inference the network updates each state using the standard activation step function. Symmetric weights and the right energy functions guarantees convergence to a stable activation pattern.  Asymmetric weights are difficult to analyze.  Hopfield nets are used as Content Addressable Memories (CAM).\n\nBoltzmann Machine\nThese are stochastic Hopfield nets. Their state value is sampled from this pdf as follows: suppose a binary neuron fires with the Bernoulli probability p(1) = 1/3 and rests with p(0) = 2/3. One samples from it by taking a uniformly distributed random number y, and plugging it into the inverted cumulative distribution function, which in this case is the step function thresholded at 2/3. The inverse function = { 0 if x <= 2/3, 1 if x > 2/3 }.\n\nSigmoid Belief Net\nIntroduced by Radford Neal in 1992, this network applies ideas from probabilistic graphical models to neural networks.  A key difference is that nodes in graphical models have pre-assigned meanings, whereas Belief Net neurons' features are determined after training. The network is a sparsely connected directed acyclic graph composed of binary stochastic neurons.  The learning rule comes from Maximum Likelihood on p(X):  \u0394wij \n  \n    \n      \n        \u221d\n      \n    \n    {\\displaystyle \\propto }\n   sj * (si - pi), where pi = 1 / ( 1 + eweighted inputs into neuron i ).  sj's are activations from an unbiased sample of the posterior distribution and this is problematic due to the Explaining Away problem raised by Judea Perl.  Variational Bayesian methods uses a surrogate posterior and blatantly disregard this complexity.\n\nDeep Belief Network\nIntroduced by Hinton, this network is a hybrid of RBM and Sigmoid Belief Network.  The top 2 layers is an RBM and the second layer downwards form a sigmoid belief network.  One trains it by the stacked RBM method and then throw away the recognition weights below the top RBM.  As of 2009, 3-4 layers seems to be the optimal depth.\n\nHelmholtz machine\nThese are early inspirations for the Variational Auto Encoders. Its 2 networks combined into one\u2014forward weights operates recognition and backward weights implements imagination. It is perhaps the first network to do both. Helmholtz did not work in machine learning but he inspired the view of \"statistical inference engine whose function is to infer probable causes of sensory input\". the stochastic binary neuron outputs a probability that its state is 0 or 1. The data input is normally not considered a layer, but in the Helmholtz machine generation mode, the data layer receives input from the middle layer and has separate weights for this purpose, so it is considered a layer. Hence this network has 3 layers.\n\nVariational autoencoder\nThese are inspired by Helmholtz machines and combines probability network with neural networks. An Autoencoder is a 3-layer CAM network, where the middle layer is supposed to be some internal representation of input patterns. The encoder neural network is a probability distribution q\u03c6(z given x) and the decoder network is p\u03b8(x given z). The weights are named phi & theta rather than W and V as in Helmholtz\u2014a cosmetic difference. These 2 networks here can be fully connected, or use another NN scheme.\n\n\n=== Comparison of networks ===\n\n\n=== Hebbian Learning, ART, SOM ===\nThe classical example of unsupervised learning in the study of neural networks is Donald Hebb's principle, that is, neurons that fire together wire together. In Hebbian learning, the connection is reinforced irrespective of an error, but is exclusively a function of the coincidence between action potentials between the two neurons. A similar version that modifies synaptic weights takes into account the time between the action potentials (spike-timing-dependent plasticity or STDP). Hebbian Learning has been hypothesized to underlie a range of cognitive functions, such as pattern recognition and experiential learning.\nAmong neural network models, the self-organizing map (SOM) and adaptive resonance theory (ART) are commonly used in unsupervised learning algorithms. The SOM is a topographic organization in which nearby locations in the map represent inputs with similar properties. The ART model allows the number of clusters to vary with problem size and lets the user control the degree of similarity between members of the same clusters by means of a user-defined constant called the vigilance parameter. ART networks are used for many pattern recognition tasks, such as automatic target recognition and seismic signal processing.\n\n\n== Probabilistic methods ==\nTwo of the main methods used in unsupervised learning are principal component and cluster analysis. Cluster analysis is used in unsupervised learning to group, or segment, datasets with shared attributes in order to extrapolate algorithmic relationships. Cluster analysis is a branch of machine learning that groups the data that has not been labelled, classified or categorized. Instead of responding to feedback, cluster analysis identifies commonalities in the data and reacts based on the presence or absence of such commonalities in each new piece of data. This approach helps detect anomalous data points that do not fit into either group.\nA central application of unsupervised learning is in the field of density estimation in statistics, though unsupervised learning encompasses many other domains involving summarizing and explaining data features. It can be contrasted with supervised learning by saying that whereas supervised learning intends to infer a conditional probability distribution  conditioned on the label  of input data; unsupervised learning intends to infer an a priori probability distribution .\n\n\n=== Approaches ===\nSome of the most common algorithms used in unsupervised learning include: (1) Clustering, (2) Anomaly detection, (3) Approaches for learning latent variable models. Each approach uses several methods as follows:\n\nClustering methods include: hierarchical clustering, k-means, mixture models, model-based clustering, DBSCAN, and OPTICS algorithm\nAnomaly detection methods include: Local Outlier Factor, and Isolation Forest\nApproaches for learning latent variable models such as Expectation\u2013maximization algorithm (EM), Method of moments, and Blind signal separation techniques (Principal component analysis, Independent component analysis, Non-negative matrix factorization, Singular value decomposition)\n\n\n=== Method of moments ===\nOne of the statistical approaches for unsupervised learning is the method of moments. In the method of moments, the unknown parameters (of interest) in the model are related to the moments of one or more random variables, and thus, these unknown parameters can be estimated given the moments. The moments are usually estimated from samples empirically. The basic moments are first and second order moments. For a random vector, the first order moment is the mean vector, and the second order moment is the covariance matrix (when the mean is zero). Higher order moments are usually represented using tensors which are the generalization of matrices to higher orders as multi-dimensional arrays.\nIn particular, the method of moments is shown to be effective in learning the parameters of latent variable models. Latent variable models are statistical models where in addition to the observed variables, a set of latent variables also exists which is not observed. A highly practical example of latent variable models in machine learning is the topic modeling which is a statistical model for generating the words (observed variables) in the document based on the topic (latent variable) of the document. In the topic modeling, the words in the document are generated according to different statistical parameters when the topic of the document is changed. It is shown that method of moments (tensor decomposition techniques) consistently recover the parameters of a large class of latent variable models under some assumptions.The Expectation\u2013maximization algorithm (EM) is also one of the most practical methods for learning latent variable models. However, it can get stuck in local optima, and it is not guaranteed that the algorithm will converge to the true unknown parameters of the model. In contrast, for the method of moments, the global convergence is guaranteed under some conditions.\n\n\n\n\n\n                           Answer: \n\n"}, {"role": "assistant", "content": "\ufeffUnsupervised learning is a method in machine learning where, in contrast to supervised learning, algorithms learn patterns exclusively from unlabeled data. The machine, rather than learning the labels of each datapoint, clusters the data into distinct groups according to similar patterns in their input data. More precisely, the hope is that through mimicry, which is an important mode of learning in people, the machine is forced to build a concise representation of its world and then generate imaginative content from it. This type of learning is best suited for cases where you have large sets of data that are hard to label. \n\nNeural network tasks are often categorized as discriminative (recognition) or generative. Often but not always, discriminative tasks use supervised methods and generative tasks use unsupervised; however, the separation is very hazy. For example, object recognition favors supervised learning but unsupervised learning can also cluster objects into groups.\n\nThere are several different use cases for unsupervised learning. Google News contains a vast amount of new stories everyday and groups them into cohesive news stories using clustering to categorize news stories based on content. Unsupervised learning aids in understanding genomics by identifying patterns in gene expression data. Other applications include organizing computer clusters, social network analysis, market segmentation, and astronomical data analysis.\n\nAs an example of how unsupervised learning works, we present the cocktail party algorithm, which separates audio sources from single recordings without prior knowledge of the individual voices. Take an example where there are two sources occurring at once during a recording The unsupervised learning algorithm should look at recording and should discriminate the audio into two distinct clusters, each one matched with one of the audio sources. From there, we can then extract the different clusters and now we have a way to extract overlapped audio voices from a recording.\n\nWhile this algorithm may seem long and complicated, the cocktail party algorithm can be done in one line of code using a proper programming environment. For this reason, this course will be using Octave, which is a free open-source programming environment that allows for the building of machine learning algorithms to be done in just a few lines of code. It is for this reason that people will first prototype their models on programming such as Octave since they are fast and easy to build. Only after successfully building in Octave do developers migrate to other languages.\n"}]}
{"messages": [{"role": "system", "content": "\n                      Please write a 500 word summary on the following Transcript based on the Reading Material.\n                      Pick relevant information from the Reading Material and add it to the summary of the Transcript.\n                      The Summary should be only of the Transcript with a few information from the Reading Material.\n                      If you are not sure of the summary, say 'I don't know'.\n    "}, {"role": "user", "content": "Transcript: Hi, I\u2019m Carrie Anne and welcome to CrashCourse Computer Science! As we\u2019ve discussed throughout the series, computers have come a long way from mechanical devices capable of maybe one calculation per second, to CPUs running at kilohertz and megahertz speeds. The device you\u2019re watching this video on right now is almost certainly running at Gigahertz speeds - that\u2019s billions of instructions executed every second. Which, trust me, is a lot of computation! In the early days of electronic computing, processors were typically made faster by improving the switching time of the transistors inside the chip - the ones that make up all the logic gates, ALUs and other stuff we\u2019ve talked about over the past few episodes. But just making transistors faster and more efficient only went so far, so processor designers have developed various techniques to boost performance allowing not only simple instructions to run fast, but also performing much more sophisticated operations. INTRO Last episode, we created a small program for our CPU that allowed us to divide two numbers. We did this by doing many subtractions in a row... so, for example, 16 divided by 4 could be broken down into the smaller problem of 16 minus 4, minus 4, minus 4, minus 4. When we hit zero, or a negative number, we knew that we we\u2019re done. But this approach gobbles up a lot of clock cycles, and isn\u2019t particularly efficient. So most computer processors today have divide as one of the instructions that the ALU can perform in hardware. Of course, this extra circuitry makes the ALU bigger and more complicated to design, but also more capable - a complexity-for-speed tradeoff that has been made many times in computing history. For instance, modern computer processors now have special circuits for things like graphics operations, decoding compressed video, and encrypting files - all of which are operations that would take many many many clock cycles to perform with standard operations. You may have even heard of processors with MMX, 3DNow!, or SSE. These are processors with additional, fancy circuits that allow them to execute additional, fancy instructions - for things like gaming and encryption. These extensions to the instruction set have grown, and grown over time, and once people have written programs to take advantage of them, it\u2019s hard to remove them. So instruction sets tend to keep getting larger and larger keeping all the old opcodes around for backwards compatibility. The Intel 4004, the first truly integrated CPU, had 46 instructions - which was enough to build a fully functional computer. But a modern computer processor has thousands of different instructions, which utilize all sorts of clever and complex internal circuitry. Now, high clock speeds and fancy instruction sets lead to another problem - getting data in and out of the CPU quickly enough. It\u2019s like having a powerful steam locomotive, but no way to shovel in coal fast enough. In this case, the bottleneck is RAM. RAM is typically a memory module that lies outside the CPU. This means that data has to be transmitted to and from RAM along sets of data wires, called a bus. This bus might only be a few centimeters long, and remember those electrical signals are traveling near the speed of light, but when you are operating at gigahertz speeds \u2013 that\u2019s billionths of a second \u2013 even this small delay starts to become problematic. It also takes time for RAM itself to lookup the address, retrieve the data, and configure itself for output. So a \u201cload from RAM\u201d instruction might take dozens of clock cycles to complete, and during this time the processor is just sitting there idly waiting for the data. One solution is to put a little piece of RAM right on the CPU -- called a cache. There isn\u2019t a lot of space on a processor\u2019s chip, so most caches are just kilobytes or maybe megabytes in size, where RAM is usually gigabytes. Having a cache speeds things up in a clever way. When the CPU requests a memory location from RAM, the RAM can transmit not just one single value, but a whole block of data. This takes only a little bit more time than transmitting a single value, but it allows this data block to be saved into the cache. This tends to be really useful because computer data is often arranged and processed sequentially. For example, let say the processor is totalling up daily sales for a restaurant. It starts by fetching the first transaction from RAM at memory location 100. The RAM, instead of sending back just that one value, sends a block of data, from memory location 100 through 200, which are then all copied into the cache. Now, when the processor requests the next transaction to add to its running total, the value at address 101, the cache will say \u201cOh, I\u2019ve already got that value right here, so I can give it to you right away!\u201d And there\u2019s no need to go all the way to RAM. Because the cache is so close to the processor, it can typically provide the data in a single clock cycle -- no waiting required. This speeds things up tremendously over having to go back and forth to RAM every single time. When data requested in RAM is already stored in the cache like this it\u2019s called a cache hit, and if the data requested isn\u2019t in the cache, so you have to go to RAM, it\u2019s a called a cache miss. The cache can also be used like a scratch space, storing intermediate values when performing a longer, or more complicated calculation. Continuing our restaurant example, let\u2019s say the processor has finished totalling up all of the sales for the day, and wants to store the result in memory address 150. Like before, instead of going back all the way to RAM to save that value, it can be stored in cached copy, which is faster to save to, and also faster to access later if more calculations are needed. But this introduces an interesting problem -- the cache\u2019s copy of the data is now different to the real version stored in RAM. This mismatch has to be recorded, so that at some point everything can get synced up. For this purpose, the cache has a special flag for each block of memory it stores, called the dirty bit -- which might just be the best term computer scientists have ever invented. Most often this synchronization happens when the cache is full, but a new block of memory is being requested by the processor. Before the cache erases the old block to free up space, it checks its dirty bit, and if it\u2019s dirty, the old block of data is written back to RAM before loading in the new block. Another trick to boost cpu performance is called instruction pipelining. Imagine you have to wash an entire hotel\u2019s worth of sheets, but you\u2019ve only got one washing machine and one dryer. One option is to do it all sequentially: put a batch of sheets in the washer and wait 30 minutes for it to finish. Then take the wet sheets out and put them in the dryer and wait another 30 minutes for that to finish. This allows you to do one batch of sheets every hour. Side note: if you have a dryer that can dry a load of laundry in 30 minutes, please tell me the brand and model in the comments, because I\u2019m living with 90 minute dry times, minimum. But, even with this magic clothes dryer, you can speed things up even more if you parallelize your operation. As before, you start off putting one batch of sheets in the washer. You wait 30 minutes for it to finish. Then you take the wet sheets out and put them in the dryer. But this time, instead of just waiting 30 minutes for the dryer to finish, you simultaneously start another load in the washing machine. Now you\u2019ve got both machines going at once. Wait 30 minutes, and one batch is now done, one batch is half done, and another is ready to go in. This effectively doubles your throughput. Processor designs can apply the same idea. In episode 7, our example processor performed the fetch-decode-execute cycle sequentially and in a continuous loop: Fetch-decode-execute, fetch-decode-execute, fetch-decode-execute, and so on. This meant our design required three clock cycles to execute one instruction. But each of these stages uses a different part of the CPU, meaning there is an opportunity to parallelize! While one instruction is getting executed, the next instruction could be getting decoded, and the instruction beyond that fetched from memory. All of these separate processes can overlap so that all parts of the CPU are active at any given time. In this pipelined design, an instruction is executed every single clock cycle which triples the throughput. But just like with caching this can lead to some tricky problems. A big hazard is a dependency in the instructions. For example, you might fetch something that the currently executing instruction is just about to modify, which means you\u2019ll end up with the old value in the pipeline. To compensate for this, pipelined processors have to look ahead for data dependencies, and if necessary, stall their pipelines to avoid problems. High end processors, like those found in laptops and smartphones, go one step further and can dynamically reorder instructions with dependencies in order to minimize stalls and keep the pipeline moving, which is called out-of-order execution. As you might imagine, the circuits that figure this all out are incredibly complicated. Nonetheless, pipelining is tremendously effective and almost all processors implement it today. Another big hazard are conditional jump instructions -- we talked about one example, a JUMP NEGATIVE, last episode. These instructions can change the execution flow of a program depending on a value. A simple pipelined processor will perform a long stall when it sees a jump instruction, waiting for the value to be finalized. Only once the jump outcome is known, does the processor start refilling its pipeline. But, this can produce long delays, so high-end processors have some tricks to deal with this problem too. Imagine an upcoming jump instruction as a fork in a road - a branch. Advanced CPUs guess which way they are going to go, and start filling their pipeline with instructions based off that guess \u2013 a technique called speculative execution. When the jump instruction is finally resolved, if the CPU guessed correctly, then the pipeline is already full of the correct instructions and it can motor along without delay. However, if the CPU guessed wrong, it has to discard all its speculative results and perform a pipeline flush - sort of like when you miss a turn and have to do a u-turn to get back on route, and stop your GPS\u2019s insistent shouting. To minimize the effects of these flushes, CPU manufacturers have developed sophisticated ways to guess which way branches will go, called branch prediction. Instead of being a 50/50 guess, today\u2019s processors can often guess with over 90% accuracy! In an ideal case, pipelining lets you complete one instruction every single clock cycle, but then superscalar processors came along which can execute more than one instruction per clock cycle. During the execute phase even in a pipelined design, whole areas of the processor might be totally idle. For example, while executing an instruction that fetches a value from memory, the ALU is just going to be sitting there, not doing a thing. So why not fetch-and-decode several instructions at once, and whenever possible, execute instructions that require different parts of the CPU all at the same time!? But we can take this one step further and add duplicate circuitry for popular instructions. For example, many processors will have four, eight or more identical ALUs, so they can execute many mathematical instructions all in parallel! Ok, the techniques we\u2019ve discussed so far primarily optimize the execution throughput of a single stream of instructions, but another way to increase performance is to run several streams of instructions at once with multi-core processors. You might have heard of dual core or quad core processors. This means there are multiple independent processing units inside of a single CPU chip. In many ways, this is very much like having multiple separate CPUs, but because they\u2019re tightly integrated, they can share some resources, like cache, allowing the cores to work together on shared computations. But, when more cores just isn\u2019t enough, you can build computers with multiple independent CPUs! High end computers, like the servers streaming this video from YouTube\u2019s datacenter, often need the extra horsepower to keep it silky smooth for the hundreds of people watching simultaneously. Two- and four-processor configuration are the most common right now, but every now and again even that much processing power isn\u2019t enough. So we humans get extra ambitious and build ourselves a supercomputer! If you\u2019re looking to do some really monster calculations \u2013 like simulating the formation of the universe - you\u2019ll need some pretty serious compute power. A few extra processors in a desktop computer just isn\u2019t going to cut it. You\u2019re going to need a lot of processors. No.. no... even more than that. A lot more! When this video was made, the world\u2019s fastest computer was located in The National Supercomputing Center in Wuxi, China. The Sunway TaihuLight contains a brain-melting 40,960 CPUs, each with 256 cores! Thats over ten million cores in total... and each one of those cores runs at 1.45 gigahertz. In total, this machine can process 93 Quadrillion -- that\u2019s 93 million-billions -- floating point math operations per second, knows as FLOPS. And trust me, that\u2019s a lot of FLOPS!! No word on whether it can run Crysis at max settings, but I suspect it might. So long story short, not only have computer processors gotten a lot faster over the years, but also a lot more sophisticated, employing all sorts of clever tricks to squeeze out more and more computation per clock cycle. Our job is to wield that incredible processing power to do cool and useful things. That\u2019s the essence of programming, which we\u2019ll start discussing next episode. See you next week.\n\n\n                           Reading Material: In electronics, computer science and computer engineering, microarchitecture, also called computer organization and sometimes abbreviated as \u00b5arch or uarch, is the way a given instruction set architecture (ISA) is implemented in a particular processor. A given ISA may be implemented with different microarchitectures; implementations may vary due to different goals of a given design or due to shifts in technology.Computer architecture is the combination of microarchitecture and instruction set architecture.\n\n\n== Relation to instruction set architecture ==\nThe ISA is roughly the same as the programming model of a processor as seen by an assembly language programmer or compiler writer. The ISA includes the instructions, execution model, processor registers, address and data formats among other things. The microarchitecture includes the constituent parts of the processor and how these interconnect and interoperate to implement the ISA.\nThe microarchitecture of a machine is usually represented as (more or less detailed) diagrams that describe the interconnections of the various microarchitectural elements of the machine, which may be anything from single gates and registers, to complete arithmetic logic units (ALUs) and even larger elements. These diagrams generally separate the datapath (where data is placed) and the control path (which can be said to steer the data).The person designing a system usually draws the specific microarchitecture as a kind of data flow diagram. Like a block diagram, the microarchitecture diagram shows microarchitectural elements such as the arithmetic and logic unit and the register file as a single schematic symbol. Typically, the diagram connects those elements with arrows, thick lines and thin lines to distinguish between three-state buses (which require a three-state buffer for each device that drives the bus), unidirectional buses (always driven by a single source, such as the way the address bus on simpler computers is always driven by the memory address register), and individual control lines. Very simple computers have a single data bus organization \u2013  they have a single three-state bus. The diagram of more complex computers usually shows multiple three-state buses, which help the machine do more operations simultaneously.\nEach microarchitectural element is in turn represented by a schematic describing the interconnections of logic gates used to implement it. Each logic gate is in turn represented by a circuit diagram describing the connections of the transistors used to implement it in some particular logic family. Machines with different microarchitectures may have the same instruction set architecture, and thus be capable of executing the same programs. New microarchitectures and/or circuitry solutions, along with advances in semiconductor manufacturing, are what allows newer generations of processors to achieve higher performance while using the same ISA.\nIn principle, a single microarchitecture could execute several different ISAs with only minor changes to the microcode.\n\n\n== Aspects ==\nThe pipelined datapath is the most commonly used datapath design in microarchitecture today. This technique is used in most modern microprocessors, microcontrollers, and DSPs. The pipelined architecture allows multiple instructions to overlap in execution, much like an assembly line. The pipeline includes several different stages which are fundamental in microarchitecture designs. Some of these stages include instruction fetch, instruction decode, execute, and write back. Some architectures include other stages such as memory access. The design of pipelines is one of the central microarchitectural tasks.\nExecution units are also essential to microarchitecture. Execution units include arithmetic logic units (ALU), floating point units (FPU), load/store units, branch prediction, and SIMD. These units perform the operations or calculations of the processor. The choice of the number of execution units, their latency and throughput is a central microarchitectural design task. The size, latency, throughput and connectivity of memories within the system are also microarchitectural decisions.\nSystem-level design decisions such as whether or not to include peripherals, such as memory controllers, can be considered part of the microarchitectural design process. This includes decisions on the performance-level and connectivity of these peripherals.\nUnlike architectural design, where achieving a specific performance level is the main goal, microarchitectural design pays closer attention to other constraints. Since microarchitecture design decisions directly affect what goes into a system, attention must be paid to issues such as chip area/cost, power consumption, logic complexity, ease of connectivity, manufacturability, ease of debugging, and testability.\n\n\n== Microarchitectural concepts ==\n\n\n=== Instruction cycles ===\n\nTo run programs, all single- or multi-chip CPUs:\n\nRead an instruction and decode it\nFind any associated data that is needed to process the instruction\nProcess the instruction\nWrite the results outThe instruction cycle is repeated continuously until the power is turned off.\n\n\n=== Multicycle microarchitecture ===\nHistorically, the earliest computers were multicycle designs. The smallest, least-expensive computers often still use this technique. Multicycle architectures often use the least total number of logic elements and reasonable amounts of power. They can be designed to have deterministic timing and high reliability. In particular, they have no pipeline to stall when taking conditional branches or interrupts.  However, other microarchitectures often perform more instructions per unit time, using the same logic family.  When discussing \"improved performance,\" an improvement is often relative to a multicycle design.\nIn a multicycle computer, the computer does the four steps in sequence, over several cycles of the clock. Some designs can perform the sequence in two clock cycles by completing successive stages on alternate clock edges, possibly with longer operations occurring outside the main cycle. For example, stage one on the rising edge of the first cycle, stage two on the falling edge of the first cycle, etc.\nIn the control logic, the combination of cycle counter, cycle state (high or low) and the bits of the instruction decode register determine exactly what each part of the computer should be doing. To design the control logic, one can create a table of bits describing the control signals to each part of the computer in each cycle of each instruction. Then, this logic table can be tested in a software simulation running test code.  If the logic table is placed in a memory and used to actually run a real computer, it is called a microprogram. In some computer designs, the logic table is optimized into the form of combinational logic made from logic gates, usually using a computer program that optimizes logic. Early computers used ad-hoc logic design for control until Maurice Wilkes invented this tabular approach and called it microprogramming.\n\n\n=== Increasing execution speed ===\nComplicating this simple-looking series of steps is the fact that the memory hierarchy, which includes caching, main memory and non-volatile storage like hard disks (where the program instructions and data reside), has always been slower than the processor itself. Step (2) often introduces a lengthy (in CPU terms) delay while the data arrives over the computer bus. A considerable amount of research has been put into designs that avoid these delays as much as possible. Over the years, a central goal was to execute more instructions in parallel, thus increasing the effective execution speed of a program. These efforts introduced complicated logic and circuit structures. Initially, these techniques could only be implemented on expensive mainframes or supercomputers due to the amount of circuitry needed for these techniques. As semiconductor manufacturing progressed, more and more of these techniques could be implemented on a single semiconductor chip. See Moore's law.\n\n\n=== Instruction set choice ===\nInstruction sets have shifted over the years, from originally very simple to sometimes very complex (in various respects). In recent years, load\u2013store architectures, VLIW and EPIC types have been in fashion. Architectures that are dealing with data parallelism include SIMD and Vectors. Some labels used to denote classes of CPU architectures are not particularly descriptive, especially so the CISC label; many early designs retroactively denoted \"CISC\" are in fact significantly simpler than modern RISC processors (in several respects).\nHowever, the choice of instruction set architecture may greatly affect the complexity of implementing high-performance devices. The prominent strategy, used to develop the first RISC processors, was to simplify instructions to a minimum of individual semantic complexity combined with high encoding regularity and simplicity. Such uniform instructions were easily fetched, decoded and executed in a pipelined fashion and a simple strategy to reduce the number of logic levels in order to reach high operating frequencies; instruction cache-memories compensated for the higher operating frequency and inherently low code density while large register sets were used to factor out as much of the (slow) memory accesses as possible.\n\n\n=== Instruction pipelining ===\n\nOne of the first, and most powerful, techniques to improve performance is the use of instruction pipelining. Early processor designs would carry out all of the steps above for one instruction before moving onto the next. Large portions of the circuitry were left idle at any one step; for instance, the instruction decoding circuitry would be idle during execution and so on.\nPipelining improves performance by allowing a number of instructions to work their way through the processor at the same time. In the same basic example, the processor would start to decode (step 1) a new instruction while the last one was waiting for results. This would allow up to four instructions to be \"in flight\" at one time, making the processor look four times as fast. Although any one instruction takes just as long to complete (there are still four steps) the CPU as a whole \"retires\" instructions much faster.\nRISC makes pipelines smaller and much easier to construct by cleanly separating each stage of the instruction process and making them take the same amount of time\u2014one cycle. The processor as a whole operates in an assembly line fashion, with instructions coming in one side and results out the other. Due to the reduced complexity of the classic RISC pipeline, the pipelined core and an instruction cache could be placed on the same size die that would otherwise fit the core alone on a CISC design. This was the real reason that RISC was faster. Early designs like the SPARC and MIPS often ran over 10 times as fast as Intel and Motorola CISC solutions at the same clock speed and price.\nPipelines are by no means limited to RISC designs. By 1986 the top-of-the-line VAX implementation (VAX 8800) was a heavily pipelined design, slightly predating the first commercial MIPS and SPARC designs. Most modern CPUs (even embedded CPUs) are now pipelined, and microcoded CPUs with no pipelining are seen only in the most area-constrained embedded processors. Large CISC machines, from the VAX 8800 to the modern Pentium 4 and Athlon, are implemented with both microcode and pipelines. Improvements in pipelining and caching are the two major microarchitectural advances that have enabled processor performance to keep pace with the circuit technology on which they are based.\n\n\n=== Cache ===\n\nIt was not long before improvements in chip manufacturing allowed for even more circuitry to be placed on the die, and designers started looking for ways to use it. One of the most common was to add an ever-increasing amount of cache memory on-die. Cache is very fast and expensive memory. It can be accessed in a few cycles as opposed to many needed to \"talk\" to main memory. The CPU includes a cache controller which automates reading and writing from the cache. If the data is already in the cache it is accessed from there \u2013 at considerable time savings, whereas if it is not the processor is \"stalled\" while the cache controller reads it in.\nRISC designs started adding cache in the mid-to-late 1980s, often only 4 KB in total. This number grew over time, and typical CPUs now have at least 2 MB, while more powerful CPUs come with 4 or 6 or 12MB or even 32MB or more, with the most being 768MB in the newly released EPYC Milan-X line, organized in multiple levels of a memory hierarchy. Generally speaking, more cache means more performance, due to reduced stalling.\nCaches and pipelines were a perfect match for each other. Previously, it didn't make much sense to build a pipeline that could run faster than the access latency of off-chip memory. Using on-chip cache memory instead, meant that a pipeline could run at the speed of the cache access latency, a much smaller length of time. This allowed the operating frequencies of processors to increase at a much faster rate than that of off-chip memory.\n\n\n=== Branch prediction ===\n\nOne barrier to achieving higher performance through instruction-level parallelism stems from pipeline stalls and flushes due to branches. Normally, whether a conditional branch will be taken isn't known until late in the pipeline as conditional branches depend on results coming from a register. From the time that the processor's instruction decoder has figured out that it has encountered a conditional branch instruction to the time that the deciding register value can be read out, the pipeline needs to be stalled for several cycles, or if it's not and the branch is taken, the pipeline needs to be flushed. As clock speeds increase the depth of the pipeline increases with it, and some modern processors may have 20 stages or more. On average, every fifth instruction executed is a branch, so without any intervention, that's a high amount of stalling.\nTechniques such as branch prediction and speculative execution are used to lessen these branch penalties. Branch prediction is where the hardware makes educated guesses on whether a particular branch will be taken. In reality one side or the other of the branch will be called much more often than the other. Modern designs have rather complex statistical prediction systems, which watch the results of past branches to predict the future with greater accuracy. The guess allows the hardware to prefetch instructions without waiting for the register read. Speculative execution is a further enhancement in which the code along the predicted path is not just prefetched but also executed before it is known whether the branch should be taken or not. This can yield better performance when the guess is good, with the risk of a huge penalty when the guess is bad because instructions need to be undone.\n\n\n=== Superscalar ===\n\nEven with all of the added complexity and gates needed to support the concepts outlined above, improvements in semiconductor manufacturing soon allowed even more logic gates to be used.\nIn the outline above the processor processes parts of a single instruction at a time. Computer programs could be executed faster if multiple instructions were processed simultaneously. This is what superscalar processors achieve, by replicating functional units such as ALUs. The replication of functional units was only made possible when the die area of a single-issue processor no longer stretched the limits of what could be reliably manufactured. By the late 1980s, superscalar designs started to enter the market place.\nIn modern designs it is common to find two load units, one store (many instructions have no results to store), two or more integer math units, two or more floating point units, and often a SIMD unit of some sort. The instruction issue logic grows in complexity by reading in a huge list of instructions from memory and handing them off to the different execution units that are idle at that point. The results are then collected and re-ordered at the end.\n\n\n=== Out-of-order execution ===\n\nThe addition of caches reduces the frequency or duration of stalls due to waiting for data to be fetched from the memory hierarchy, but does not get rid of these stalls entirely. In early designs a cache miss would force the cache controller to stall the processor and wait. Of course there may be some other instruction in the program whose data is available in the cache at that point. Out-of-order execution allows that ready instruction to be processed while an older instruction waits on the cache, then re-orders the results to make it appear that everything happened in the programmed order. This technique is also used to avoid other operand dependency stalls, such as an instruction awaiting a result from a long latency floating-point operation or other multi-cycle operations.\n\n\n=== Register renaming ===\n\nRegister renaming refers to a technique used to avoid unnecessary serialized execution of program instructions because of the reuse of the same registers by those instructions. Suppose we have two groups of instruction that will use the same register. One set of instructions is executed first to leave the register to the other set, but if the other set is assigned to a different similar register, both sets of instructions can be executed in parallel (or) in series.\n\n\n=== Multiprocessing and multithreading ===\n\nComputer architects have become stymied by the growing mismatch in CPU operating frequencies and DRAM access times. None of the techniques that exploited instruction-level parallelism (ILP) within one program could make up for the long stalls that occurred when data had to be fetched from main memory. Additionally, the large transistor counts and high operating frequencies needed for the more advanced ILP techniques required power dissipation levels that could no longer be cheaply cooled. For these reasons, newer generations of computers have started to exploit higher levels of parallelism that exist outside of a single program or program thread.\nThis trend is sometimes known as throughput computing. This idea originated in the mainframe market where online transaction processing emphasized not just the execution speed of one transaction, but the capacity to deal with massive numbers of transactions. With transaction-based applications such as network routing and web-site serving greatly increasing in the last decade, the computer industry has re-emphasized capacity and throughput issues.\nOne technique of how this parallelism is achieved is through multiprocessing systems, computer systems with multiple CPUs. Once reserved for high-end mainframes and supercomputers, small-scale (2\u20138) multiprocessors servers have become commonplace for the small business market. For large corporations, large scale (16\u2013256) multiprocessors are common. Even personal computers with multiple CPUs have appeared since the 1990s.\nWith further transistor size reductions made available with semiconductor technology advances, multi-core CPUs have appeared where multiple CPUs are implemented on the same silicon chip. Initially used in chips targeting embedded markets, where simpler and smaller CPUs would allow multiple instantiations to fit on one piece of silicon. By 2005, semiconductor technology allowed dual high-end desktop CPUs CMP chips to be manufactured in volume. Some designs, such as Sun Microsystems' UltraSPARC T1 have reverted to simpler (scalar, in-order) designs in order to fit more processors on one piece of silicon.\nAnother technique that has become more popular recently is multithreading. In multithreading, when the processor has to fetch data from slow system memory, instead of stalling for the data to arrive, the processor switches to another program or program thread which is ready to execute. Though this does not speed up a particular program/thread, it increases the overall system throughput by reducing the time the CPU is idle.\nConceptually, multithreading is equivalent to a context switch at the operating system level. The difference is that a multithreaded CPU can do a thread switch in one CPU cycle instead of the hundreds or thousands of CPU cycles a context switch normally requires. This is achieved by replicating the state hardware (such as the register file and program counter) for each active thread.\nA further enhancement is simultaneous multithreading. This technique allows superscalar CPUs to execute instructions from different programs/threads simultaneously in the same cycle.\n\n\n\n\n\n                           Answer: \n\n"}, {"role": "assistant", "content": "\ufeffThe instruction set contains expensive operations like divide, graphics, operations, encryption, etc. are implemented into the ALU hardware which does make design harder, but makes the system more capable. This extra circuitry makes the ALU bigger and more complicated to design, but also more capable - a complexity-for-speed tradeoff that has been made many times in computing history. \n\nHigh clock speeds and fancy instructions set lead to another problem: getting data in and out of the CPU quickly off. In this case, the bottleneck is RAM as data between RAM and CPU has to travel through bus lines. One solution to this problem is by connecting a small piece of RAM onto the CPU, which we call the cache. By having a cache, the RAM can transmit not just one single value, but a whole block of data. Instead of going back and forth between RAM, we have a chunk of saved data that is much easier for the CPU to access. When the requested data from the RAM already exists on the cache, we call that a cache hit, whereas we call it a cache miss when the information we want to access is not on the cache. Cache can also be used as a scratch space for intermediary value when performing large computations. Generally speaking, more cache means more performance, due to reduced stalling. \n\nWith the implementation of the cache, we can also update the information much faster by changing the values in the cache rather than going back to the RAM, however, there now arises a different issue. Changes made to the data in cache are not replicated into RAM. The computer needs some way of knowing when the cache information is changed in order to change the information within RAM accordingly. The solution to this is a dirty bit. Each block of memory that the cache stores is given a flag known as the dirty bit which tells us whether we need to update the RAM data once we free the cache.\n\nAnother trick to boosting CPU performance is through instruction pipelining. Pipelining improves performance by allowing a number of instructions to work their way through the processor at the same time. We can utilize parallelization across the pipeline to improve throughput. Doing this allows us to better utilize the CPU to make sure we are doing as much work at once as possible. \n\nWith this method, then comes the issues of dependence between instructions. Pipelined processors have to look ahead for data dependencies, and if necessary, stall their pipelines to avoid problems. A technique to combat this is called out-of-order execution, in which we dynamically reorder instructions with dependencies in order to minimize stalls and keep the pipeline moving.\n\nAnother big hazard with pipelining are conditional jump operations, which change the execution flow of a program depending on a value. Rather than performing a long stall, high end processors perform what is called speculative execution, in which the processor guesses which way they are going to go, and start filling their pipeline with instructions based on that guess. If they make a wrong guess however, they have to flush the pipeline. To minimize these effects of flushes, branch prediction is done, where the hardware makes educated guesses on whether a particular branch will be taken \n\nOutside of the techniques, there also comes the superscalar, multi-core and multi-processor systems, in which we increase the amount of cores, functional units like ALUs, or CPUs to increase the amount of instruction that can be run. "}]}